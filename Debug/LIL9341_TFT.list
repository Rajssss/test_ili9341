
LIL9341_TFT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000618  08009a58  08009a58  00019a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a070  0800a070  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a070  0800a070  0001a070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a078  0800a078  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a078  0800a078  0001a078  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a07c  0800a07c  0001a07c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800a080  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002528  200000c0  0800a140  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000a00  200025e8  0800a140  000225e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001443c  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000031ba  00000000  00000000  0003452c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e80  00000000  00000000  000376e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00038568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025c9e  00000000  00000000  00039238  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ee53  00000000  00000000  0005eed6  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d4933  00000000  00000000  0006dd29  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014265c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000441c  00000000  00000000  001426d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a3c 	.word	0x08009a3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	08009a3c 	.word	0x08009a3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2iz>:
 8000b1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d215      	bcs.n	8000b52 <__aeabi_d2iz+0x36>
 8000b26:	d511      	bpl.n	8000b4c <__aeabi_d2iz+0x30>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d912      	bls.n	8000b58 <__aeabi_d2iz+0x3c>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b42:	fa23 f002 	lsr.w	r0, r3, r2
 8000b46:	bf18      	it	ne
 8000b48:	4240      	negne	r0, r0
 8000b4a:	4770      	bx	lr
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b56:	d105      	bne.n	8000b64 <__aeabi_d2iz+0x48>
 8000b58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	bf08      	it	eq
 8000b5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b62:	4770      	bx	lr
 8000b64:	f04f 0000 	mov.w	r0, #0
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b972 	b.w	8000f48 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	4688      	mov	r8, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14b      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4615      	mov	r5, r2
 8000c8e:	d967      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0720 	rsb	r7, r2, #32
 8000c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000ca2:	4095      	lsls	r5, r2
 8000ca4:	ea47 0803 	orr.w	r8, r7, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb4:	fa1f fc85 	uxth.w	ip, r5
 8000cb8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18eb      	adds	r3, r5, r3
 8000cca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cce:	f080 811b 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8118 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000cd8:	3f02      	subs	r7, #2
 8000cda:	442b      	add	r3, r5
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf0:	45a4      	cmp	ip, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	192c      	adds	r4, r5, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000d04:	3802      	subs	r0, #2
 8000d06:	442c      	add	r4, r5
 8000d08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d0c:	eba4 040c 	sub.w	r4, r4, ip
 8000d10:	2700      	movs	r7, #0
 8000d12:	b11e      	cbz	r6, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xbe>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80eb 	beq.w	8000f02 <__udivmoddi4+0x286>
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d32:	4638      	mov	r0, r7
 8000d34:	4639      	mov	r1, r7
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f783 	clz	r7, r3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d147      	bne.n	8000dd2 <__udivmoddi4+0x156>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd0>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2c4>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4698      	mov	r8, r3
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000d5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xe8>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 808f 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6e:	1b49      	subs	r1, r1, r5
 8000d70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d74:	fa1f f885 	uxth.w	r8, r5
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7e:	0c23      	lsrs	r3, r4, #16
 8000d80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb08 f10c 	mul.w	r1, r8, ip
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d90:	18eb      	adds	r3, r5, r3
 8000d92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d9e:	4684      	mov	ip, r0
 8000da0:	1a59      	subs	r1, r3, r1
 8000da2:	b2a3      	uxth	r3, r4
 8000da4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000db0:	fb08 f800 	mul.w	r8, r8, r0
 8000db4:	45a0      	cmp	r8, r4
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x14c>
 8000db8:	192c      	adds	r4, r5, r4
 8000dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x14a>
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	f200 80b6 	bhi.w	8000f32 <__udivmoddi4+0x2b6>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	eba4 0408 	sub.w	r4, r4, r8
 8000dcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dd0:	e79f      	b.n	8000d12 <__udivmoddi4+0x96>
 8000dd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd6:	40bb      	lsls	r3, r7
 8000dd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ddc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000de0:	fa01 f407 	lsl.w	r4, r1, r7
 8000de4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000df0:	4325      	orrs	r5, r4
 8000df2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df6:	0c2c      	lsrs	r4, r5, #16
 8000df8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dfc:	fa1f fa8e 	uxth.w	sl, lr
 8000e00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e04:	fb09 f40a 	mul.w	r4, r9, sl
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1e 0303 	adds.w	r3, lr, r3
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	f080 8087 	bcs.w	8000f2e <__udivmoddi4+0x2b2>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f240 8084 	bls.w	8000f2e <__udivmoddi4+0x2b2>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4473      	add	r3, lr
 8000e2c:	1b1b      	subs	r3, r3, r4
 8000e2e:	b2ad      	uxth	r5, r5
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3310 	mls	r3, r8, r0, r3
 8000e38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1e 0404 	adds.w	r4, lr, r4
 8000e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4c:	d26b      	bcs.n	8000f26 <__udivmoddi4+0x2aa>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d969      	bls.n	8000f26 <__udivmoddi4+0x2aa>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4474      	add	r4, lr
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c2      	mov	sl, r8
 8000e66:	464b      	mov	r3, r9
 8000e68:	d354      	bcc.n	8000f14 <__udivmoddi4+0x298>
 8000e6a:	d051      	beq.n	8000f10 <__udivmoddi4+0x294>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d069      	beq.n	8000f44 <__udivmoddi4+0x2c8>
 8000e70:	ebb1 050a 	subs.w	r5, r1, sl
 8000e74:	eb64 0403 	sbc.w	r4, r4, r3
 8000e78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e7c:	40fd      	lsrs	r5, r7
 8000e7e:	40fc      	lsrs	r4, r7
 8000e80:	ea4c 0505 	orr.w	r5, ip, r5
 8000e84:	e9c6 5400 	strd	r5, r4, [r6]
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f703 	lsr.w	r7, r0, r3
 8000e94:	4095      	lsls	r5, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea2:	4338      	orrs	r0, r7
 8000ea4:	0c01      	lsrs	r1, r0, #16
 8000ea6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eaa:	fa1f f885 	uxth.w	r8, r5
 8000eae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb6:	fb07 f308 	mul.w	r3, r7, r8
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x256>
 8000ec2:	1869      	adds	r1, r5, r1
 8000ec4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec8:	d22f      	bcs.n	8000f2a <__udivmoddi4+0x2ae>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d92d      	bls.n	8000f2a <__udivmoddi4+0x2ae>
 8000ece:	3f02      	subs	r7, #2
 8000ed0:	4429      	add	r1, r5
 8000ed2:	1acb      	subs	r3, r1, r3
 8000ed4:	b281      	uxth	r1, r0
 8000ed6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb00 f308 	mul.w	r3, r0, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x27e>
 8000eea:	1869      	adds	r1, r5, r1
 8000eec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef0:	d217      	bcs.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d915      	bls.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4429      	add	r1, r5
 8000efa:	1ac9      	subs	r1, r1, r3
 8000efc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f00:	e73b      	b.n	8000d7a <__udivmoddi4+0xfe>
 8000f02:	4637      	mov	r7, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e709      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f08:	4607      	mov	r7, r0
 8000f0a:	e6e7      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f10:	4541      	cmp	r1, r8
 8000f12:	d2ab      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f18:	eb69 020e 	sbc.w	r2, r9, lr
 8000f1c:	3801      	subs	r0, #1
 8000f1e:	4613      	mov	r3, r2
 8000f20:	e7a4      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f22:	4660      	mov	r0, ip
 8000f24:	e7e9      	b.n	8000efa <__udivmoddi4+0x27e>
 8000f26:	4618      	mov	r0, r3
 8000f28:	e795      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2a:	4667      	mov	r7, ip
 8000f2c:	e7d1      	b.n	8000ed2 <__udivmoddi4+0x256>
 8000f2e:	4681      	mov	r9, r0
 8000f30:	e77c      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	442c      	add	r4, r5
 8000f36:	e747      	b.n	8000dc8 <__udivmoddi4+0x14c>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	442b      	add	r3, r5
 8000f3e:	e72f      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f40:	4638      	mov	r0, r7
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xda>
 8000f44:	4637      	mov	r7, r6
 8000f46:	e6e9      	b.n	8000d1c <__udivmoddi4+0xa0>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop
 8000f4c:	0000      	movs	r0, r0
	...

08000f50 <mainApp>:
#ifdef osCMSIS
void StartDefaultTask(void const * argument)
#else
void mainApp(void)
#endif
{
 8000f50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000f54:	b0ab      	sub	sp, #172	; 0xac
 8000f56:	af02      	add	r7, sp, #8
  uint32_t rx, ry, r;
  TIMEREG nowtime, lasttime;
  uint32_t sec, i;
  float fsec;
  char s[9] = "00:00:00";
 8000f58:	4a91      	ldr	r2, [pc, #580]	; (80011a0 <mainApp+0x250>)
 8000f5a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f60:	c303      	stmia	r3!, {r0, r1}
 8000f62:	701a      	strb	r2, [r3, #0]
  Point ap[12], lp[12];

  Delay(300);
 8000f64:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8000f68:	f003 f988 	bl	800427c <HAL_Delay>
  BSP_LCD_Init();
 8000f6c:	f002 fa78 	bl	8003460 <BSP_LCD_Init>

  rx = BSP_LCD_GetXSize() >> 1;
 8000f70:	f002 fa96 	bl	80034a0 <BSP_LCD_GetXSize>
 8000f74:	4603      	mov	r3, r0
 8000f76:	085b      	lsrs	r3, r3, #1
 8000f78:	b29b      	uxth	r3, r3
 8000f7a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ry = BSP_LCD_GetYSize() >> 1;
 8000f7e:	f002 fa9b 	bl	80034b8 <BSP_LCD_GetYSize>
 8000f82:	4603      	mov	r3, r0
 8000f84:	085b      	lsrs	r3, r3, #1
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  r = rx < ry ? rx: ry;
 8000f8c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8000f90:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000f94:	4293      	cmp	r3, r2
 8000f96:	bf28      	it	cs
 8000f98:	4613      	movcs	r3, r2
 8000f9a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  Delay(100);
 8000f9e:	2064      	movs	r0, #100	; 0x64
 8000fa0:	f003 f96c 	bl	800427c <HAL_Delay>
  printf("Display ID = %X\r\n", (unsigned int)BSP_LCD_ReadID());
 8000fa4:	f003 f8e6 	bl	8004174 <BSP_LCD_ReadID>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	4619      	mov	r1, r3
 8000fac:	487d      	ldr	r0, [pc, #500]	; (80011a4 <mainApp+0x254>)
 8000fae:	f006 fe4f 	bl	8007c50 <iprintf>

  BSP_LCD_Clear(CLOCK_COLOR_BACKGROUND);
 8000fb2:	2000      	movs	r0, #0
 8000fb4:	f002 faac 	bl	8003510 <BSP_LCD_Clear>
  float hps = (r * CLOCK_SIZE_HP) / 256;
 8000fb8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8000fbc:	4613      	mov	r3, r2
 8000fbe:	011b      	lsls	r3, r3, #4
 8000fc0:	1a9b      	subs	r3, r3, r2
 8000fc2:	00db      	lsls	r3, r3, #3
 8000fc4:	0a1b      	lsrs	r3, r3, #8
 8000fc6:	ee07 3a90 	vmov	s15, r3
 8000fca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fce:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
  float mps = (r * CLOCK_SIZE_MP) / 256;
 8000fd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fd6:	22b4      	movs	r2, #180	; 0xb4
 8000fd8:	fb02 f303 	mul.w	r3, r2, r3
 8000fdc:	0a1b      	lsrs	r3, r3, #8
 8000fde:	ee07 3a90 	vmov	s15, r3
 8000fe2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000fe6:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
  float sps = (r * CLOCK_SIZE_SP) / 256;
 8000fea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8000fee:	22dc      	movs	r2, #220	; 0xdc
 8000ff0:	fb02 f303 	mul.w	r3, r2, r3
 8000ff4:	0a1b      	lsrs	r3, r3, #8
 8000ff6:	ee07 3a90 	vmov	s15, r3
 8000ffa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000ffe:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
  float nps = (r * CLOCK_SIZE_NMBCIRC) / 256;
 8001002:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8001006:	4613      	mov	r3, r2
 8001008:	011b      	lsls	r3, r3, #4
 800100a:	1a9b      	subs	r3, r3, r2
 800100c:	011b      	lsls	r3, r3, #4
 800100e:	0a1b      	lsrs	r3, r3, #8
 8001010:	ee07 3a90 	vmov	s15, r3
 8001014:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001018:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80

  BSP_LCD_SetTextColor(CLOCK_COLOR_FACE);
 800101c:	f641 00e3 	movw	r0, #6371	; 0x18e3
 8001020:	f002 fa56 	bl	80034d0 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(rx, ry, r - 1);
 8001024:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001028:	b298      	uxth	r0, r3
 800102a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800102e:	b299      	uxth	r1, r3
 8001030:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001034:	b29b      	uxth	r3, r3
 8001036:	3b01      	subs	r3, #1
 8001038:	b29b      	uxth	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	f002 fdb2 	bl	8003ba4 <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(CLOCK_COLOR_BORDER);
 8001040:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8001044:	f002 fa44 	bl	80034d0 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(rx, ry, r - 1);
 8001048:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800104c:	b298      	uxth	r0, r3
 800104e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001052:	b299      	uxth	r1, r3
 8001054:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001058:	b29b      	uxth	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	b29b      	uxth	r3, r3
 800105e:	461a      	mov	r2, r3
 8001060:	f002 fc42 	bl	80038e8 <BSP_LCD_DrawCircle>
  BSP_LCD_SetTextColor(CLOCK_COLOR_NUMBERS);
 8001064:	f44f 60fc 	mov.w	r0, #2016	; 0x7e0
 8001068:	f002 fa32 	bl	80034d0 <BSP_LCD_SetTextColor>
  for(i = 0; i < 360; i+= 30)
 800106c:	2300      	movs	r3, #0
 800106e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001072:	e081      	b.n	8001178 <mainApp+0x228>
    BSP_LCD_FillCircle(rx + sin(i * M_TWOPI / 360) * nps , ry - cos(i * M_TWOPI / 360) * nps, 2);
 8001074:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001078:	f7ff fa3c 	bl	80004f4 <__aeabi_ui2d>
 800107c:	4604      	mov	r4, r0
 800107e:	460d      	mov	r5, r1
 8001080:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8001084:	f7ff fa36 	bl	80004f4 <__aeabi_ui2d>
 8001088:	a343      	add	r3, pc, #268	; (adr r3, 8001198 <mainApp+0x248>)
 800108a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800108e:	f7ff faab 	bl	80005e8 <__aeabi_dmul>
 8001092:	4602      	mov	r2, r0
 8001094:	460b      	mov	r3, r1
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 0200 	mov.w	r2, #0
 800109e:	4b42      	ldr	r3, [pc, #264]	; (80011a8 <mainApp+0x258>)
 80010a0:	f7ff fbcc 	bl	800083c <__aeabi_ddiv>
 80010a4:	4602      	mov	r2, r0
 80010a6:	460b      	mov	r3, r1
 80010a8:	ec43 2b17 	vmov	d7, r2, r3
 80010ac:	eeb0 0a47 	vmov.f32	s0, s14
 80010b0:	eef0 0a67 	vmov.f32	s1, s15
 80010b4:	f007 fcb0 	bl	8008a18 <sin>
 80010b8:	ec59 8b10 	vmov	r8, r9, d0
 80010bc:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80010c0:	f7ff fa3a 	bl	8000538 <__aeabi_f2d>
 80010c4:	4602      	mov	r2, r0
 80010c6:	460b      	mov	r3, r1
 80010c8:	4640      	mov	r0, r8
 80010ca:	4649      	mov	r1, r9
 80010cc:	f7ff fa8c 	bl	80005e8 <__aeabi_dmul>
 80010d0:	4602      	mov	r2, r0
 80010d2:	460b      	mov	r3, r1
 80010d4:	4620      	mov	r0, r4
 80010d6:	4629      	mov	r1, r5
 80010d8:	f7ff f8d0 	bl	800027c <__adddf3>
 80010dc:	4603      	mov	r3, r0
 80010de:	460c      	mov	r4, r1
 80010e0:	4618      	mov	r0, r3
 80010e2:	4621      	mov	r1, r4
 80010e4:	f7ff fd42 	bl	8000b6c <__aeabi_d2uiz>
 80010e8:	4603      	mov	r3, r0
 80010ea:	b29c      	uxth	r4, r3
 80010ec:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80010f0:	f7ff fa00 	bl	80004f4 <__aeabi_ui2d>
 80010f4:	4605      	mov	r5, r0
 80010f6:	460e      	mov	r6, r1
 80010f8:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 80010fc:	f7ff f9fa 	bl	80004f4 <__aeabi_ui2d>
 8001100:	a325      	add	r3, pc, #148	; (adr r3, 8001198 <mainApp+0x248>)
 8001102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001106:	f7ff fa6f 	bl	80005e8 <__aeabi_dmul>
 800110a:	4602      	mov	r2, r0
 800110c:	460b      	mov	r3, r1
 800110e:	4610      	mov	r0, r2
 8001110:	4619      	mov	r1, r3
 8001112:	f04f 0200 	mov.w	r2, #0
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <mainApp+0x258>)
 8001118:	f7ff fb90 	bl	800083c <__aeabi_ddiv>
 800111c:	4602      	mov	r2, r0
 800111e:	460b      	mov	r3, r1
 8001120:	ec43 2b17 	vmov	d7, r2, r3
 8001124:	eeb0 0a47 	vmov.f32	s0, s14
 8001128:	eef0 0a67 	vmov.f32	s1, s15
 800112c:	f007 fc30 	bl	8008990 <cos>
 8001130:	ec59 8b10 	vmov	r8, r9, d0
 8001134:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8001138:	f7ff f9fe 	bl	8000538 <__aeabi_f2d>
 800113c:	4602      	mov	r2, r0
 800113e:	460b      	mov	r3, r1
 8001140:	4640      	mov	r0, r8
 8001142:	4649      	mov	r1, r9
 8001144:	f7ff fa50 	bl	80005e8 <__aeabi_dmul>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	4628      	mov	r0, r5
 800114e:	4631      	mov	r1, r6
 8001150:	f7ff f892 	bl	8000278 <__aeabi_dsub>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fd06 	bl	8000b6c <__aeabi_d2uiz>
 8001160:	4603      	mov	r3, r0
 8001162:	b29b      	uxth	r3, r3
 8001164:	2202      	movs	r2, #2
 8001166:	4619      	mov	r1, r3
 8001168:	4620      	mov	r0, r4
 800116a:	f002 fd1b 	bl	8003ba4 <BSP_LCD_FillCircle>
  for(i = 0; i < 360; i+= 30)
 800116e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001172:	331e      	adds	r3, #30
 8001174:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001178:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800117c:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 8001180:	f4ff af78 	bcc.w	8001074 <mainApp+0x124>

  BSP_LCD_SetBackColor(CLOCK_COLOR_FACE);
 8001184:	f641 00e3 	movw	r0, #6371	; 0x18e3
 8001188:	f002 f9b2 	bl	80034f0 <BSP_LCD_SetBackColor>

  for(i = 0; i < 12; i++)
 800118c:	2300      	movs	r3, #0
 800118e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001192:	e03c      	b.n	800120e <mainApp+0x2be>
 8001194:	f3af 8000 	nop.w
 8001198:	54442d18 	.word	0x54442d18
 800119c:	401921fb 	.word	0x401921fb
 80011a0:	08009a6c 	.word	0x08009a6c
 80011a4:	08009a58 	.word	0x08009a58
 80011a8:	40768000 	.word	0x40768000
  {
    ap[i].X = rx; ap[i].Y = ry;
 80011ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011b6:	009b      	lsls	r3, r3, #2
 80011b8:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80011bc:	440b      	add	r3, r1
 80011be:	f823 2c6c 	strh.w	r2, [r3, #-108]
 80011c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011cc:	009b      	lsls	r3, r3, #2
 80011ce:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80011d2:	440b      	add	r3, r1
 80011d4:	f823 2c6a 	strh.w	r2, [r3, #-106]
    lp[i].X = rx; lp[i].Y = ry;
 80011d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80011dc:	b21a      	sxth	r2, r3
 80011de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011e2:	009b      	lsls	r3, r3, #2
 80011e4:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80011e8:	440b      	add	r3, r1
 80011ea:	f823 2c9c 	strh.w	r2, [r3, #-156]
 80011ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 80011fe:	440b      	add	r3, r1
 8001200:	f823 2c9a 	strh.w	r2, [r3, #-154]
  for(i = 0; i < 12; i++)
 8001204:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001208:	3301      	adds	r3, #1
 800120a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800120e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001212:	2b0b      	cmp	r3, #11
 8001214:	d9ca      	bls.n	80011ac <mainApp+0x25c>
  }
  lasttime.t = 0;
 8001216:	2300      	movs	r3, #0
 8001218:	673b      	str	r3, [r7, #112]	; 0x70

  while(1)
  {
    nowtime.t = TIMEREG_READ;
 800121a:	4bdf      	ldr	r3, [pc, #892]	; (8001598 <mainApp+0x648>)
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	677b      	str	r3, [r7, #116]	; 0x74
    if(nowtime.t != lasttime.t)
 8001222:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8001224:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001226:	429a      	cmp	r2, r3
 8001228:	d0f7      	beq.n	800121a <mainApp+0x2ca>
    {
      #if TIMEREG_MODE == 1 // bin mode
      sec = nowtime.t % 86400;
 800122a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800122c:	4adb      	ldr	r2, [pc, #876]	; (800159c <mainApp+0x64c>)
 800122e:	fba2 1203 	umull	r1, r2, r2, r3
 8001232:	0c12      	lsrs	r2, r2, #16
 8001234:	49da      	ldr	r1, [pc, #872]	; (80015a0 <mainApp+0x650>)
 8001236:	fb01 f202 	mul.w	r2, r1, r2
 800123a:	1a9b      	subs	r3, r3, r2
 800123c:	67fb      	str	r3, [r7, #124]	; 0x7c
      i = sec / 3600;
 800123e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001240:	4ad8      	ldr	r2, [pc, #864]	; (80015a4 <mainApp+0x654>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0adb      	lsrs	r3, r3, #11
 8001248:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      s[0] = i / 10 + '0';
 800124c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001250:	4ad5      	ldr	r2, [pc, #852]	; (80015a8 <mainApp+0x658>)
 8001252:	fba2 2303 	umull	r2, r3, r2, r3
 8001256:	08db      	lsrs	r3, r3, #3
 8001258:	b2db      	uxtb	r3, r3
 800125a:	3330      	adds	r3, #48	; 0x30
 800125c:	b2db      	uxtb	r3, r3
 800125e:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
      s[1] = i % 10 + '0';
 8001262:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8001266:	4bd0      	ldr	r3, [pc, #832]	; (80015a8 <mainApp+0x658>)
 8001268:	fba3 2301 	umull	r2, r3, r3, r1
 800126c:	08da      	lsrs	r2, r3, #3
 800126e:	4613      	mov	r3, r2
 8001270:	009b      	lsls	r3, r3, #2
 8001272:	4413      	add	r3, r2
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	1aca      	subs	r2, r1, r3
 8001278:	b2d3      	uxtb	r3, r2
 800127a:	3330      	adds	r3, #48	; 0x30
 800127c:	b2db      	uxtb	r3, r3
 800127e:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
      i = sec / 60 % 60;
 8001282:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001284:	4ac9      	ldr	r2, [pc, #804]	; (80015ac <mainApp+0x65c>)
 8001286:	fba2 2303 	umull	r2, r3, r2, r3
 800128a:	095a      	lsrs	r2, r3, #5
 800128c:	4bc7      	ldr	r3, [pc, #796]	; (80015ac <mainApp+0x65c>)
 800128e:	fba3 1302 	umull	r1, r3, r3, r2
 8001292:	0959      	lsrs	r1, r3, #5
 8001294:	460b      	mov	r3, r1
 8001296:	011b      	lsls	r3, r3, #4
 8001298:	1a5b      	subs	r3, r3, r1
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      s[3] = i / 10 + '0';
 80012a2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012a6:	4ac0      	ldr	r2, [pc, #768]	; (80015a8 <mainApp+0x658>)
 80012a8:	fba2 2303 	umull	r2, r3, r2, r3
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	b2db      	uxtb	r3, r3
 80012b0:	3330      	adds	r3, #48	; 0x30
 80012b2:	b2db      	uxtb	r3, r3
 80012b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      s[4] = i % 10 + '0';
 80012b8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80012bc:	4bba      	ldr	r3, [pc, #744]	; (80015a8 <mainApp+0x658>)
 80012be:	fba3 2301 	umull	r2, r3, r3, r1
 80012c2:	08da      	lsrs	r2, r3, #3
 80012c4:	4613      	mov	r3, r2
 80012c6:	009b      	lsls	r3, r3, #2
 80012c8:	4413      	add	r3, r2
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	1aca      	subs	r2, r1, r3
 80012ce:	b2d3      	uxtb	r3, r2
 80012d0:	3330      	adds	r3, #48	; 0x30
 80012d2:	b2db      	uxtb	r3, r3
 80012d4:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
      i = sec % 60;
 80012d8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80012da:	4bb4      	ldr	r3, [pc, #720]	; (80015ac <mainApp+0x65c>)
 80012dc:	fba3 1302 	umull	r1, r3, r3, r2
 80012e0:	0959      	lsrs	r1, r3, #5
 80012e2:	460b      	mov	r3, r1
 80012e4:	011b      	lsls	r3, r3, #4
 80012e6:	1a5b      	subs	r3, r3, r1
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
      s[6] = i / 10 + '0';
 80012f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80012f4:	4aac      	ldr	r2, [pc, #688]	; (80015a8 <mainApp+0x658>)
 80012f6:	fba2 2303 	umull	r2, r3, r2, r3
 80012fa:	08db      	lsrs	r3, r3, #3
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	3330      	adds	r3, #48	; 0x30
 8001300:	b2db      	uxtb	r3, r3
 8001302:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
      s[7] = i % 10 + '0';
 8001306:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800130a:	4ba7      	ldr	r3, [pc, #668]	; (80015a8 <mainApp+0x658>)
 800130c:	fba3 2301 	umull	r2, r3, r3, r1
 8001310:	08da      	lsrs	r2, r3, #3
 8001312:	4613      	mov	r3, r2
 8001314:	009b      	lsls	r3, r3, #2
 8001316:	4413      	add	r3, r2
 8001318:	005b      	lsls	r3, r3, #1
 800131a:	1aca      	subs	r2, r1, r3
 800131c:	b2d3      	uxtb	r3, r2
 800131e:	3330      	adds	r3, #48	; 0x30
 8001320:	b2db      	uxtb	r3, r3
 8001322:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
      s[4] = nowtime.mt + '0';
      s[6] = nowtime.su + '0';
      s[7] = nowtime.st + '0';
      #endif

      fsec = sec * M_TWOPI / 43200.0;
 8001326:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001328:	f7ff f8e4 	bl	80004f4 <__aeabi_ui2d>
 800132c:	a394      	add	r3, pc, #592	; (adr r3, 8001580 <mainApp+0x630>)
 800132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001332:	f7ff f959 	bl	80005e8 <__aeabi_dmul>
 8001336:	4603      	mov	r3, r0
 8001338:	460c      	mov	r4, r1
 800133a:	4618      	mov	r0, r3
 800133c:	4621      	mov	r1, r4
 800133e:	a392      	add	r3, pc, #584	; (adr r3, 8001588 <mainApp+0x638>)
 8001340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001344:	f7ff fa7a 	bl	800083c <__aeabi_ddiv>
 8001348:	4603      	mov	r3, r0
 800134a:	460c      	mov	r4, r1
 800134c:	4618      	mov	r0, r3
 800134e:	4621      	mov	r1, r4
 8001350:	f7ff fc2c 	bl	8000bac <__aeabi_d2f>
 8001354:	4603      	mov	r3, r0
 8001356:	67bb      	str	r3, [r7, #120]	; 0x78
      ap[2].X = rx + sin(fsec) * hps; ap[2].Y = ry - cos(fsec) * hps;
 8001358:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 800135c:	f7ff f8ca 	bl	80004f4 <__aeabi_ui2d>
 8001360:	4604      	mov	r4, r0
 8001362:	460d      	mov	r5, r1
 8001364:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001366:	f7ff f8e7 	bl	8000538 <__aeabi_f2d>
 800136a:	4602      	mov	r2, r0
 800136c:	460b      	mov	r3, r1
 800136e:	ec43 2b10 	vmov	d0, r2, r3
 8001372:	f007 fb51 	bl	8008a18 <sin>
 8001376:	ec59 8b10 	vmov	r8, r9, d0
 800137a:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 800137e:	f7ff f8db 	bl	8000538 <__aeabi_f2d>
 8001382:	4602      	mov	r2, r0
 8001384:	460b      	mov	r3, r1
 8001386:	4640      	mov	r0, r8
 8001388:	4649      	mov	r1, r9
 800138a:	f7ff f92d 	bl	80005e8 <__aeabi_dmul>
 800138e:	4602      	mov	r2, r0
 8001390:	460b      	mov	r3, r1
 8001392:	4620      	mov	r0, r4
 8001394:	4629      	mov	r1, r5
 8001396:	f7fe ff71 	bl	800027c <__adddf3>
 800139a:	4603      	mov	r3, r0
 800139c:	460c      	mov	r4, r1
 800139e:	4618      	mov	r0, r3
 80013a0:	4621      	mov	r1, r4
 80013a2:	f7ff fbbb 	bl	8000b1c <__aeabi_d2iz>
 80013a6:	4603      	mov	r3, r0
 80013a8:	b21b      	sxth	r3, r3
 80013aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80013ac:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80013b0:	f7ff f8a0 	bl	80004f4 <__aeabi_ui2d>
 80013b4:	4604      	mov	r4, r0
 80013b6:	460d      	mov	r5, r1
 80013b8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80013ba:	f7ff f8bd 	bl	8000538 <__aeabi_f2d>
 80013be:	4602      	mov	r2, r0
 80013c0:	460b      	mov	r3, r1
 80013c2:	ec43 2b10 	vmov	d0, r2, r3
 80013c6:	f007 fae3 	bl	8008990 <cos>
 80013ca:	ec59 8b10 	vmov	r8, r9, d0
 80013ce:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80013d2:	f7ff f8b1 	bl	8000538 <__aeabi_f2d>
 80013d6:	4602      	mov	r2, r0
 80013d8:	460b      	mov	r3, r1
 80013da:	4640      	mov	r0, r8
 80013dc:	4649      	mov	r1, r9
 80013de:	f7ff f903 	bl	80005e8 <__aeabi_dmul>
 80013e2:	4602      	mov	r2, r0
 80013e4:	460b      	mov	r3, r1
 80013e6:	4620      	mov	r0, r4
 80013e8:	4629      	mov	r1, r5
 80013ea:	f7fe ff45 	bl	8000278 <__aeabi_dsub>
 80013ee:	4603      	mov	r3, r0
 80013f0:	460c      	mov	r4, r1
 80013f2:	4618      	mov	r0, r3
 80013f4:	4621      	mov	r1, r4
 80013f6:	f7ff fb91 	bl	8000b1c <__aeabi_d2iz>
 80013fa:	4603      	mov	r3, r0
 80013fc:	b21b      	sxth	r3, r3
 80013fe:	87fb      	strh	r3, [r7, #62]	; 0x3e
      ap[1].X = rx + sin(fsec - CLOCK_WIDTH_HP) * hps * CLOCK_SHAPE_HP; ap[1].Y = ry - cos(fsec - CLOCK_WIDTH_HP) * hps * CLOCK_SHAPE_HP;
 8001400:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001404:	f7ff f876 	bl	80004f4 <__aeabi_ui2d>
 8001408:	4604      	mov	r4, r0
 800140a:	460d      	mov	r5, r1
 800140c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800140e:	f7ff f893 	bl	8000538 <__aeabi_f2d>
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b66      	ldr	r3, [pc, #408]	; (80015b0 <mainApp+0x660>)
 8001418:	f7fe ff2e 	bl	8000278 <__aeabi_dsub>
 800141c:	4602      	mov	r2, r0
 800141e:	460b      	mov	r3, r1
 8001420:	ec43 2b17 	vmov	d7, r2, r3
 8001424:	eeb0 0a47 	vmov.f32	s0, s14
 8001428:	eef0 0a67 	vmov.f32	s1, s15
 800142c:	f007 faf4 	bl	8008a18 <sin>
 8001430:	ec59 8b10 	vmov	r8, r9, d0
 8001434:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001438:	f7ff f87e 	bl	8000538 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4640      	mov	r0, r8
 8001442:	4649      	mov	r1, r9
 8001444:	f7ff f8d0 	bl	80005e8 <__aeabi_dmul>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	a34f      	add	r3, pc, #316	; (adr r3, 8001590 <mainApp+0x640>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7ff f8c7 	bl	80005e8 <__aeabi_dmul>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4620      	mov	r0, r4
 8001460:	4629      	mov	r1, r5
 8001462:	f7fe ff0b 	bl	800027c <__adddf3>
 8001466:	4603      	mov	r3, r0
 8001468:	460c      	mov	r4, r1
 800146a:	4618      	mov	r0, r3
 800146c:	4621      	mov	r1, r4
 800146e:	f7ff fb55 	bl	8000b1c <__aeabi_d2iz>
 8001472:	4603      	mov	r3, r0
 8001474:	b21b      	sxth	r3, r3
 8001476:	873b      	strh	r3, [r7, #56]	; 0x38
 8001478:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800147c:	f7ff f83a 	bl	80004f4 <__aeabi_ui2d>
 8001480:	4604      	mov	r4, r0
 8001482:	460d      	mov	r5, r1
 8001484:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001486:	f7ff f857 	bl	8000538 <__aeabi_f2d>
 800148a:	f04f 0200 	mov.w	r2, #0
 800148e:	4b48      	ldr	r3, [pc, #288]	; (80015b0 <mainApp+0x660>)
 8001490:	f7fe fef2 	bl	8000278 <__aeabi_dsub>
 8001494:	4602      	mov	r2, r0
 8001496:	460b      	mov	r3, r1
 8001498:	ec43 2b17 	vmov	d7, r2, r3
 800149c:	eeb0 0a47 	vmov.f32	s0, s14
 80014a0:	eef0 0a67 	vmov.f32	s1, s15
 80014a4:	f007 fa74 	bl	8008990 <cos>
 80014a8:	ec59 8b10 	vmov	r8, r9, d0
 80014ac:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80014b0:	f7ff f842 	bl	8000538 <__aeabi_f2d>
 80014b4:	4602      	mov	r2, r0
 80014b6:	460b      	mov	r3, r1
 80014b8:	4640      	mov	r0, r8
 80014ba:	4649      	mov	r1, r9
 80014bc:	f7ff f894 	bl	80005e8 <__aeabi_dmul>
 80014c0:	4602      	mov	r2, r0
 80014c2:	460b      	mov	r3, r1
 80014c4:	4610      	mov	r0, r2
 80014c6:	4619      	mov	r1, r3
 80014c8:	a331      	add	r3, pc, #196	; (adr r3, 8001590 <mainApp+0x640>)
 80014ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ce:	f7ff f88b 	bl	80005e8 <__aeabi_dmul>
 80014d2:	4602      	mov	r2, r0
 80014d4:	460b      	mov	r3, r1
 80014d6:	4620      	mov	r0, r4
 80014d8:	4629      	mov	r1, r5
 80014da:	f7fe fecd 	bl	8000278 <__aeabi_dsub>
 80014de:	4603      	mov	r3, r0
 80014e0:	460c      	mov	r4, r1
 80014e2:	4618      	mov	r0, r3
 80014e4:	4621      	mov	r1, r4
 80014e6:	f7ff fb19 	bl	8000b1c <__aeabi_d2iz>
 80014ea:	4603      	mov	r3, r0
 80014ec:	b21b      	sxth	r3, r3
 80014ee:	877b      	strh	r3, [r7, #58]	; 0x3a
      ap[3].X = rx + sin(fsec + CLOCK_WIDTH_HP) * hps * CLOCK_SHAPE_HP; ap[3].Y = ry - cos(fsec + CLOCK_WIDTH_HP) * hps * CLOCK_SHAPE_HP;
 80014f0:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80014f4:	f7fe fffe 	bl	80004f4 <__aeabi_ui2d>
 80014f8:	4604      	mov	r4, r0
 80014fa:	460d      	mov	r5, r1
 80014fc:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80014fe:	f7ff f81b 	bl	8000538 <__aeabi_f2d>
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	4b2a      	ldr	r3, [pc, #168]	; (80015b0 <mainApp+0x660>)
 8001508:	f7fe feb8 	bl	800027c <__adddf3>
 800150c:	4602      	mov	r2, r0
 800150e:	460b      	mov	r3, r1
 8001510:	ec43 2b17 	vmov	d7, r2, r3
 8001514:	eeb0 0a47 	vmov.f32	s0, s14
 8001518:	eef0 0a67 	vmov.f32	s1, s15
 800151c:	f007 fa7c 	bl	8008a18 <sin>
 8001520:	ec59 8b10 	vmov	r8, r9, d0
 8001524:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8001528:	f7ff f806 	bl	8000538 <__aeabi_f2d>
 800152c:	4602      	mov	r2, r0
 800152e:	460b      	mov	r3, r1
 8001530:	4640      	mov	r0, r8
 8001532:	4649      	mov	r1, r9
 8001534:	f7ff f858 	bl	80005e8 <__aeabi_dmul>
 8001538:	4602      	mov	r2, r0
 800153a:	460b      	mov	r3, r1
 800153c:	4610      	mov	r0, r2
 800153e:	4619      	mov	r1, r3
 8001540:	a313      	add	r3, pc, #76	; (adr r3, 8001590 <mainApp+0x640>)
 8001542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001546:	f7ff f84f 	bl	80005e8 <__aeabi_dmul>
 800154a:	4602      	mov	r2, r0
 800154c:	460b      	mov	r3, r1
 800154e:	4620      	mov	r0, r4
 8001550:	4629      	mov	r1, r5
 8001552:	f7fe fe93 	bl	800027c <__adddf3>
 8001556:	4603      	mov	r3, r0
 8001558:	460c      	mov	r4, r1
 800155a:	4618      	mov	r0, r3
 800155c:	4621      	mov	r1, r4
 800155e:	f7ff fadd 	bl	8000b1c <__aeabi_d2iz>
 8001562:	4603      	mov	r3, r0
 8001564:	b21b      	sxth	r3, r3
 8001566:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 800156a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800156e:	f7fe ffc1 	bl	80004f4 <__aeabi_ui2d>
 8001572:	4604      	mov	r4, r0
 8001574:	460d      	mov	r5, r1
 8001576:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001578:	e01c      	b.n	80015b4 <mainApp+0x664>
 800157a:	bf00      	nop
 800157c:	f3af 8000 	nop.w
 8001580:	54442d18 	.word	0x54442d18
 8001584:	401921fb 	.word	0x401921fb
 8001588:	00000000 	.word	0x00000000
 800158c:	40e51800 	.word	0x40e51800
 8001590:	9999999a 	.word	0x9999999a
 8001594:	3fd99999 	.word	0x3fd99999
 8001598:	200004c0 	.word	0x200004c0
 800159c:	c22e4507 	.word	0xc22e4507
 80015a0:	00015180 	.word	0x00015180
 80015a4:	91a2b3c5 	.word	0x91a2b3c5
 80015a8:	cccccccd 	.word	0xcccccccd
 80015ac:	88888889 	.word	0x88888889
 80015b0:	3fd00000 	.word	0x3fd00000
 80015b4:	f7fe ffc0 	bl	8000538 <__aeabi_f2d>
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4bec      	ldr	r3, [pc, #944]	; (8001970 <mainApp+0xa20>)
 80015be:	f7fe fe5d 	bl	800027c <__adddf3>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	ec43 2b17 	vmov	d7, r2, r3
 80015ca:	eeb0 0a47 	vmov.f32	s0, s14
 80015ce:	eef0 0a67 	vmov.f32	s1, s15
 80015d2:	f007 f9dd 	bl	8008990 <cos>
 80015d6:	ec59 8b10 	vmov	r8, r9, d0
 80015da:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 80015de:	f7fe ffab 	bl	8000538 <__aeabi_f2d>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	4640      	mov	r0, r8
 80015e8:	4649      	mov	r1, r9
 80015ea:	f7fe fffd 	bl	80005e8 <__aeabi_dmul>
 80015ee:	4602      	mov	r2, r0
 80015f0:	460b      	mov	r3, r1
 80015f2:	4610      	mov	r0, r2
 80015f4:	4619      	mov	r1, r3
 80015f6:	a3d4      	add	r3, pc, #848	; (adr r3, 8001948 <mainApp+0x9f8>)
 80015f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fc:	f7fe fff4 	bl	80005e8 <__aeabi_dmul>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	4620      	mov	r0, r4
 8001606:	4629      	mov	r1, r5
 8001608:	f7fe fe36 	bl	8000278 <__aeabi_dsub>
 800160c:	4603      	mov	r3, r0
 800160e:	460c      	mov	r4, r1
 8001610:	4618      	mov	r0, r3
 8001612:	4621      	mov	r1, r4
 8001614:	f7ff fa82 	bl	8000b1c <__aeabi_d2iz>
 8001618:	4603      	mov	r3, r0
 800161a:	b21b      	sxth	r3, r3
 800161c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

      fsec = sec * M_TWOPI / 3600.0;
 8001620:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8001622:	f7fe ff67 	bl	80004f4 <__aeabi_ui2d>
 8001626:	a3ca      	add	r3, pc, #808	; (adr r3, 8001950 <mainApp+0xa00>)
 8001628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800162c:	f7fe ffdc 	bl	80005e8 <__aeabi_dmul>
 8001630:	4603      	mov	r3, r0
 8001632:	460c      	mov	r4, r1
 8001634:	4618      	mov	r0, r3
 8001636:	4621      	mov	r1, r4
 8001638:	a3c7      	add	r3, pc, #796	; (adr r3, 8001958 <mainApp+0xa08>)
 800163a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163e:	f7ff f8fd 	bl	800083c <__aeabi_ddiv>
 8001642:	4603      	mov	r3, r0
 8001644:	460c      	mov	r4, r1
 8001646:	4618      	mov	r0, r3
 8001648:	4621      	mov	r1, r4
 800164a:	f7ff faaf 	bl	8000bac <__aeabi_d2f>
 800164e:	4603      	mov	r3, r0
 8001650:	67bb      	str	r3, [r7, #120]	; 0x78
      ap[6].X = rx + sin(fsec) * mps; ap[6].Y = ry - cos(fsec) * mps;
 8001652:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001656:	f7fe ff4d 	bl	80004f4 <__aeabi_ui2d>
 800165a:	4604      	mov	r4, r0
 800165c:	460d      	mov	r5, r1
 800165e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001660:	f7fe ff6a 	bl	8000538 <__aeabi_f2d>
 8001664:	4602      	mov	r2, r0
 8001666:	460b      	mov	r3, r1
 8001668:	ec43 2b10 	vmov	d0, r2, r3
 800166c:	f007 f9d4 	bl	8008a18 <sin>
 8001670:	ec59 8b10 	vmov	r8, r9, d0
 8001674:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001678:	f7fe ff5e 	bl	8000538 <__aeabi_f2d>
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4640      	mov	r0, r8
 8001682:	4649      	mov	r1, r9
 8001684:	f7fe ffb0 	bl	80005e8 <__aeabi_dmul>
 8001688:	4602      	mov	r2, r0
 800168a:	460b      	mov	r3, r1
 800168c:	4620      	mov	r0, r4
 800168e:	4629      	mov	r1, r5
 8001690:	f7fe fdf4 	bl	800027c <__adddf3>
 8001694:	4603      	mov	r3, r0
 8001696:	460c      	mov	r4, r1
 8001698:	4618      	mov	r0, r3
 800169a:	4621      	mov	r1, r4
 800169c:	f7ff fa3e 	bl	8000b1c <__aeabi_d2iz>
 80016a0:	4603      	mov	r3, r0
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80016a8:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80016ac:	f7fe ff22 	bl	80004f4 <__aeabi_ui2d>
 80016b0:	4604      	mov	r4, r0
 80016b2:	460d      	mov	r5, r1
 80016b4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80016b6:	f7fe ff3f 	bl	8000538 <__aeabi_f2d>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	ec43 2b10 	vmov	d0, r2, r3
 80016c2:	f007 f965 	bl	8008990 <cos>
 80016c6:	ec59 8b10 	vmov	r8, r9, d0
 80016ca:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80016ce:	f7fe ff33 	bl	8000538 <__aeabi_f2d>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4640      	mov	r0, r8
 80016d8:	4649      	mov	r1, r9
 80016da:	f7fe ff85 	bl	80005e8 <__aeabi_dmul>
 80016de:	4602      	mov	r2, r0
 80016e0:	460b      	mov	r3, r1
 80016e2:	4620      	mov	r0, r4
 80016e4:	4629      	mov	r1, r5
 80016e6:	f7fe fdc7 	bl	8000278 <__aeabi_dsub>
 80016ea:	4603      	mov	r3, r0
 80016ec:	460c      	mov	r4, r1
 80016ee:	4618      	mov	r0, r3
 80016f0:	4621      	mov	r1, r4
 80016f2:	f7ff fa13 	bl	8000b1c <__aeabi_d2iz>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b21b      	sxth	r3, r3
 80016fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      ap[5].X = rx + sin(fsec - CLOCK_WIDTH_MP) * mps * CLOCK_SHAPE_MP; ap[5].Y = ry - cos(fsec - CLOCK_WIDTH_MP) * mps * CLOCK_SHAPE_MP;
 80016fe:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001702:	f7fe fef7 	bl	80004f4 <__aeabi_ui2d>
 8001706:	4604      	mov	r4, r0
 8001708:	460d      	mov	r5, r1
 800170a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800170c:	f7fe ff14 	bl	8000538 <__aeabi_f2d>
 8001710:	a393      	add	r3, pc, #588	; (adr r3, 8001960 <mainApp+0xa10>)
 8001712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001716:	f7fe fdaf 	bl	8000278 <__aeabi_dsub>
 800171a:	4602      	mov	r2, r0
 800171c:	460b      	mov	r3, r1
 800171e:	ec43 2b17 	vmov	d7, r2, r3
 8001722:	eeb0 0a47 	vmov.f32	s0, s14
 8001726:	eef0 0a67 	vmov.f32	s1, s15
 800172a:	f007 f975 	bl	8008a18 <sin>
 800172e:	ec59 8b10 	vmov	r8, r9, d0
 8001732:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8001736:	f7fe feff 	bl	8000538 <__aeabi_f2d>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4640      	mov	r0, r8
 8001740:	4649      	mov	r1, r9
 8001742:	f7fe ff51 	bl	80005e8 <__aeabi_dmul>
 8001746:	4602      	mov	r2, r0
 8001748:	460b      	mov	r3, r1
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	a386      	add	r3, pc, #536	; (adr r3, 8001968 <mainApp+0xa18>)
 8001750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001754:	f7fe ff48 	bl	80005e8 <__aeabi_dmul>
 8001758:	4602      	mov	r2, r0
 800175a:	460b      	mov	r3, r1
 800175c:	4620      	mov	r0, r4
 800175e:	4629      	mov	r1, r5
 8001760:	f7fe fd8c 	bl	800027c <__adddf3>
 8001764:	4603      	mov	r3, r0
 8001766:	460c      	mov	r4, r1
 8001768:	4618      	mov	r0, r3
 800176a:	4621      	mov	r1, r4
 800176c:	f7ff f9d6 	bl	8000b1c <__aeabi_d2iz>
 8001770:	4603      	mov	r3, r0
 8001772:	b21b      	sxth	r3, r3
 8001774:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8001778:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 800177c:	f7fe feba 	bl	80004f4 <__aeabi_ui2d>
 8001780:	4604      	mov	r4, r0
 8001782:	460d      	mov	r5, r1
 8001784:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001786:	f7fe fed7 	bl	8000538 <__aeabi_f2d>
 800178a:	a375      	add	r3, pc, #468	; (adr r3, 8001960 <mainApp+0xa10>)
 800178c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001790:	f7fe fd72 	bl	8000278 <__aeabi_dsub>
 8001794:	4602      	mov	r2, r0
 8001796:	460b      	mov	r3, r1
 8001798:	ec43 2b17 	vmov	d7, r2, r3
 800179c:	eeb0 0a47 	vmov.f32	s0, s14
 80017a0:	eef0 0a67 	vmov.f32	s1, s15
 80017a4:	f007 f8f4 	bl	8008990 <cos>
 80017a8:	ec59 8b10 	vmov	r8, r9, d0
 80017ac:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80017b0:	f7fe fec2 	bl	8000538 <__aeabi_f2d>
 80017b4:	4602      	mov	r2, r0
 80017b6:	460b      	mov	r3, r1
 80017b8:	4640      	mov	r0, r8
 80017ba:	4649      	mov	r1, r9
 80017bc:	f7fe ff14 	bl	80005e8 <__aeabi_dmul>
 80017c0:	4602      	mov	r2, r0
 80017c2:	460b      	mov	r3, r1
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	a367      	add	r3, pc, #412	; (adr r3, 8001968 <mainApp+0xa18>)
 80017ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80017ce:	f7fe ff0b 	bl	80005e8 <__aeabi_dmul>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4620      	mov	r0, r4
 80017d8:	4629      	mov	r1, r5
 80017da:	f7fe fd4d 	bl	8000278 <__aeabi_dsub>
 80017de:	4603      	mov	r3, r0
 80017e0:	460c      	mov	r4, r1
 80017e2:	4618      	mov	r0, r3
 80017e4:	4621      	mov	r1, r4
 80017e6:	f7ff f999 	bl	8000b1c <__aeabi_d2iz>
 80017ea:	4603      	mov	r3, r0
 80017ec:	b21b      	sxth	r3, r3
 80017ee:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
      ap[7].X = rx + sin(fsec + CLOCK_WIDTH_MP) * mps * CLOCK_SHAPE_MP; ap[7].Y = ry - cos(fsec + CLOCK_WIDTH_MP) * mps * CLOCK_SHAPE_MP;
 80017f2:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 80017f6:	f7fe fe7d 	bl	80004f4 <__aeabi_ui2d>
 80017fa:	4604      	mov	r4, r0
 80017fc:	460d      	mov	r5, r1
 80017fe:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001800:	f7fe fe9a 	bl	8000538 <__aeabi_f2d>
 8001804:	a356      	add	r3, pc, #344	; (adr r3, 8001960 <mainApp+0xa10>)
 8001806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800180a:	f7fe fd37 	bl	800027c <__adddf3>
 800180e:	4602      	mov	r2, r0
 8001810:	460b      	mov	r3, r1
 8001812:	ec43 2b17 	vmov	d7, r2, r3
 8001816:	eeb0 0a47 	vmov.f32	s0, s14
 800181a:	eef0 0a67 	vmov.f32	s1, s15
 800181e:	f007 f8fb 	bl	8008a18 <sin>
 8001822:	ec59 8b10 	vmov	r8, r9, d0
 8001826:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 800182a:	f7fe fe85 	bl	8000538 <__aeabi_f2d>
 800182e:	4602      	mov	r2, r0
 8001830:	460b      	mov	r3, r1
 8001832:	4640      	mov	r0, r8
 8001834:	4649      	mov	r1, r9
 8001836:	f7fe fed7 	bl	80005e8 <__aeabi_dmul>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	4610      	mov	r0, r2
 8001840:	4619      	mov	r1, r3
 8001842:	a349      	add	r3, pc, #292	; (adr r3, 8001968 <mainApp+0xa18>)
 8001844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001848:	f7fe fece 	bl	80005e8 <__aeabi_dmul>
 800184c:	4602      	mov	r2, r0
 800184e:	460b      	mov	r3, r1
 8001850:	4620      	mov	r0, r4
 8001852:	4629      	mov	r1, r5
 8001854:	f7fe fd12 	bl	800027c <__adddf3>
 8001858:	4603      	mov	r3, r0
 800185a:	460c      	mov	r4, r1
 800185c:	4618      	mov	r0, r3
 800185e:	4621      	mov	r1, r4
 8001860:	f7ff f95c 	bl	8000b1c <__aeabi_d2iz>
 8001864:	4603      	mov	r3, r0
 8001866:	b21b      	sxth	r3, r3
 8001868:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 800186c:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001870:	f7fe fe40 	bl	80004f4 <__aeabi_ui2d>
 8001874:	4604      	mov	r4, r0
 8001876:	460d      	mov	r5, r1
 8001878:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800187a:	f7fe fe5d 	bl	8000538 <__aeabi_f2d>
 800187e:	a338      	add	r3, pc, #224	; (adr r3, 8001960 <mainApp+0xa10>)
 8001880:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001884:	f7fe fcfa 	bl	800027c <__adddf3>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	ec43 2b17 	vmov	d7, r2, r3
 8001890:	eeb0 0a47 	vmov.f32	s0, s14
 8001894:	eef0 0a67 	vmov.f32	s1, s15
 8001898:	f007 f87a 	bl	8008990 <cos>
 800189c:	ec59 8b10 	vmov	r8, r9, d0
 80018a0:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 80018a4:	f7fe fe48 	bl	8000538 <__aeabi_f2d>
 80018a8:	4602      	mov	r2, r0
 80018aa:	460b      	mov	r3, r1
 80018ac:	4640      	mov	r0, r8
 80018ae:	4649      	mov	r1, r9
 80018b0:	f7fe fe9a 	bl	80005e8 <__aeabi_dmul>
 80018b4:	4602      	mov	r2, r0
 80018b6:	460b      	mov	r3, r1
 80018b8:	4610      	mov	r0, r2
 80018ba:	4619      	mov	r1, r3
 80018bc:	a32a      	add	r3, pc, #168	; (adr r3, 8001968 <mainApp+0xa18>)
 80018be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018c2:	f7fe fe91 	bl	80005e8 <__aeabi_dmul>
 80018c6:	4602      	mov	r2, r0
 80018c8:	460b      	mov	r3, r1
 80018ca:	4620      	mov	r0, r4
 80018cc:	4629      	mov	r1, r5
 80018ce:	f7fe fcd3 	bl	8000278 <__aeabi_dsub>
 80018d2:	4603      	mov	r3, r0
 80018d4:	460c      	mov	r4, r1
 80018d6:	4618      	mov	r0, r3
 80018d8:	4621      	mov	r1, r4
 80018da:	f7ff f91f 	bl	8000b1c <__aeabi_d2iz>
 80018de:	4603      	mov	r3, r0
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      fsec = (sec % 60) * M_TWOPI / 60.0;
 80018e6:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80018e8:	4b22      	ldr	r3, [pc, #136]	; (8001974 <mainApp+0xa24>)
 80018ea:	fba3 2301 	umull	r2, r3, r3, r1
 80018ee:	095a      	lsrs	r2, r3, #5
 80018f0:	4613      	mov	r3, r2
 80018f2:	011b      	lsls	r3, r3, #4
 80018f4:	1a9b      	subs	r3, r3, r2
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	1aca      	subs	r2, r1, r3
 80018fa:	4610      	mov	r0, r2
 80018fc:	f7fe fdfa 	bl	80004f4 <__aeabi_ui2d>
 8001900:	a313      	add	r3, pc, #76	; (adr r3, 8001950 <mainApp+0xa00>)
 8001902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001906:	f7fe fe6f 	bl	80005e8 <__aeabi_dmul>
 800190a:	4603      	mov	r3, r0
 800190c:	460c      	mov	r4, r1
 800190e:	4618      	mov	r0, r3
 8001910:	4621      	mov	r1, r4
 8001912:	f04f 0200 	mov.w	r2, #0
 8001916:	4b18      	ldr	r3, [pc, #96]	; (8001978 <mainApp+0xa28>)
 8001918:	f7fe ff90 	bl	800083c <__aeabi_ddiv>
 800191c:	4603      	mov	r3, r0
 800191e:	460c      	mov	r4, r1
 8001920:	4618      	mov	r0, r3
 8001922:	4621      	mov	r1, r4
 8001924:	f7ff f942 	bl	8000bac <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	67bb      	str	r3, [r7, #120]	; 0x78
      ap[10].X = rx + sin(fsec) * sps; ap[10].Y = ry - cos(fsec) * sps;
 800192c:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001930:	f7fe fde0 	bl	80004f4 <__aeabi_ui2d>
 8001934:	4604      	mov	r4, r0
 8001936:	460d      	mov	r5, r1
 8001938:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800193a:	f7fe fdfd 	bl	8000538 <__aeabi_f2d>
 800193e:	4602      	mov	r2, r0
 8001940:	460b      	mov	r3, r1
 8001942:	e01b      	b.n	800197c <mainApp+0xa2c>
 8001944:	f3af 8000 	nop.w
 8001948:	9999999a 	.word	0x9999999a
 800194c:	3fd99999 	.word	0x3fd99999
 8001950:	54442d18 	.word	0x54442d18
 8001954:	401921fb 	.word	0x401921fb
 8001958:	00000000 	.word	0x00000000
 800195c:	40ac2000 	.word	0x40ac2000
 8001960:	33333333 	.word	0x33333333
 8001964:	3fc33333 	.word	0x3fc33333
 8001968:	33333333 	.word	0x33333333
 800196c:	3fd33333 	.word	0x3fd33333
 8001970:	3fd00000 	.word	0x3fd00000
 8001974:	88888889 	.word	0x88888889
 8001978:	404e0000 	.word	0x404e0000
 800197c:	ec43 2b10 	vmov	d0, r2, r3
 8001980:	f007 f84a 	bl	8008a18 <sin>
 8001984:	ec59 8b10 	vmov	r8, r9, d0
 8001988:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800198c:	f7fe fdd4 	bl	8000538 <__aeabi_f2d>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4640      	mov	r0, r8
 8001996:	4649      	mov	r1, r9
 8001998:	f7fe fe26 	bl	80005e8 <__aeabi_dmul>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fc6a 	bl	800027c <__adddf3>
 80019a8:	4603      	mov	r3, r0
 80019aa:	460c      	mov	r4, r1
 80019ac:	4618      	mov	r0, r3
 80019ae:	4621      	mov	r1, r4
 80019b0:	f7ff f8b4 	bl	8000b1c <__aeabi_d2iz>
 80019b4:	4603      	mov	r3, r0
 80019b6:	b21b      	sxth	r3, r3
 80019b8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80019bc:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 80019c0:	f7fe fd98 	bl	80004f4 <__aeabi_ui2d>
 80019c4:	4604      	mov	r4, r0
 80019c6:	460d      	mov	r5, r1
 80019c8:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 80019ca:	f7fe fdb5 	bl	8000538 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ec43 2b10 	vmov	d0, r2, r3
 80019d6:	f006 ffdb 	bl	8008990 <cos>
 80019da:	ec59 8b10 	vmov	r8, r9, d0
 80019de:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 80019e2:	f7fe fda9 	bl	8000538 <__aeabi_f2d>
 80019e6:	4602      	mov	r2, r0
 80019e8:	460b      	mov	r3, r1
 80019ea:	4640      	mov	r0, r8
 80019ec:	4649      	mov	r1, r9
 80019ee:	f7fe fdfb 	bl	80005e8 <__aeabi_dmul>
 80019f2:	4602      	mov	r2, r0
 80019f4:	460b      	mov	r3, r1
 80019f6:	4620      	mov	r0, r4
 80019f8:	4629      	mov	r1, r5
 80019fa:	f7fe fc3d 	bl	8000278 <__aeabi_dsub>
 80019fe:	4603      	mov	r3, r0
 8001a00:	460c      	mov	r4, r1
 8001a02:	4618      	mov	r0, r3
 8001a04:	4621      	mov	r1, r4
 8001a06:	f7ff f889 	bl	8000b1c <__aeabi_d2iz>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	b21b      	sxth	r3, r3
 8001a0e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
      ap[9].X = rx + sin(fsec - CLOCK_WIDTH_SP) * sps * CLOCK_SHAPE_SP; ap[9].Y = ry - cos(fsec - CLOCK_WIDTH_SP) * sps * CLOCK_SHAPE_SP;
 8001a12:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001a16:	f7fe fd6d 	bl	80004f4 <__aeabi_ui2d>
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	460d      	mov	r5, r1
 8001a1e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001a20:	f7fe fd8a 	bl	8000538 <__aeabi_f2d>
 8001a24:	f20f 5318 	addw	r3, pc, #1304	; 0x518
 8001a28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a2c:	f7fe fc24 	bl	8000278 <__aeabi_dsub>
 8001a30:	4602      	mov	r2, r0
 8001a32:	460b      	mov	r3, r1
 8001a34:	ec43 2b17 	vmov	d7, r2, r3
 8001a38:	eeb0 0a47 	vmov.f32	s0, s14
 8001a3c:	eef0 0a67 	vmov.f32	s1, s15
 8001a40:	f006 ffea 	bl	8008a18 <sin>
 8001a44:	ec59 8b10 	vmov	r8, r9, d0
 8001a48:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001a4c:	f7fe fd74 	bl	8000538 <__aeabi_f2d>
 8001a50:	4602      	mov	r2, r0
 8001a52:	460b      	mov	r3, r1
 8001a54:	4640      	mov	r0, r8
 8001a56:	4649      	mov	r1, r9
 8001a58:	f7fe fdc6 	bl	80005e8 <__aeabi_dmul>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	4610      	mov	r0, r2
 8001a62:	4619      	mov	r1, r3
 8001a64:	f20f 43e0 	addw	r3, pc, #1248	; 0x4e0
 8001a68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a6c:	f7fe fdbc 	bl	80005e8 <__aeabi_dmul>
 8001a70:	4602      	mov	r2, r0
 8001a72:	460b      	mov	r3, r1
 8001a74:	4620      	mov	r0, r4
 8001a76:	4629      	mov	r1, r5
 8001a78:	f7fe fc00 	bl	800027c <__adddf3>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	460c      	mov	r4, r1
 8001a80:	4618      	mov	r0, r3
 8001a82:	4621      	mov	r1, r4
 8001a84:	f7ff f84a 	bl	8000b1c <__aeabi_d2iz>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	b21b      	sxth	r3, r3
 8001a8c:	f8a7 3058 	strh.w	r3, [r7, #88]	; 0x58
 8001a90:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001a94:	f7fe fd2e 	bl	80004f4 <__aeabi_ui2d>
 8001a98:	4604      	mov	r4, r0
 8001a9a:	460d      	mov	r5, r1
 8001a9c:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001a9e:	f7fe fd4b 	bl	8000538 <__aeabi_f2d>
 8001aa2:	f20f 439c 	addw	r3, pc, #1180	; 0x49c
 8001aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aaa:	f7fe fbe5 	bl	8000278 <__aeabi_dsub>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ec43 2b17 	vmov	d7, r2, r3
 8001ab6:	eeb0 0a47 	vmov.f32	s0, s14
 8001aba:	eef0 0a67 	vmov.f32	s1, s15
 8001abe:	f006 ff67 	bl	8008990 <cos>
 8001ac2:	ec59 8b10 	vmov	r8, r9, d0
 8001ac6:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001aca:	f7fe fd35 	bl	8000538 <__aeabi_f2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4640      	mov	r0, r8
 8001ad4:	4649      	mov	r1, r9
 8001ad6:	f7fe fd87 	bl	80005e8 <__aeabi_dmul>
 8001ada:	4602      	mov	r2, r0
 8001adc:	460b      	mov	r3, r1
 8001ade:	4610      	mov	r0, r2
 8001ae0:	4619      	mov	r1, r3
 8001ae2:	f20f 4364 	addw	r3, pc, #1124	; 0x464
 8001ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aea:	f7fe fd7d 	bl	80005e8 <__aeabi_dmul>
 8001aee:	4602      	mov	r2, r0
 8001af0:	460b      	mov	r3, r1
 8001af2:	4620      	mov	r0, r4
 8001af4:	4629      	mov	r1, r5
 8001af6:	f7fe fbbf 	bl	8000278 <__aeabi_dsub>
 8001afa:	4603      	mov	r3, r0
 8001afc:	460c      	mov	r4, r1
 8001afe:	4618      	mov	r0, r3
 8001b00:	4621      	mov	r1, r4
 8001b02:	f7ff f80b 	bl	8000b1c <__aeabi_d2iz>
 8001b06:	4603      	mov	r3, r0
 8001b08:	b21b      	sxth	r3, r3
 8001b0a:	f8a7 305a 	strh.w	r3, [r7, #90]	; 0x5a
      ap[11].X = rx + sin(fsec + CLOCK_WIDTH_SP) * sps * CLOCK_SHAPE_SP; ap[11].Y = ry - cos(fsec + CLOCK_WIDTH_SP) * sps * CLOCK_SHAPE_SP;
 8001b0e:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8001b12:	f7fe fcef 	bl	80004f4 <__aeabi_ui2d>
 8001b16:	4604      	mov	r4, r0
 8001b18:	460d      	mov	r5, r1
 8001b1a:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001b1c:	f7fe fd0c 	bl	8000538 <__aeabi_f2d>
 8001b20:	f20f 431c 	addw	r3, pc, #1052	; 0x41c
 8001b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b28:	f7fe fba8 	bl	800027c <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	ec43 2b17 	vmov	d7, r2, r3
 8001b34:	eeb0 0a47 	vmov.f32	s0, s14
 8001b38:	eef0 0a67 	vmov.f32	s1, s15
 8001b3c:	f006 ff6c 	bl	8008a18 <sin>
 8001b40:	ec59 8b10 	vmov	r8, r9, d0
 8001b44:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001b48:	f7fe fcf6 	bl	8000538 <__aeabi_f2d>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	460b      	mov	r3, r1
 8001b50:	4640      	mov	r0, r8
 8001b52:	4649      	mov	r1, r9
 8001b54:	f7fe fd48 	bl	80005e8 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4610      	mov	r0, r2
 8001b5e:	4619      	mov	r1, r3
 8001b60:	a3f9      	add	r3, pc, #996	; (adr r3, 8001f48 <mainApp+0xff8>)
 8001b62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b66:	f7fe fd3f 	bl	80005e8 <__aeabi_dmul>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4620      	mov	r0, r4
 8001b70:	4629      	mov	r1, r5
 8001b72:	f7fe fb83 	bl	800027c <__adddf3>
 8001b76:	4603      	mov	r3, r0
 8001b78:	460c      	mov	r4, r1
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	4621      	mov	r1, r4
 8001b7e:	f7fe ffcd 	bl	8000b1c <__aeabi_d2iz>
 8001b82:	4603      	mov	r3, r0
 8001b84:	b21b      	sxth	r3, r3
 8001b86:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
 8001b8a:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8001b8e:	f7fe fcb1 	bl	80004f4 <__aeabi_ui2d>
 8001b92:	4604      	mov	r4, r0
 8001b94:	460d      	mov	r5, r1
 8001b96:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8001b98:	f7fe fcce 	bl	8000538 <__aeabi_f2d>
 8001b9c:	a3e8      	add	r3, pc, #928	; (adr r3, 8001f40 <mainApp+0xff0>)
 8001b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba2:	f7fe fb6b 	bl	800027c <__adddf3>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	ec43 2b17 	vmov	d7, r2, r3
 8001bae:	eeb0 0a47 	vmov.f32	s0, s14
 8001bb2:	eef0 0a67 	vmov.f32	s1, s15
 8001bb6:	f006 feeb 	bl	8008990 <cos>
 8001bba:	ec59 8b10 	vmov	r8, r9, d0
 8001bbe:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8001bc2:	f7fe fcb9 	bl	8000538 <__aeabi_f2d>
 8001bc6:	4602      	mov	r2, r0
 8001bc8:	460b      	mov	r3, r1
 8001bca:	4640      	mov	r0, r8
 8001bcc:	4649      	mov	r1, r9
 8001bce:	f7fe fd0b 	bl	80005e8 <__aeabi_dmul>
 8001bd2:	4602      	mov	r2, r0
 8001bd4:	460b      	mov	r3, r1
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	4619      	mov	r1, r3
 8001bda:	a3db      	add	r3, pc, #876	; (adr r3, 8001f48 <mainApp+0xff8>)
 8001bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be0:	f7fe fd02 	bl	80005e8 <__aeabi_dmul>
 8001be4:	4602      	mov	r2, r0
 8001be6:	460b      	mov	r3, r1
 8001be8:	4620      	mov	r0, r4
 8001bea:	4629      	mov	r1, r5
 8001bec:	f7fe fb44 	bl	8000278 <__aeabi_dsub>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	460c      	mov	r4, r1
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	f7fe ff90 	bl	8000b1c <__aeabi_d2iz>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	b21b      	sxth	r3, r3
 8001c00:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
      BSP_LCD_SetTextColor(CLOCK_COLOR_HP);
      BSP_LCD_DrawPolygon(&ap[0], 4);

      #else
      /* clear the previsous clock pointer */
      BSP_LCD_SetTextColor(CLOCK_COLOR_FACE);
 8001c04:	f641 00e3 	movw	r0, #6371	; 0x18e3
 8001c08:	f001 fc62 	bl	80034d0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillTriangle(lp[0].X, lp[0].Y, lp[1].X, lp[1].Y, lp[3].X, lp[3].Y);
 8001c0c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001c10:	b298      	uxth	r0, r3
 8001c12:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001c16:	b299      	uxth	r1, r3
 8001c18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c1c:	b29c      	uxth	r4, r3
 8001c1e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c22:	b29d      	uxth	r5, r3
 8001c24:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c2e:	b292      	uxth	r2, r2
 8001c30:	9201      	str	r2, [sp, #4]
 8001c32:	9300      	str	r3, [sp, #0]
 8001c34:	462b      	mov	r3, r5
 8001c36:	4622      	mov	r2, r4
 8001c38:	f002 f932 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(lp[2].X, lp[2].Y, lp[1].X, lp[1].Y, lp[3].X, lp[3].Y);
 8001c3c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c40:	b298      	uxth	r0, r3
 8001c42:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001c46:	b299      	uxth	r1, r3
 8001c48:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c4c:	b29c      	uxth	r4, r3
 8001c4e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c52:	b29d      	uxth	r5, r3
 8001c54:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8001c5e:	b292      	uxth	r2, r2
 8001c60:	9201      	str	r2, [sp, #4]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	462b      	mov	r3, r5
 8001c66:	4622      	mov	r2, r4
 8001c68:	f002 f91a 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(lp[4].X, lp[4].Y, lp[5].X, lp[5].Y, lp[7].X, lp[7].Y);
 8001c6c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001c70:	b298      	uxth	r0, r3
 8001c72:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001c76:	b299      	uxth	r1, r3
 8001c78:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001c7c:	b29c      	uxth	r4, r3
 8001c7e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001c82:	b29d      	uxth	r5, r3
 8001c84:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001c8e:	b292      	uxth	r2, r2
 8001c90:	9201      	str	r2, [sp, #4]
 8001c92:	9300      	str	r3, [sp, #0]
 8001c94:	462b      	mov	r3, r5
 8001c96:	4622      	mov	r2, r4
 8001c98:	f002 f902 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(lp[6].X, lp[6].Y, lp[5].X, lp[5].Y, lp[7].X, lp[7].Y);
 8001c9c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8001ca0:	b298      	uxth	r0, r3
 8001ca2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001ca6:	b299      	uxth	r1, r3
 8001ca8:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001cac:	b29c      	uxth	r4, r3
 8001cae:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001cb2:	b29d      	uxth	r5, r3
 8001cb4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8001cb8:	b29b      	uxth	r3, r3
 8001cba:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8001cbe:	b292      	uxth	r2, r2
 8001cc0:	9201      	str	r2, [sp, #4]
 8001cc2:	9300      	str	r3, [sp, #0]
 8001cc4:	462b      	mov	r3, r5
 8001cc6:	4622      	mov	r2, r4
 8001cc8:	f002 f8ea 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(lp[8].X, lp[8].Y, lp[9].X, lp[9].Y, lp[11].X, lp[11].Y);
 8001ccc:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8001cd0:	b298      	uxth	r0, r3
 8001cd2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001cd6:	b299      	uxth	r1, r3
 8001cd8:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001cdc:	b29c      	uxth	r4, r3
 8001cde:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001ce2:	b29d      	uxth	r5, r3
 8001ce4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001cee:	b292      	uxth	r2, r2
 8001cf0:	9201      	str	r2, [sp, #4]
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	462b      	mov	r3, r5
 8001cf6:	4622      	mov	r2, r4
 8001cf8:	f002 f8d2 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(lp[10].X, lp[10].Y, lp[9].X, lp[9].Y, lp[11].X, lp[11].Y);
 8001cfc:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8001d00:	b298      	uxth	r0, r3
 8001d02:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8001d06:	b299      	uxth	r1, r3
 8001d08:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	; 0x28
 8001d0c:	b29c      	uxth	r4, r3
 8001d0e:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001d12:	b29d      	uxth	r5, r3
 8001d14:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8001d1e:	b292      	uxth	r2, r2
 8001d20:	9201      	str	r2, [sp, #4]
 8001d22:	9300      	str	r3, [sp, #0]
 8001d24:	462b      	mov	r3, r5
 8001d26:	4622      	mov	r2, r4
 8001d28:	f002 f8ba 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_DrawPolygon(&lp[0], 4); /* because the thin filled triangle is may be incomplete */
 8001d2c:	1d3b      	adds	r3, r7, #4
 8001d2e:	2104      	movs	r1, #4
 8001d30:	4618      	mov	r0, r3
 8001d32:	f001 fe8f 	bl	8003a54 <BSP_LCD_DrawPolygon>
      BSP_LCD_DrawPolygon(&lp[4], 4);
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	3310      	adds	r3, #16
 8001d3a:	2104      	movs	r1, #4
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f001 fe89 	bl	8003a54 <BSP_LCD_DrawPolygon>
      BSP_LCD_DrawPolygon(&lp[8], 4);
 8001d42:	1d3b      	adds	r3, r7, #4
 8001d44:	3320      	adds	r3, #32
 8001d46:	2104      	movs	r1, #4
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f001 fe83 	bl	8003a54 <BSP_LCD_DrawPolygon>

      /* draw the digital clock */
      BSP_LCD_SetTextColor(CLOCK_COLOR_DIGITS);
 8001d4e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001d52:	f001 fbbd 	bl	80034d0 <BSP_LCD_SetTextColor>
      BSP_LCD_DisplayStringAt(0, ry - (r >> 1), (uint8_t *)&s, CENTER_MODE);
 8001d56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8001d5a:	b29a      	uxth	r2, r3
 8001d5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	b299      	uxth	r1, r3
 8001d68:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	2000      	movs	r0, #0
 8001d70:	f001 fc16 	bl	80035a0 <BSP_LCD_DisplayStringAt>

      /* draw the clock pointer */
      BSP_LCD_SetTextColor(CLOCK_COLOR_SP);
 8001d74:	f64f 70e0 	movw	r0, #65504	; 0xffe0
 8001d78:	f001 fbaa 	bl	80034d0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillTriangle(ap[8].X, ap[8].Y, ap[9].X, ap[9].Y, ap[11].X, ap[11].Y);
 8001d7c:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	; 0x54
 8001d80:	b298      	uxth	r0, r3
 8001d82:	f9b7 3056 	ldrsh.w	r3, [r7, #86]	; 0x56
 8001d86:	b299      	uxth	r1, r3
 8001d88:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001d8c:	b29c      	uxth	r4, r3
 8001d8e:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8001d92:	b29d      	uxth	r5, r3
 8001d94:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001d9e:	b292      	uxth	r2, r2
 8001da0:	9201      	str	r2, [sp, #4]
 8001da2:	9300      	str	r3, [sp, #0]
 8001da4:	462b      	mov	r3, r5
 8001da6:	4622      	mov	r2, r4
 8001da8:	f002 f87a 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(ap[10].X, ap[10].Y, ap[9].X, ap[9].Y, ap[11].X, ap[11].Y);
 8001dac:	f9b7 305c 	ldrsh.w	r3, [r7, #92]	; 0x5c
 8001db0:	b298      	uxth	r0, r3
 8001db2:	f9b7 305e 	ldrsh.w	r3, [r7, #94]	; 0x5e
 8001db6:	b299      	uxth	r1, r3
 8001db8:	f9b7 3058 	ldrsh.w	r3, [r7, #88]	; 0x58
 8001dbc:	b29c      	uxth	r4, r3
 8001dbe:	f9b7 305a 	ldrsh.w	r3, [r7, #90]	; 0x5a
 8001dc2:	b29d      	uxth	r5, r3
 8001dc4:	f9b7 3060 	ldrsh.w	r3, [r7, #96]	; 0x60
 8001dc8:	b29b      	uxth	r3, r3
 8001dca:	f9b7 2062 	ldrsh.w	r2, [r7, #98]	; 0x62
 8001dce:	b292      	uxth	r2, r2
 8001dd0:	9201      	str	r2, [sp, #4]
 8001dd2:	9300      	str	r3, [sp, #0]
 8001dd4:	462b      	mov	r3, r5
 8001dd6:	4622      	mov	r2, r4
 8001dd8:	f002 f862 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_DrawPolygon(&ap[8], 4); /* because the thin filled triangle is may be incomplete */
 8001ddc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001de0:	3320      	adds	r3, #32
 8001de2:	2104      	movs	r1, #4
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 fe35 	bl	8003a54 <BSP_LCD_DrawPolygon>
      BSP_LCD_SetTextColor(CLOCK_COLOR_MP);
 8001dea:	201f      	movs	r0, #31
 8001dec:	f001 fb70 	bl	80034d0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillTriangle(ap[4].X, ap[4].Y, ap[5].X, ap[5].Y, ap[7].X, ap[7].Y);
 8001df0:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8001df4:	b298      	uxth	r0, r3
 8001df6:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001dfa:	b299      	uxth	r1, r3
 8001dfc:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001e00:	b29c      	uxth	r4, r3
 8001e02:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001e06:	b29d      	uxth	r5, r3
 8001e08:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001e0c:	b29b      	uxth	r3, r3
 8001e0e:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8001e12:	b292      	uxth	r2, r2
 8001e14:	9201      	str	r2, [sp, #4]
 8001e16:	9300      	str	r3, [sp, #0]
 8001e18:	462b      	mov	r3, r5
 8001e1a:	4622      	mov	r2, r4
 8001e1c:	f002 f840 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(ap[6].X, ap[6].Y, ap[5].X, ap[5].Y, ap[7].X, ap[7].Y);
 8001e20:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	; 0x4c
 8001e24:	b298      	uxth	r0, r3
 8001e26:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8001e2a:	b299      	uxth	r1, r3
 8001e2c:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8001e30:	b29c      	uxth	r4, r3
 8001e32:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8001e36:	b29d      	uxth	r5, r3
 8001e38:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	; 0x50
 8001e3c:	b29b      	uxth	r3, r3
 8001e3e:	f9b7 2052 	ldrsh.w	r2, [r7, #82]	; 0x52
 8001e42:	b292      	uxth	r2, r2
 8001e44:	9201      	str	r2, [sp, #4]
 8001e46:	9300      	str	r3, [sp, #0]
 8001e48:	462b      	mov	r3, r5
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	f002 f828 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_DrawPolygon(&ap[4], 4);
 8001e50:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001e54:	3310      	adds	r3, #16
 8001e56:	2104      	movs	r1, #4
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fdfb 	bl	8003a54 <BSP_LCD_DrawPolygon>
      BSP_LCD_SetTextColor(CLOCK_COLOR_HP);
 8001e5e:	f44f 4078 	mov.w	r0, #63488	; 0xf800
 8001e62:	f001 fb35 	bl	80034d0 <BSP_LCD_SetTextColor>
      BSP_LCD_FillTriangle(ap[0].X, ap[0].Y, ap[1].X, ap[1].Y, ap[3].X, ap[3].Y);
 8001e66:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8001e6a:	b298      	uxth	r0, r3
 8001e6c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001e70:	b299      	uxth	r1, r3
 8001e72:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001e76:	b29c      	uxth	r4, r3
 8001e78:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001e7c:	b29d      	uxth	r5, r3
 8001e7e:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8001e88:	b292      	uxth	r2, r2
 8001e8a:	9201      	str	r2, [sp, #4]
 8001e8c:	9300      	str	r3, [sp, #0]
 8001e8e:	462b      	mov	r3, r5
 8001e90:	4622      	mov	r2, r4
 8001e92:	f002 f805 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_FillTriangle(ap[2].X, ap[2].Y, ap[1].X, ap[1].Y, ap[3].X, ap[3].Y);
 8001e96:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 8001e9a:	b298      	uxth	r0, r3
 8001e9c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	; 0x3e
 8001ea0:	b299      	uxth	r1, r3
 8001ea2:	f9b7 3038 	ldrsh.w	r3, [r7, #56]	; 0x38
 8001ea6:	b29c      	uxth	r4, r3
 8001ea8:	f9b7 303a 	ldrsh.w	r3, [r7, #58]	; 0x3a
 8001eac:	b29d      	uxth	r5, r3
 8001eae:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	; 0x40
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	f9b7 2042 	ldrsh.w	r2, [r7, #66]	; 0x42
 8001eb8:	b292      	uxth	r2, r2
 8001eba:	9201      	str	r2, [sp, #4]
 8001ebc:	9300      	str	r3, [sp, #0]
 8001ebe:	462b      	mov	r3, r5
 8001ec0:	4622      	mov	r2, r4
 8001ec2:	f001 ffed 	bl	8003ea0 <BSP_LCD_FillTriangle>
      BSP_LCD_DrawPolygon(&ap[0], 4);
 8001ec6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001eca:	2104      	movs	r1, #4
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f001 fdc1 	bl	8003a54 <BSP_LCD_DrawPolygon>

      #endif

      for(i = 0; i < 12; i++)
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001ed8:	e024      	b.n	8001f24 <mainApp+0xfd4>
      {
        lp[i].X = ap[i].X;
 8001eda:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ede:	009b      	lsls	r3, r3, #2
 8001ee0:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f933 2c6c 	ldrsh.w	r2, [r3, #-108]
 8001eea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001ef4:	440b      	add	r3, r1
 8001ef6:	f823 2c9c 	strh.w	r2, [r3, #-156]
        lp[i].Y = ap[i].Y;
 8001efa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001efe:	009b      	lsls	r3, r3, #2
 8001f00:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8001f04:	4413      	add	r3, r2
 8001f06:	f933 2c6a 	ldrsh.w	r2, [r3, #-106]
 8001f0a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f0e:	009b      	lsls	r3, r3, #2
 8001f10:	f107 01a0 	add.w	r1, r7, #160	; 0xa0
 8001f14:	440b      	add	r3, r1
 8001f16:	f823 2c9a 	strh.w	r2, [r3, #-154]
      for(i = 0; i < 12; i++)
 8001f1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f1e:	3301      	adds	r3, #1
 8001f20:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001f28:	2b0b      	cmp	r3, #11
 8001f2a:	d9d6      	bls.n	8001eda <mainApp+0xf8a>
      }

      printf("%s\n", s);
 8001f2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f30:	4618      	mov	r0, r3
 8001f32:	f005 ff01 	bl	8007d38 <puts>

      lasttime = nowtime;
 8001f36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f38:	673b      	str	r3, [r7, #112]	; 0x70
    nowtime.t = TIMEREG_READ;
 8001f3a:	f7ff b96e 	b.w	800121a <mainApp+0x2ca>
 8001f3e:	bf00      	nop
 8001f40:	47ae147b 	.word	0x47ae147b
 8001f44:	3fb47ae1 	.word	0x3fb47ae1
 8001f48:	9999999a 	.word	0x9999999a
 8001f4c:	3fc99999 	.word	0x3fc99999

08001f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f54:	f002 f920 	bl	8004198 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f58:	f000 f812 	bl	8001f80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f5c:	f000 f914 	bl	8002188 <MX_GPIO_Init>
  MX_FSMC_Init();
 8001f60:	f000 f9f4 	bl	800234c <MX_FSMC_Init>
  MX_RTC_Init();
 8001f64:	f000 f88e 	bl	8002084 <MX_RTC_Init>
  MX_SDIO_SD_Init();
 8001f68:	f000 f8e6 	bl	8002138 <MX_SDIO_SD_Init>
  MX_USB_OTG_FS_USB_Init();
 8001f6c:	f000 f904 	bl	8002178 <MX_USB_OTG_FS_USB_Init>
  MX_FATFS_Init();
 8001f70:	f005 fbac 	bl	80076cc <MX_FATFS_Init>
  MX_LIBJPEG_Init();
 8001f74:	f005 fd2e 	bl	80079d4 <MX_LIBJPEG_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mainApp();
 8001f78:	f7fe ffea 	bl	8000f50 <mainApp>
  while (1)
 8001f7c:	e7fe      	b.n	8001f7c <main+0x2c>
	...

08001f80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b098      	sub	sp, #96	; 0x60
 8001f84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f86:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001f8a:	2230      	movs	r2, #48	; 0x30
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f005 fdae 	bl	8007af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f94:	f107 031c 	add.w	r3, r7, #28
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	609a      	str	r2, [r3, #8]
 8001fa0:	60da      	str	r2, [r3, #12]
 8001fa2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fa4:	f107 030c 	add.w	r3, r7, #12
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	4b31      	ldr	r3, [pc, #196]	; (800207c <SystemClock_Config+0xfc>)
 8001fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fba:	4a30      	ldr	r2, [pc, #192]	; (800207c <SystemClock_Config+0xfc>)
 8001fbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fc0:	6413      	str	r3, [r2, #64]	; 0x40
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <SystemClock_Config+0xfc>)
 8001fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fca:	60bb      	str	r3, [r7, #8]
 8001fcc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	607b      	str	r3, [r7, #4]
 8001fd2:	4b2b      	ldr	r3, [pc, #172]	; (8002080 <SystemClock_Config+0x100>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	4a2a      	ldr	r2, [pc, #168]	; (8002080 <SystemClock_Config+0x100>)
 8001fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fdc:	6013      	str	r3, [r2, #0]
 8001fde:	4b28      	ldr	r3, [pc, #160]	; (8002080 <SystemClock_Config+0x100>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe6:	607b      	str	r3, [r7, #4]
 8001fe8:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8001fea:	2305      	movs	r3, #5
 8001fec:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001fee:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001ff2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001ffc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002000:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002002:	2308      	movs	r3, #8
 8002004:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 336;
 8002006:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800200a:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800200c:	2302      	movs	r3, #2
 800200e:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002010:	2307      	movs	r3, #7
 8002012:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002014:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002018:	4618      	mov	r0, r3
 800201a:	f002 fbeb 	bl	80047f4 <HAL_RCC_OscConfig>
 800201e:	4603      	mov	r3, r0
 8002020:	2b00      	cmp	r3, #0
 8002022:	d001      	beq.n	8002028 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8002024:	f000 f9f2 	bl	800240c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002028:	230f      	movs	r3, #15
 800202a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800202c:	2302      	movs	r3, #2
 800202e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002030:	2300      	movs	r3, #0
 8002032:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002034:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002038:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800203a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800203e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002040:	f107 031c 	add.w	r3, r7, #28
 8002044:	2105      	movs	r1, #5
 8002046:	4618      	mov	r0, r3
 8002048:	f002 fe44 	bl	8004cd4 <HAL_RCC_ClockConfig>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <SystemClock_Config+0xd6>
  {
    Error_Handler();
 8002052:	f000 f9db 	bl	800240c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8002056:	2302      	movs	r3, #2
 8002058:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800205a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800205e:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002060:	f107 030c 	add.w	r3, r7, #12
 8002064:	4618      	mov	r0, r3
 8002066:	f002 fff3 	bl	8005050 <HAL_RCCEx_PeriphCLKConfig>
 800206a:	4603      	mov	r3, r0
 800206c:	2b00      	cmp	r3, #0
 800206e:	d001      	beq.n	8002074 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8002070:	f000 f9cc 	bl	800240c <Error_Handler>
  }
}
 8002074:	bf00      	nop
 8002076:	3760      	adds	r7, #96	; 0x60
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40023800 	.word	0x40023800
 8002080:	40007000 	.word	0x40007000

08002084 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b086      	sub	sp, #24
 8002088:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800208a:	1d3b      	adds	r3, r7, #4
 800208c:	2200      	movs	r2, #0
 800208e:	601a      	str	r2, [r3, #0]
 8002090:	605a      	str	r2, [r3, #4]
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	60da      	str	r2, [r3, #12]
 8002096:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8002098:	2300      	movs	r3, #0
 800209a:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800209c:	4b24      	ldr	r3, [pc, #144]	; (8002130 <MX_RTC_Init+0xac>)
 800209e:	4a25      	ldr	r2, [pc, #148]	; (8002134 <MX_RTC_Init+0xb0>)
 80020a0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80020a2:	4b23      	ldr	r3, [pc, #140]	; (8002130 <MX_RTC_Init+0xac>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80020a8:	4b21      	ldr	r3, [pc, #132]	; (8002130 <MX_RTC_Init+0xac>)
 80020aa:	227f      	movs	r2, #127	; 0x7f
 80020ac:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <MX_RTC_Init+0xac>)
 80020b0:	22ff      	movs	r2, #255	; 0xff
 80020b2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80020b4:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <MX_RTC_Init+0xac>)
 80020b6:	2200      	movs	r2, #0
 80020b8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80020ba:	4b1d      	ldr	r3, [pc, #116]	; (8002130 <MX_RTC_Init+0xac>)
 80020bc:	2200      	movs	r2, #0
 80020be:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80020c0:	4b1b      	ldr	r3, [pc, #108]	; (8002130 <MX_RTC_Init+0xac>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80020c6:	481a      	ldr	r0, [pc, #104]	; (8002130 <MX_RTC_Init+0xac>)
 80020c8:	f003 f8a4 	bl	8005214 <HAL_RTC_Init>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80020d2:	f000 f99b 	bl	800240c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80020d6:	2300      	movs	r3, #0
 80020d8:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80020da:	2300      	movs	r3, #0
 80020dc:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80020de:	2300      	movs	r3, #0
 80020e0:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80020e2:	2300      	movs	r3, #0
 80020e4:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80020e6:	2300      	movs	r3, #0
 80020e8:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80020ea:	1d3b      	adds	r3, r7, #4
 80020ec:	2201      	movs	r2, #1
 80020ee:	4619      	mov	r1, r3
 80020f0:	480f      	ldr	r0, [pc, #60]	; (8002130 <MX_RTC_Init+0xac>)
 80020f2:	f003 f920 	bl	8005336 <HAL_RTC_SetTime>
 80020f6:	4603      	mov	r3, r0
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d001      	beq.n	8002100 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80020fc:	f000 f986 	bl	800240c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8002100:	2301      	movs	r3, #1
 8002102:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8002104:	2301      	movs	r3, #1
 8002106:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8002108:	2301      	movs	r3, #1
 800210a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 800210c:	2300      	movs	r3, #0
 800210e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8002110:	463b      	mov	r3, r7
 8002112:	2201      	movs	r2, #1
 8002114:	4619      	mov	r1, r3
 8002116:	4806      	ldr	r0, [pc, #24]	; (8002130 <MX_RTC_Init+0xac>)
 8002118:	f003 f9ca 	bl	80054b0 <HAL_RTC_SetDate>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d001      	beq.n	8002126 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8002122:	f000 f973 	bl	800240c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002126:	bf00      	nop
 8002128:	3718      	adds	r7, #24
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	200004c0 	.word	0x200004c0
 8002134:	40002800 	.word	0x40002800

08002138 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 800213c:	4b0c      	ldr	r3, [pc, #48]	; (8002170 <MX_SDIO_SD_Init+0x38>)
 800213e:	4a0d      	ldr	r2, [pc, #52]	; (8002174 <MX_SDIO_SD_Init+0x3c>)
 8002140:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 8002142:	4b0b      	ldr	r3, [pc, #44]	; (8002170 <MX_SDIO_SD_Init+0x38>)
 8002144:	2200      	movs	r2, #0
 8002146:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8002148:	4b09      	ldr	r3, [pc, #36]	; (8002170 <MX_SDIO_SD_Init+0x38>)
 800214a:	2200      	movs	r2, #0
 800214c:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800214e:	4b08      	ldr	r3, [pc, #32]	; (8002170 <MX_SDIO_SD_Init+0x38>)
 8002150:	2200      	movs	r2, #0
 8002152:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8002154:	4b06      	ldr	r3, [pc, #24]	; (8002170 <MX_SDIO_SD_Init+0x38>)
 8002156:	2200      	movs	r2, #0
 8002158:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800215a:	4b05      	ldr	r3, [pc, #20]	; (8002170 <MX_SDIO_SD_Init+0x38>)
 800215c:	2200      	movs	r2, #0
 800215e:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 8002160:	4b03      	ldr	r3, [pc, #12]	; (8002170 <MX_SDIO_SD_Init+0x38>)
 8002162:	2200      	movs	r2, #0
 8002164:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8002166:	bf00      	nop
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr
 8002170:	200004e0 	.word	0x200004e0
 8002174:	40012c00 	.word	0x40012c00

08002178 <MX_USB_OTG_FS_USB_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_USB_Init(void)
{
 8002178:	b480      	push	{r7}
 800217a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800217c:	bf00      	nop
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
	...

08002188 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b08c      	sub	sp, #48	; 0x30
 800218c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800218e:	f107 031c 	add.w	r3, r7, #28
 8002192:	2200      	movs	r2, #0
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	605a      	str	r2, [r3, #4]
 8002198:	609a      	str	r2, [r3, #8]
 800219a:	60da      	str	r2, [r3, #12]
 800219c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
 80021a2:	4b63      	ldr	r3, [pc, #396]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a6:	4a62      	ldr	r2, [pc, #392]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021a8:	f043 0310 	orr.w	r3, r3, #16
 80021ac:	6313      	str	r3, [r2, #48]	; 0x30
 80021ae:	4b60      	ldr	r3, [pc, #384]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	61bb      	str	r3, [r7, #24]
 80021b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	617b      	str	r3, [r7, #20]
 80021be:	4b5c      	ldr	r3, [pc, #368]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c2:	4a5b      	ldr	r2, [pc, #364]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021c4:	f043 0304 	orr.w	r3, r3, #4
 80021c8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ca:	4b59      	ldr	r3, [pc, #356]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ce:	f003 0304 	and.w	r3, r3, #4
 80021d2:	617b      	str	r3, [r7, #20]
 80021d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	613b      	str	r3, [r7, #16]
 80021da:	4b55      	ldr	r3, [pc, #340]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	4a54      	ldr	r2, [pc, #336]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021e4:	6313      	str	r3, [r2, #48]	; 0x30
 80021e6:	4b52      	ldr	r3, [pc, #328]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021ee:	613b      	str	r3, [r7, #16]
 80021f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021f2:	2300      	movs	r3, #0
 80021f4:	60fb      	str	r3, [r7, #12]
 80021f6:	4b4e      	ldr	r3, [pc, #312]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021fa:	4a4d      	ldr	r2, [pc, #308]	; (8002330 <MX_GPIO_Init+0x1a8>)
 80021fc:	f043 0301 	orr.w	r3, r3, #1
 8002200:	6313      	str	r3, [r2, #48]	; 0x30
 8002202:	4b4b      	ldr	r3, [pc, #300]	; (8002330 <MX_GPIO_Init+0x1a8>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	60fb      	str	r3, [r7, #12]
 800220c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	60bb      	str	r3, [r7, #8]
 8002212:	4b47      	ldr	r3, [pc, #284]	; (8002330 <MX_GPIO_Init+0x1a8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a46      	ldr	r2, [pc, #280]	; (8002330 <MX_GPIO_Init+0x1a8>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b44      	ldr	r3, [pc, #272]	; (8002330 <MX_GPIO_Init+0x1a8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800222a:	2300      	movs	r3, #0
 800222c:	607b      	str	r3, [r7, #4]
 800222e:	4b40      	ldr	r3, [pc, #256]	; (8002330 <MX_GPIO_Init+0x1a8>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	4a3f      	ldr	r2, [pc, #252]	; (8002330 <MX_GPIO_Init+0x1a8>)
 8002234:	f043 0308 	orr.w	r3, r3, #8
 8002238:	6313      	str	r3, [r2, #48]	; 0x30
 800223a:	4b3d      	ldr	r3, [pc, #244]	; (8002330 <MX_GPIO_Init+0x1a8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	f003 0308 	and.w	r3, r3, #8
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002246:	2200      	movs	r2, #0
 8002248:	2108      	movs	r1, #8
 800224a:	483a      	ldr	r0, [pc, #232]	; (8002334 <MX_GPIO_Init+0x1ac>)
 800224c:	f002 fab8 	bl	80047c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002250:	2201      	movs	r2, #1
 8002252:	2101      	movs	r1, #1
 8002254:	4838      	ldr	r0, [pc, #224]	; (8002338 <MX_GPIO_Init+0x1b0>)
 8002256:	f002 fab3 	bl	80047c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 800225a:	2200      	movs	r2, #0
 800225c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002260:	4836      	ldr	r0, [pc, #216]	; (800233c <MX_GPIO_Init+0x1b4>)
 8002262:	f002 faad 	bl	80047c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002266:	2308      	movs	r3, #8
 8002268:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800226a:	2301      	movs	r3, #1
 800226c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002272:	2300      	movs	r3, #0
 8002274:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002276:	f107 031c 	add.w	r3, r7, #28
 800227a:	4619      	mov	r1, r3
 800227c:	482d      	ldr	r0, [pc, #180]	; (8002334 <MX_GPIO_Init+0x1ac>)
 800227e:	f002 f905 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002282:	2301      	movs	r3, #1
 8002284:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002286:	2301      	movs	r3, #1
 8002288:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800228e:	2300      	movs	r3, #0
 8002290:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002292:	f107 031c 	add.w	r3, r7, #28
 8002296:	4619      	mov	r1, r3
 8002298:	4827      	ldr	r0, [pc, #156]	; (8002338 <MX_GPIO_Init+0x1b0>)
 800229a:	f002 f8f7 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800229e:	2301      	movs	r3, #1
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <MX_GPIO_Init+0x1b8>)
 80022a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80022aa:	f107 031c 	add.w	r3, r7, #28
 80022ae:	4619      	mov	r1, r3
 80022b0:	4824      	ldr	r0, [pc, #144]	; (8002344 <MX_GPIO_Init+0x1bc>)
 80022b2:	f002 f8eb 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80022b6:	2304      	movs	r3, #4
 80022b8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022ba:	2300      	movs	r3, #0
 80022bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022be:	2300      	movs	r3, #0
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80022c2:	f107 031c 	add.w	r3, r7, #28
 80022c6:	4619      	mov	r1, r3
 80022c8:	481f      	ldr	r0, [pc, #124]	; (8002348 <MX_GPIO_Init+0x1c0>)
 80022ca:	f002 f8df 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD4_Pin */
  GPIO_InitStruct.Pin = LD4_Pin;
 80022ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80022d4:	2301      	movs	r3, #1
 80022d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d8:	2300      	movs	r3, #0
 80022da:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022dc:	2300      	movs	r3, #0
 80022de:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LD4_GPIO_Port, &GPIO_InitStruct);
 80022e0:	f107 031c 	add.w	r3, r7, #28
 80022e4:	4619      	mov	r1, r3
 80022e6:	4815      	ldr	r0, [pc, #84]	; (800233c <MX_GPIO_Init+0x1b4>)
 80022e8:	f002 f8d0 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_FS_Pin */
  GPIO_InitStruct.Pin = VBUS_FS_Pin;
 80022ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022f2:	2300      	movs	r3, #0
 80022f4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	4810      	ldr	r0, [pc, #64]	; (8002344 <MX_GPIO_Init+0x1bc>)
 8002302:	f002 f8c3 	bl	800448c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA10 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8002306:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800230a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800230c:	2302      	movs	r3, #2
 800230e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002314:	2303      	movs	r3, #3
 8002316:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002318:	230a      	movs	r3, #10
 800231a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800231c:	f107 031c 	add.w	r3, r7, #28
 8002320:	4619      	mov	r1, r3
 8002322:	4808      	ldr	r0, [pc, #32]	; (8002344 <MX_GPIO_Init+0x1bc>)
 8002324:	f002 f8b2 	bl	800448c <HAL_GPIO_Init>

}
 8002328:	bf00      	nop
 800232a:	3730      	adds	r7, #48	; 0x30
 800232c:	46bd      	mov	sp, r7
 800232e:	bd80      	pop	{r7, pc}
 8002330:	40023800 	.word	0x40023800
 8002334:	40021000 	.word	0x40021000
 8002338:	40020800 	.word	0x40020800
 800233c:	40020c00 	.word	0x40020c00
 8002340:	10120000 	.word	0x10120000
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400

0800234c <MX_FSMC_Init>:

/* FSMC initialization function */
static void MX_FSMC_Init(void)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 8002352:	1d3b      	adds	r3, r7, #4
 8002354:	2200      	movs	r2, #0
 8002356:	601a      	str	r2, [r3, #0]
 8002358:	605a      	str	r2, [r3, #4]
 800235a:	609a      	str	r2, [r3, #8]
 800235c:	60da      	str	r2, [r3, #12]
 800235e:	611a      	str	r2, [r3, #16]
 8002360:	615a      	str	r2, [r3, #20]
 8002362:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8002364:	4b27      	ldr	r3, [pc, #156]	; (8002404 <MX_FSMC_Init+0xb8>)
 8002366:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 800236a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800236c:	4b25      	ldr	r3, [pc, #148]	; (8002404 <MX_FSMC_Init+0xb8>)
 800236e:	4a26      	ldr	r2, [pc, #152]	; (8002408 <MX_FSMC_Init+0xbc>)
 8002370:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 8002372:	4b24      	ldr	r3, [pc, #144]	; (8002404 <MX_FSMC_Init+0xb8>)
 8002374:	2200      	movs	r2, #0
 8002376:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 8002378:	4b22      	ldr	r3, [pc, #136]	; (8002404 <MX_FSMC_Init+0xb8>)
 800237a:	2200      	movs	r2, #0
 800237c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 800237e:	4b21      	ldr	r3, [pc, #132]	; (8002404 <MX_FSMC_Init+0xb8>)
 8002380:	2200      	movs	r2, #0
 8002382:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 8002384:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <MX_FSMC_Init+0xb8>)
 8002386:	2210      	movs	r2, #16
 8002388:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 800238a:	4b1e      	ldr	r3, [pc, #120]	; (8002404 <MX_FSMC_Init+0xb8>)
 800238c:	2200      	movs	r2, #0
 800238e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 8002390:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <MX_FSMC_Init+0xb8>)
 8002392:	2200      	movs	r2, #0
 8002394:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 8002396:	4b1b      	ldr	r3, [pc, #108]	; (8002404 <MX_FSMC_Init+0xb8>)
 8002398:	2200      	movs	r2, #0
 800239a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <MX_FSMC_Init+0xb8>)
 800239e:	2200      	movs	r2, #0
 80023a0:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80023a2:	4b18      	ldr	r3, [pc, #96]	; (8002404 <MX_FSMC_Init+0xb8>)
 80023a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023a8:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <MX_FSMC_Init+0xb8>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_DISABLE;
 80023b0:	4b14      	ldr	r3, [pc, #80]	; (8002404 <MX_FSMC_Init+0xb8>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80023b6:	4b13      	ldr	r3, [pc, #76]	; (8002404 <MX_FSMC_Init+0xb8>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80023bc:	4b11      	ldr	r3, [pc, #68]	; (8002404 <MX_FSMC_Init+0xb8>)
 80023be:	2200      	movs	r2, #0
 80023c0:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80023c2:	4b10      	ldr	r3, [pc, #64]	; (8002404 <MX_FSMC_Init+0xb8>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	; 0x44
  /* Timing */
  Timing.AddressSetupTime = 15;
 80023c8:	230f      	movs	r3, #15
 80023ca:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 80023cc:	230f      	movs	r3, #15
 80023ce:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 255;
 80023d0:	23ff      	movs	r3, #255	; 0xff
 80023d2:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 80023d4:	230f      	movs	r3, #15
 80023d6:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 80023d8:	2310      	movs	r3, #16
 80023da:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 80023dc:	2311      	movs	r3, #17
 80023de:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 80023e4:	1d3b      	adds	r3, r7, #4
 80023e6:	2200      	movs	r2, #0
 80023e8:	4619      	mov	r1, r3
 80023ea:	4806      	ldr	r0, [pc, #24]	; (8002404 <MX_FSMC_Init+0xb8>)
 80023ec:	f004 faf6 	bl	80069dc <HAL_SRAM_Init>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <MX_FSMC_Init+0xae>
  {
    Error_Handler( );
 80023f6:	f000 f809 	bl	800240c <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 80023fa:	bf00      	nop
 80023fc:	3720      	adds	r7, #32
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	20000470 	.word	0x20000470
 8002408:	a0000104 	.word	0xa0000104

0800240c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002410:	bf00      	nop
 8002412:	46bd      	mov	sp, r7
 8002414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002418:	4770      	bx	lr
	...

0800241c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002422:	2300      	movs	r3, #0
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	4b10      	ldr	r3, [pc, #64]	; (8002468 <HAL_MspInit+0x4c>)
 8002428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800242a:	4a0f      	ldr	r2, [pc, #60]	; (8002468 <HAL_MspInit+0x4c>)
 800242c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002430:	6453      	str	r3, [r2, #68]	; 0x44
 8002432:	4b0d      	ldr	r3, [pc, #52]	; (8002468 <HAL_MspInit+0x4c>)
 8002434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002436:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800243a:	607b      	str	r3, [r7, #4]
 800243c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800243e:	2300      	movs	r3, #0
 8002440:	603b      	str	r3, [r7, #0]
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <HAL_MspInit+0x4c>)
 8002444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002446:	4a08      	ldr	r2, [pc, #32]	; (8002468 <HAL_MspInit+0x4c>)
 8002448:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800244c:	6413      	str	r3, [r2, #64]	; 0x40
 800244e:	4b06      	ldr	r3, [pc, #24]	; (8002468 <HAL_MspInit+0x4c>)
 8002450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002452:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002456:	603b      	str	r3, [r7, #0]
 8002458:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800245a:	2007      	movs	r0, #7
 800245c:	f001 ffe2 	bl	8004424 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002460:	bf00      	nop
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}
 8002468:	40023800 	.word	0x40023800

0800246c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800246c:	b480      	push	{r7}
 800246e:	b083      	sub	sp, #12
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a05      	ldr	r2, [pc, #20]	; (8002490 <HAL_RTC_MspInit+0x24>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d102      	bne.n	8002484 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800247e:	4b05      	ldr	r3, [pc, #20]	; (8002494 <HAL_RTC_MspInit+0x28>)
 8002480:	2201      	movs	r2, #1
 8002482:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	40002800 	.word	0x40002800
 8002494:	42470e3c 	.word	0x42470e3c

08002498 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b08a      	sub	sp, #40	; 0x28
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024a0:	f107 0314 	add.w	r3, r7, #20
 80024a4:	2200      	movs	r2, #0
 80024a6:	601a      	str	r2, [r3, #0]
 80024a8:	605a      	str	r2, [r3, #4]
 80024aa:	609a      	str	r2, [r3, #8]
 80024ac:	60da      	str	r2, [r3, #12]
 80024ae:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a28      	ldr	r2, [pc, #160]	; (8002558 <HAL_SD_MspInit+0xc0>)
 80024b6:	4293      	cmp	r3, r2
 80024b8:	d14a      	bne.n	8002550 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	613b      	str	r3, [r7, #16]
 80024be:	4b27      	ldr	r3, [pc, #156]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024c2:	4a26      	ldr	r2, [pc, #152]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80024c8:	6453      	str	r3, [r2, #68]	; 0x44
 80024ca:	4b24      	ldr	r3, [pc, #144]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024d2:	613b      	str	r3, [r7, #16]
 80024d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024d6:	2300      	movs	r3, #0
 80024d8:	60fb      	str	r3, [r7, #12]
 80024da:	4b20      	ldr	r3, [pc, #128]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024de:	4a1f      	ldr	r2, [pc, #124]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024e0:	f043 0304 	orr.w	r3, r3, #4
 80024e4:	6313      	str	r3, [r2, #48]	; 0x30
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	60bb      	str	r3, [r7, #8]
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a18      	ldr	r2, [pc, #96]	; (800255c <HAL_SD_MspInit+0xc4>)
 80024fc:	f043 0308 	orr.w	r3, r3, #8
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <HAL_SD_MspInit+0xc4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0308 	and.w	r3, r3, #8
 800250a:	60bb      	str	r3, [r7, #8]
 800250c:	68bb      	ldr	r3, [r7, #8]
    PC10     ------> SDIO_D2
    PC11     ------> SDIO_D3
    PC12     ------> SDIO_CK
    PD2     ------> SDIO_CMD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800250e:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8002512:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_12;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002514:	2302      	movs	r3, #2
 8002516:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002518:	2300      	movs	r3, #0
 800251a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800251c:	2303      	movs	r3, #3
 800251e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002520:	230c      	movs	r3, #12
 8002522:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002524:	f107 0314 	add.w	r3, r7, #20
 8002528:	4619      	mov	r1, r3
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <HAL_SD_MspInit+0xc8>)
 800252c:	f001 ffae 	bl	800448c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002530:	2304      	movs	r3, #4
 8002532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002534:	2302      	movs	r3, #2
 8002536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002538:	2300      	movs	r3, #0
 800253a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800253c:	2303      	movs	r3, #3
 800253e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 8002540:	230c      	movs	r3, #12
 8002542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002544:	f107 0314 	add.w	r3, r7, #20
 8002548:	4619      	mov	r1, r3
 800254a:	4806      	ldr	r0, [pc, #24]	; (8002564 <HAL_SD_MspInit+0xcc>)
 800254c:	f001 ff9e 	bl	800448c <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 8002550:	bf00      	nop
 8002552:	3728      	adds	r7, #40	; 0x28
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40012c00 	.word	0x40012c00
 800255c:	40023800 	.word	0x40023800
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00

08002568 <HAL_FSMC_MspInit>:

}

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 8002568:	b580      	push	{r7, lr}
 800256a:	b086      	sub	sp, #24
 800256c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800256e:	1d3b      	adds	r3, r7, #4
 8002570:	2200      	movs	r2, #0
 8002572:	601a      	str	r2, [r3, #0]
 8002574:	605a      	str	r2, [r3, #4]
 8002576:	609a      	str	r2, [r3, #8]
 8002578:	60da      	str	r2, [r3, #12]
 800257a:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 800257c:	4b1c      	ldr	r3, [pc, #112]	; (80025f0 <HAL_FSMC_MspInit+0x88>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d131      	bne.n	80025e8 <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8002584:	4b1a      	ldr	r3, [pc, #104]	; (80025f0 <HAL_FSMC_MspInit+0x88>)
 8002586:	2201      	movs	r2, #1
 8002588:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	603b      	str	r3, [r7, #0]
 800258e:	4b19      	ldr	r3, [pc, #100]	; (80025f4 <HAL_FSMC_MspInit+0x8c>)
 8002590:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002592:	4a18      	ldr	r2, [pc, #96]	; (80025f4 <HAL_FSMC_MspInit+0x8c>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6393      	str	r3, [r2, #56]	; 0x38
 800259a:	4b16      	ldr	r3, [pc, #88]	; (80025f4 <HAL_FSMC_MspInit+0x8c>)
 800259c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	603b      	str	r3, [r7, #0]
 80025a4:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FSMC_D3
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80025a6:	f64f 7380 	movw	r3, #65408	; 0xff80
 80025aa:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ac:	2302      	movs	r3, #2
 80025ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025b4:	2303      	movs	r3, #3
 80025b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80025b8:	230c      	movs	r3, #12
 80025ba:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80025bc:	1d3b      	adds	r3, r7, #4
 80025be:	4619      	mov	r1, r3
 80025c0:	480d      	ldr	r0, [pc, #52]	; (80025f8 <HAL_FSMC_MspInit+0x90>)
 80025c2:	f001 ff63 	bl	800448c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_13
 80025c6:	f24e 73b3 	movw	r3, #59315	; 0xe7b3
 80025ca:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025cc:	2302      	movs	r3, #2
 80025ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d0:	2300      	movs	r3, #0
 80025d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d4:	2303      	movs	r3, #3
 80025d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80025d8:	230c      	movs	r3, #12
 80025da:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025dc:	1d3b      	adds	r3, r7, #4
 80025de:	4619      	mov	r1, r3
 80025e0:	4806      	ldr	r0, [pc, #24]	; (80025fc <HAL_FSMC_MspInit+0x94>)
 80025e2:	f001 ff53 	bl	800448c <HAL_GPIO_Init>
 80025e6:	e000      	b.n	80025ea <HAL_FSMC_MspInit+0x82>
    return;
 80025e8:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80025ea:	3718      	adds	r7, #24
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	200000dc 	.word	0x200000dc
 80025f4:	40023800 	.word	0x40023800
 80025f8:	40021000 	.word	0x40021000
 80025fc:	40020c00 	.word	0x40020c00

08002600 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8002600:	b580      	push	{r7, lr}
 8002602:	b082      	sub	sp, #8
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 8002608:	f7ff ffae 	bl	8002568 <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800260c:	bf00      	nop
 800260e:	3708      	adds	r7, #8
 8002610:	46bd      	mov	sp, r7
 8002612:	bd80      	pop	{r7, pc}

08002614 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr

08002622 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002622:	b480      	push	{r7}
 8002624:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002626:	e7fe      	b.n	8002626 <HardFault_Handler+0x4>

08002628 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800262c:	e7fe      	b.n	800262c <MemManage_Handler+0x4>

0800262e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800262e:	b480      	push	{r7}
 8002630:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002632:	e7fe      	b.n	8002632 <BusFault_Handler+0x4>

08002634 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <UsageFault_Handler+0x4>

0800263a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263e:	bf00      	nop
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002648:	b480      	push	{r7}
 800264a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr

08002656 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002656:	b480      	push	{r7}
 8002658:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800265a:	bf00      	nop
 800265c:	46bd      	mov	sp, r7
 800265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002662:	4770      	bx	lr

08002664 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002668:	f001 fde8 	bl	800423c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800266c:	bf00      	nop
 800266e:	bd80      	pop	{r7, pc}

08002670 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002678:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800267c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d013      	beq.n	80026b0 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002688:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800268c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8002690:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00b      	beq.n	80026b0 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002698:	e000      	b.n	800269c <ITM_SendChar+0x2c>
    {
      __NOP();
 800269a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800269c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f9      	beq.n	800269a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80026a6:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	b2d2      	uxtb	r2, r2
 80026ae:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80026b0:	687b      	ldr	r3, [r7, #4]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	60f8      	str	r0, [r7, #12]
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026ca:	2300      	movs	r3, #0
 80026cc:	617b      	str	r3, [r7, #20]
 80026ce:	e00a      	b.n	80026e6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80026d0:	f3af 8000 	nop.w
 80026d4:	4601      	mov	r1, r0
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	1c5a      	adds	r2, r3, #1
 80026da:	60ba      	str	r2, [r7, #8]
 80026dc:	b2ca      	uxtb	r2, r1
 80026de:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e0:	697b      	ldr	r3, [r7, #20]
 80026e2:	3301      	adds	r3, #1
 80026e4:	617b      	str	r3, [r7, #20]
 80026e6:	697a      	ldr	r2, [r7, #20]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	dbf0      	blt.n	80026d0 <_read+0x12>
	}

return len;
 80026ee:	687b      	ldr	r3, [r7, #4]
}
 80026f0:	4618      	mov	r0, r3
 80026f2:	3718      	adds	r7, #24
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}

080026f8 <_write>:


int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	60f8      	str	r0, [r7, #12]
 8002700:	60b9      	str	r1, [r7, #8]
 8002702:	607a      	str	r2, [r7, #4]
	/* Implement your write code here, this is used by puts and printf for example */
	/* return len; */
	int i;
	for(i = 0; i < len; i++)
 8002704:	2300      	movs	r3, #0
 8002706:	617b      	str	r3, [r7, #20]
 8002708:	e009      	b.n	800271e <_write+0x26>
		ITM_SendChar(*ptr++);
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	1c5a      	adds	r2, r3, #1
 800270e:	60ba      	str	r2, [r7, #8]
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	4618      	mov	r0, r3
 8002714:	f7ff ffac 	bl	8002670 <ITM_SendChar>
	for(i = 0; i < len; i++)
 8002718:	697b      	ldr	r3, [r7, #20]
 800271a:	3301      	adds	r3, #1
 800271c:	617b      	str	r3, [r7, #20]
 800271e:	697a      	ldr	r2, [r7, #20]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	429a      	cmp	r2, r3
 8002724:	dbf1      	blt.n	800270a <_write+0x12>
	return len;
 8002726:	687b      	ldr	r3, [r7, #4]
}
 8002728:	4618      	mov	r0, r3
 800272a:	3718      	adds	r7, #24
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <_close>:
	}
	return len;
}*/

int _close(int file)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
	return -1;
 8002738:	f04f 33ff 	mov.w	r3, #4294967295
}
 800273c:	4618      	mov	r0, r3
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002752:	683b      	ldr	r3, [r7, #0]
 8002754:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002758:	605a      	str	r2, [r3, #4]
	return 0;
 800275a:	2300      	movs	r3, #0
}
 800275c:	4618      	mov	r0, r3
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <_isatty>:

int _isatty(int file)
{
 8002768:	b480      	push	{r7}
 800276a:	b083      	sub	sp, #12
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
	return 1;
 8002770:	2301      	movs	r3, #1
}
 8002772:	4618      	mov	r0, r3
 8002774:	370c      	adds	r7, #12
 8002776:	46bd      	mov	sp, r7
 8002778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277c:	4770      	bx	lr

0800277e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
	return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr

08002798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4a14      	ldr	r2, [pc, #80]	; (80027f4 <_sbrk+0x5c>)
 80027a2:	4b15      	ldr	r3, [pc, #84]	; (80027f8 <_sbrk+0x60>)
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <_sbrk+0x64>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	; (8002800 <_sbrk+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4b10      	ldr	r3, [pc, #64]	; (80027fc <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d207      	bcs.n	80027d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c8:	f005 f968 	bl	8007a9c <__errno>
 80027cc:	4602      	mov	r2, r0
 80027ce:	230c      	movs	r3, #12
 80027d0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295
 80027d6:	e009      	b.n	80027ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d8:	4b08      	ldr	r3, [pc, #32]	; (80027fc <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027de:	4b07      	ldr	r3, [pc, #28]	; (80027fc <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	4a05      	ldr	r2, [pc, #20]	; (80027fc <_sbrk+0x64>)
 80027e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20020000 	.word	0x20020000
 80027f8:	00000800 	.word	0x00000800
 80027fc:	200000e0 	.word	0x200000e0
 8002800:	200025e8 	.word	0x200025e8

08002804 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <SystemInit+0x28>)
 800280a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800280e:	4a07      	ldr	r2, [pc, #28]	; (800282c <SystemInit+0x28>)
 8002810:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002814:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <SystemInit+0x28>)
 800281a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800281e:	609a      	str	r2, [r3, #8]
#endif
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr
 800282a:	bf00      	nop
 800282c:	e000ed00 	.word	0xe000ed00

08002830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002868 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002834:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002836:	e003      	b.n	8002840 <LoopCopyDataInit>

08002838 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002838:	4b0c      	ldr	r3, [pc, #48]	; (800286c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800283a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800283c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800283e:	3104      	adds	r1, #4

08002840 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002840:	480b      	ldr	r0, [pc, #44]	; (8002870 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002842:	4b0c      	ldr	r3, [pc, #48]	; (8002874 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002844:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002846:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002848:	d3f6      	bcc.n	8002838 <CopyDataInit>
  ldr  r2, =_sbss
 800284a:	4a0b      	ldr	r2, [pc, #44]	; (8002878 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800284c:	e002      	b.n	8002854 <LoopFillZerobss>

0800284e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800284e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002850:	f842 3b04 	str.w	r3, [r2], #4

08002854 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002854:	4b09      	ldr	r3, [pc, #36]	; (800287c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002856:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002858:	d3f9      	bcc.n	800284e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800285a:	f7ff ffd3 	bl	8002804 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800285e:	f005 f923 	bl	8007aa8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002862:	f7ff fb75 	bl	8001f50 <main>
  bx  lr    
 8002866:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002868:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 800286c:	0800a080 	.word	0x0800a080
  ldr  r0, =_sdata
 8002870:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002874:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8002878:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 800287c:	200025e8 	.word	0x200025e8

08002880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002880:	e7fe      	b.n	8002880 <ADC_IRQHandler>

08002882 <ili9341_DisplayOn>:
  * @brief  Enables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOn(void)
{
 8002882:	b580      	push	{r7, lr}
 8002884:	af00      	add	r7, sp, #0
  LCD_IO_Bl_OnOff(1);
 8002886:	2001      	movs	r0, #1
 8002888:	f000 fc84 	bl	8003194 <LCD_IO_Bl_OnOff>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 800288c:	2011      	movs	r0, #17
 800288e:	f000 fcb7 	bl	8003200 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
}
 8002892:	bf00      	nop
 8002894:	bd80      	pop	{r7, pc}

08002896 <ili9341_DisplayOff>:
  * @brief  Disables the Display.
  * @param  None
  * @retval None
  */
void ili9341_DisplayOff(void)
{
 8002896:	b580      	push	{r7, lr}
 8002898:	af00      	add	r7, sp, #0
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_SLPIN);    // Sleep
 800289a:	2010      	movs	r0, #16
 800289c:	f000 fcb0 	bl	8003200 <LCD_IO_WriteCmd8>
  ILI9341_LCDMUTEX_POP();
  LCD_IO_Bl_OnOff(0);
 80028a0:	2000      	movs	r0, #0
 80028a2:	f000 fc77 	bl	8003194 <LCD_IO_Bl_OnOff>
}
 80028a6:	bf00      	nop
 80028a8:	bd80      	pop	{r7, pc}

080028aa <ili9341_GetLcdPixelWidth>:
  * @brief  Get the LCD pixel Width.
  * @param  None
  * @retval The Lcd Pixel Width
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
 80028aa:	b480      	push	{r7}
 80028ac:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_X;
 80028ae:	f44f 73a0 	mov.w	r3, #320	; 0x140
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <ili9341_GetLcdPixelHeight>:
  * @brief  Get the LCD pixel Height.
  * @param  None
  * @retval The Lcd Pixel Height
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
 80028bc:	b480      	push	{r7}
 80028be:	af00      	add	r7, sp, #0
  return ILI9341_SIZE_Y;
 80028c0:	23f0      	movs	r3, #240	; 0xf0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	46bd      	mov	sp, r7
 80028c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ca:	4770      	bx	lr

080028cc <ili9341_ReadID>:
  * @param  None
  * @retval The ILI9341 ID
  * @rem    On the my lcd is unusable (stm32f429 discovery)
  */
uint16_t ili9341_ReadID(void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
  uint32_t dt = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	607b      	str	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_ReadCmd8MultipleData8(0xD3, (uint8_t *)&dt, 3, 1);
 80028d6:	1d39      	adds	r1, r7, #4
 80028d8:	2301      	movs	r3, #1
 80028da:	2203      	movs	r2, #3
 80028dc:	20d3      	movs	r0, #211	; 0xd3
 80028de:	f000 fd23 	bl	8003328 <LCD_IO_ReadCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  if(dt == 0x419300)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a05      	ldr	r2, [pc, #20]	; (80028fc <ili9341_ReadID+0x30>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d102      	bne.n	80028f0 <ili9341_ReadID+0x24>
    return 0x9341;
 80028ea:	f249 3341 	movw	r3, #37697	; 0x9341
 80028ee:	e000      	b.n	80028f2 <ili9341_ReadID+0x26>
  else
    return 0;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3708      	adds	r7, #8
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	00419300 	.word	0x00419300

08002900 <ili9341_Init>:
/* SPI or paralell mode */
#if ILI9341_INTERFACE_MODE == 1

//-----------------------------------------------------------------------------
void ili9341_Init(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b082      	sub	sp, #8
 8002904:	af02      	add	r7, sp, #8
  if((Is_ili9341_Initialized & ILI9341_LCD_INITIALIZED) == 0)
 8002906:	4b52      	ldr	r3, [pc, #328]	; (8002a50 <ili9341_Init+0x150>)
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	f003 0301 	and.w	r3, r3, #1
 800290e:	2b00      	cmp	r3, #0
 8002910:	d115      	bne.n	800293e <ili9341_Init+0x3e>
  {
    Is_ili9341_Initialized |= ILI9341_LCD_INITIALIZED;
 8002912:	4b4f      	ldr	r3, [pc, #316]	; (8002a50 <ili9341_Init+0x150>)
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	f043 0301 	orr.w	r3, r3, #1
 800291a:	b2da      	uxtb	r2, r3
 800291c:	4b4c      	ldr	r3, [pc, #304]	; (8002a50 <ili9341_Init+0x150>)
 800291e:	701a      	strb	r2, [r3, #0]
    if((Is_ili9341_Initialized & ILI9341_IO_INITIALIZED) == 0)
 8002920:	4b4b      	ldr	r3, [pc, #300]	; (8002a50 <ili9341_Init+0x150>)
 8002922:	781b      	ldrb	r3, [r3, #0]
 8002924:	f003 0302 	and.w	r3, r3, #2
 8002928:	2b00      	cmp	r3, #0
 800292a:	d101      	bne.n	8002930 <ili9341_Init+0x30>
      LCD_IO_Init();
 800292c:	f000 fc4a 	bl	80031c4 <LCD_IO_Init>
    Is_ili9341_Initialized |= ILI9341_IO_INITIALIZED;
 8002930:	4b47      	ldr	r3, [pc, #284]	; (8002a50 <ili9341_Init+0x150>)
 8002932:	781b      	ldrb	r3, [r3, #0]
 8002934:	f043 0302 	orr.w	r3, r3, #2
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b45      	ldr	r3, [pc, #276]	; (8002a50 <ili9341_Init+0x150>)
 800293c:	701a      	strb	r2, [r3, #0]
  }

  LCD_Delay(10);
 800293e:	200a      	movs	r0, #10
 8002940:	f000 fc1c 	bl	800317c <LCD_Delay>
  LCD_IO_WriteCmd8(ILI9341_SWRESET);
 8002944:	2001      	movs	r0, #1
 8002946:	f000 fc5b 	bl	8003200 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 800294a:	200a      	movs	r0, #10
 800294c:	f000 fc16 	bl	800317c <LCD_Delay>

  LCD_IO_WriteCmd8MultipleData8(0xEF, (uint8_t *)"\x03\x80\x02", 3);
 8002950:	2203      	movs	r2, #3
 8002952:	4940      	ldr	r1, [pc, #256]	; (8002a54 <ili9341_Init+0x154>)
 8002954:	20ef      	movs	r0, #239	; 0xef
 8002956:	f000 fca3 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCF, (uint8_t *)"\x00\xC1\x30", 3);
 800295a:	2203      	movs	r2, #3
 800295c:	493e      	ldr	r1, [pc, #248]	; (8002a58 <ili9341_Init+0x158>)
 800295e:	20cf      	movs	r0, #207	; 0xcf
 8002960:	f000 fc9e 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xED, (uint8_t *)"\x64\x03\x12\x81", 4);
 8002964:	2204      	movs	r2, #4
 8002966:	493d      	ldr	r1, [pc, #244]	; (8002a5c <ili9341_Init+0x15c>)
 8002968:	20ed      	movs	r0, #237	; 0xed
 800296a:	f000 fc99 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xE8, (uint8_t *)"\x85\x00\x78", 3);
 800296e:	2203      	movs	r2, #3
 8002970:	493b      	ldr	r1, [pc, #236]	; (8002a60 <ili9341_Init+0x160>)
 8002972:	20e8      	movs	r0, #232	; 0xe8
 8002974:	f000 fc94 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xCB, (uint8_t *)"\x39\x2C\x00\x34\x02", 5);
 8002978:	2205      	movs	r2, #5
 800297a:	493a      	ldr	r1, [pc, #232]	; (8002a64 <ili9341_Init+0x164>)
 800297c:	20cb      	movs	r0, #203	; 0xcb
 800297e:	f000 fc8f 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF7, (uint8_t *)"\x20", 1);
 8002982:	2201      	movs	r2, #1
 8002984:	4938      	ldr	r1, [pc, #224]	; (8002a68 <ili9341_Init+0x168>)
 8002986:	20f7      	movs	r0, #247	; 0xf7
 8002988:	f000 fc8a 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xEA, (uint8_t *)"\x00\x00", 2);
 800298c:	2202      	movs	r2, #2
 800298e:	4937      	ldr	r1, [pc, #220]	; (8002a6c <ili9341_Init+0x16c>)
 8002990:	20ea      	movs	r0, #234	; 0xea
 8002992:	f000 fc85 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 1 (Vreg1out, Verg2out)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR1, (uint8_t *)"\x23", 1);
 8002996:	2201      	movs	r2, #1
 8002998:	4935      	ldr	r1, [pc, #212]	; (8002a70 <ili9341_Init+0x170>)
 800299a:	20c0      	movs	r0, #192	; 0xc0
 800299c:	f000 fc80 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 2 (VGH,VGL)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PWCTR2, (uint8_t *)"\x10", 1);
 80029a0:	2201      	movs	r2, #1
 80029a2:	4934      	ldr	r1, [pc, #208]	; (8002a74 <ili9341_Init+0x174>)
 80029a4:	20c1      	movs	r0, #193	; 0xc1
 80029a6:	f000 fc7b 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR1, (uint8_t *)"\x3E\x28", 2);
 80029aa:	2202      	movs	r2, #2
 80029ac:	4932      	ldr	r1, [pc, #200]	; (8002a78 <ili9341_Init+0x178>)
 80029ae:	20c5      	movs	r0, #197	; 0xc5
 80029b0:	f000 fc76 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // Power Control 3 (Vcom)
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VMCTR2, (uint8_t *)"\x86", 1);
 80029b4:	2201      	movs	r2, #1
 80029b6:	4931      	ldr	r1, [pc, #196]	; (8002a7c <ili9341_Init+0x17c>)
 80029b8:	20c7      	movs	r0, #199	; 0xc7
 80029ba:	f000 fc71 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // Vertical scroll zero
  LCD_IO_WriteCmd8MultipleData8(ILI9341_VSCRSADD, (uint8_t *)"\x00", 1);
 80029be:	2201      	movs	r2, #1
 80029c0:	492f      	ldr	r1, [pc, #188]	; (8002a80 <ili9341_Init+0x180>)
 80029c2:	2037      	movs	r0, #55	; 0x37
 80029c4:	f000 fc6c 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1);
 80029c8:	2201      	movs	r2, #1
 80029ca:	492e      	ldr	r1, [pc, #184]	; (8002a84 <ili9341_Init+0x184>)
 80029cc:	203a      	movs	r0, #58	; 0x3a
 80029ce:	f000 fc67 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // LCD_IO_WriteCmd8MultipleData8(0xF6, (uint8_t *)"\x01\x00\x06", 3);

  LCD_IO_WriteCmd8MultipleData8(ILI9341_FRMCTR1, (uint8_t *)"\x00\x18", 2);
 80029d2:	2202      	movs	r2, #2
 80029d4:	492c      	ldr	r1, [pc, #176]	; (8002a88 <ili9341_Init+0x188>)
 80029d6:	20b1      	movs	r0, #177	; 0xb1
 80029d8:	f000 fc62 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_DFUNCTR, (uint8_t *)"\x08\x82\x27", 3);  // Display Function Control
 80029dc:	2203      	movs	r2, #3
 80029de:	492b      	ldr	r1, [pc, #172]	; (8002a8c <ili9341_Init+0x18c>)
 80029e0:	20b6      	movs	r0, #182	; 0xb6
 80029e2:	f000 fc5d 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(0xF2, (uint8_t *)"\x00", 1);            // 3Gamma Function Disable
 80029e6:	2201      	movs	r2, #1
 80029e8:	4925      	ldr	r1, [pc, #148]	; (8002a80 <ili9341_Init+0x180>)
 80029ea:	20f2      	movs	r0, #242	; 0xf2
 80029ec:	f000 fc58 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GAMMASET, (uint8_t *)"\x01", 1);// Gamma curve selected
 80029f0:	2201      	movs	r2, #1
 80029f2:	4927      	ldr	r1, [pc, #156]	; (8002a90 <ili9341_Init+0x190>)
 80029f4:	2026      	movs	r0, #38	; 0x26
 80029f6:	f000 fc53 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // positive gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRP1, (uint8_t *)"\x0F\x31\x2B\x0C\x0E\x08\x4E\xF1\x37\x07\x10\x03\x0E\x09\x00", 15);
 80029fa:	220f      	movs	r2, #15
 80029fc:	4925      	ldr	r1, [pc, #148]	; (8002a94 <ili9341_Init+0x194>)
 80029fe:	20e0      	movs	r0, #224	; 0xe0
 8002a00:	f000 fc4e 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  // negative gamma control
  LCD_IO_WriteCmd8MultipleData8(ILI9341_GMCTRN1, (uint8_t *)"\x00\x0E\x14\x03\x11\x07\x31\xC1\x48\x08\x0F\x0C\x31\x36\x0F", 15);
 8002a04:	220f      	movs	r2, #15
 8002a06:	4924      	ldr	r1, [pc, #144]	; (8002a98 <ili9341_Init+0x198>)
 8002a08:	20e1      	movs	r0, #225	; 0xe1
 8002a0a:	f000 fc49 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>

  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002a0e:	2036      	movs	r0, #54	; 0x36
 8002a10:	f000 fbf6 	bl	8003200 <LCD_IO_WriteCmd8>
 8002a14:	2028      	movs	r0, #40	; 0x28
 8002a16:	f000 fc03 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_SLPOUT);    // Exit Sleep
 8002a1a:	2011      	movs	r0, #17
 8002a1c:	f000 fbf0 	bl	8003200 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002a20:	200a      	movs	r0, #10
 8002a22:	f000 fbab 	bl	800317c <LCD_Delay>

  #if ILI9341_INITCLEAR == 1
  ili9341_FillRect(0, 0, ILI9341_SIZE_X, ILI9341_SIZE_Y, 0x0000);
 8002a26:	2300      	movs	r3, #0
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	23f0      	movs	r3, #240	; 0xf0
 8002a2c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a30:	2100      	movs	r1, #0
 8002a32:	2000      	movs	r0, #0
 8002a34:	f000 fa2c 	bl	8002e90 <ili9341_FillRect>
  LCD_Delay(10);
 8002a38:	200a      	movs	r0, #10
 8002a3a:	f000 fb9f 	bl	800317c <LCD_Delay>
  #endif
  
  LCD_IO_WriteCmd8(ILI9341_DISPON);    // Display on
 8002a3e:	2029      	movs	r0, #41	; 0x29
 8002a40:	f000 fbde 	bl	8003200 <LCD_IO_WriteCmd8>
  LCD_Delay(10);
 8002a44:	200a      	movs	r0, #10
 8002a46:	f000 fb99 	bl	800317c <LCD_Delay>
}
 8002a4a:	bf00      	nop
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	200000e4 	.word	0x200000e4
 8002a54:	08009a78 	.word	0x08009a78
 8002a58:	08009a7c 	.word	0x08009a7c
 8002a5c:	08009a80 	.word	0x08009a80
 8002a60:	08009a88 	.word	0x08009a88
 8002a64:	08009a8c 	.word	0x08009a8c
 8002a68:	08009a94 	.word	0x08009a94
 8002a6c:	08009a98 	.word	0x08009a98
 8002a70:	08009a9c 	.word	0x08009a9c
 8002a74:	08009aa0 	.word	0x08009aa0
 8002a78:	08009aa4 	.word	0x08009aa4
 8002a7c:	08009aa8 	.word	0x08009aa8
 8002a80:	08009aac 	.word	0x08009aac
 8002a84:	08009ab0 	.word	0x08009ab0
 8002a88:	08009ab4 	.word	0x08009ab4
 8002a8c:	08009ab8 	.word	0x08009ab8
 8002a90:	08009abc 	.word	0x08009abc
 8002a94:	08009ac0 	.word	0x08009ac0
 8002a98:	08009ad0 	.word	0x08009ad0

08002a9c <ili9341_SetCursor>:
  * @param  Xpos: specifies the X position.
  * @param  Ypos: specifies the Y position.
  * @retval None
  */
void ili9341_SetCursor(uint16_t Xpos, uint16_t Ypos)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b082      	sub	sp, #8
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	460a      	mov	r2, r1
 8002aa6:	80fb      	strh	r3, [r7, #6]
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	80bb      	strh	r3, [r7, #4]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002aac:	202a      	movs	r0, #42	; 0x2a
 8002aae:	f000 fba7 	bl	8003200 <LCD_IO_WriteCmd8>
 8002ab2:	88fb      	ldrh	r3, [r7, #6]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	b29b      	uxth	r3, r3
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	4618      	mov	r0, r3
 8002abc:	f000 fbb0 	bl	8003220 <LCD_IO_WriteData8>
 8002ac0:	88fb      	ldrh	r3, [r7, #6]
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f000 fbab 	bl	8003220 <LCD_IO_WriteData8>
 8002aca:	88fb      	ldrh	r3, [r7, #6]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f000 fba4 	bl	8003220 <LCD_IO_WriteData8>
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	4618      	mov	r0, r3
 8002ade:	f000 fb9f 	bl	8003220 <LCD_IO_WriteData8>
 8002ae2:	202b      	movs	r0, #43	; 0x2b
 8002ae4:	f000 fb8c 	bl	8003200 <LCD_IO_WriteCmd8>
 8002ae8:	88bb      	ldrh	r3, [r7, #4]
 8002aea:	0a1b      	lsrs	r3, r3, #8
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 fb95 	bl	8003220 <LCD_IO_WriteData8>
 8002af6:	88bb      	ldrh	r3, [r7, #4]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	4618      	mov	r0, r3
 8002afc:	f000 fb90 	bl	8003220 <LCD_IO_WriteData8>
 8002b00:	88bb      	ldrh	r3, [r7, #4]
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	b2db      	uxtb	r3, r3
 8002b08:	4618      	mov	r0, r3
 8002b0a:	f000 fb89 	bl	8003220 <LCD_IO_WriteData8>
 8002b0e:	88bb      	ldrh	r3, [r7, #4]
 8002b10:	b2db      	uxtb	r3, r3
 8002b12:	4618      	mov	r0, r3
 8002b14:	f000 fb84 	bl	8003220 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8002b18:	bf00      	nop
 8002b1a:	3708      	adds	r7, #8
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <ili9341_WritePixel>:
  * @param  Ypos: specifies the Y position.
  * @param  RGBCode: the RGB pixel color
  * @retval None
  */
void ili9341_WritePixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGBCode)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	4603      	mov	r3, r0
 8002b28:	80fb      	strh	r3, [r7, #6]
 8002b2a:	460b      	mov	r3, r1
 8002b2c:	80bb      	strh	r3, [r7, #4]
 8002b2e:	4613      	mov	r3, r2
 8002b30:	807b      	strh	r3, [r7, #2]
  ILI9341_LCDMUTEX_PUSH();
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002b32:	202a      	movs	r0, #42	; 0x2a
 8002b34:	f000 fb64 	bl	8003200 <LCD_IO_WriteCmd8>
 8002b38:	88fb      	ldrh	r3, [r7, #6]
 8002b3a:	0a1b      	lsrs	r3, r3, #8
 8002b3c:	b29b      	uxth	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	4618      	mov	r0, r3
 8002b42:	f000 fb6d 	bl	8003220 <LCD_IO_WriteData8>
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	b2db      	uxtb	r3, r3
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	f000 fb68 	bl	8003220 <LCD_IO_WriteData8>
 8002b50:	88fb      	ldrh	r3, [r7, #6]
 8002b52:	0a1b      	lsrs	r3, r3, #8
 8002b54:	b29b      	uxth	r3, r3
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f000 fb61 	bl	8003220 <LCD_IO_WriteData8>
 8002b5e:	88fb      	ldrh	r3, [r7, #6]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fb5c 	bl	8003220 <LCD_IO_WriteData8>
 8002b68:	202b      	movs	r0, #43	; 0x2b
 8002b6a:	f000 fb49 	bl	8003200 <LCD_IO_WriteCmd8>
 8002b6e:	88bb      	ldrh	r3, [r7, #4]
 8002b70:	0a1b      	lsrs	r3, r3, #8
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	4618      	mov	r0, r3
 8002b78:	f000 fb52 	bl	8003220 <LCD_IO_WriteData8>
 8002b7c:	88bb      	ldrh	r3, [r7, #4]
 8002b7e:	b2db      	uxtb	r3, r3
 8002b80:	4618      	mov	r0, r3
 8002b82:	f000 fb4d 	bl	8003220 <LCD_IO_WriteData8>
 8002b86:	88bb      	ldrh	r3, [r7, #4]
 8002b88:	0a1b      	lsrs	r3, r3, #8
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	b2db      	uxtb	r3, r3
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f000 fb46 	bl	8003220 <LCD_IO_WriteData8>
 8002b94:	88bb      	ldrh	r3, [r7, #4]
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f000 fb41 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_RAMWR); LCD_IO_WriteData16(RGBCode);
 8002b9e:	202c      	movs	r0, #44	; 0x2c
 8002ba0:	f000 fb2e 	bl	8003200 <LCD_IO_WriteCmd8>
 8002ba4:	887b      	ldrh	r3, [r7, #2]
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	f000 fb4c 	bl	8003244 <LCD_IO_WriteData16>
  ILI9341_LCDMUTEX_POP();
}
 8002bac:	bf00      	nop
 8002bae:	3708      	adds	r7, #8
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <ili9341_ReadPixel>:
  * @brief  Read pixel.
  * @param  None
  * @retval the RGB pixel color
  */
uint16_t ili9341_ReadPixel(uint16_t Xpos, uint16_t Ypos)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	4603      	mov	r3, r0
 8002bbc:	460a      	mov	r2, r1
 8002bbe:	80fb      	strh	r3, [r7, #6]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	80bb      	strh	r3, [r7, #4]
  uint16_t ret;
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 8002bc4:	2201      	movs	r2, #1
 8002bc6:	4925      	ldr	r1, [pc, #148]	; (8002c5c <ili9341_ReadPixel+0xa8>)
 8002bc8:	203a      	movs	r0, #58	; 0x3a
 8002bca:	f000 fb69 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_SETCURSOR(Xpos, Ypos);
 8002bce:	202a      	movs	r0, #42	; 0x2a
 8002bd0:	f000 fb16 	bl	8003200 <LCD_IO_WriteCmd8>
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	0a1b      	lsrs	r3, r3, #8
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fb1f 	bl	8003220 <LCD_IO_WriteData8>
 8002be2:	88fb      	ldrh	r3, [r7, #6]
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	4618      	mov	r0, r3
 8002be8:	f000 fb1a 	bl	8003220 <LCD_IO_WriteData8>
 8002bec:	88fb      	ldrh	r3, [r7, #6]
 8002bee:	0a1b      	lsrs	r3, r3, #8
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fb13 	bl	8003220 <LCD_IO_WriteData8>
 8002bfa:	88fb      	ldrh	r3, [r7, #6]
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f000 fb0e 	bl	8003220 <LCD_IO_WriteData8>
 8002c04:	202b      	movs	r0, #43	; 0x2b
 8002c06:	f000 fafb 	bl	8003200 <LCD_IO_WriteCmd8>
 8002c0a:	88bb      	ldrh	r3, [r7, #4]
 8002c0c:	0a1b      	lsrs	r3, r3, #8
 8002c0e:	b29b      	uxth	r3, r3
 8002c10:	b2db      	uxtb	r3, r3
 8002c12:	4618      	mov	r0, r3
 8002c14:	f000 fb04 	bl	8003220 <LCD_IO_WriteData8>
 8002c18:	88bb      	ldrh	r3, [r7, #4]
 8002c1a:	b2db      	uxtb	r3, r3
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	f000 faff 	bl	8003220 <LCD_IO_WriteData8>
 8002c22:	88bb      	ldrh	r3, [r7, #4]
 8002c24:	0a1b      	lsrs	r3, r3, #8
 8002c26:	b29b      	uxth	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 faf8 	bl	8003220 <LCD_IO_WriteData8>
 8002c30:	88bb      	ldrh	r3, [r7, #4]
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4618      	mov	r0, r3
 8002c36:	f000 faf3 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, (uint16_t *)&ret, 1, 1);
 8002c3a:	f107 010e 	add.w	r1, r7, #14
 8002c3e:	2301      	movs	r3, #1
 8002c40:	2201      	movs	r2, #1
 8002c42:	202e      	movs	r0, #46	; 0x2e
 8002c44:	f000 fb9e 	bl	8003384 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 8002c48:	2201      	movs	r2, #1
 8002c4a:	4905      	ldr	r1, [pc, #20]	; (8002c60 <ili9341_ReadPixel+0xac>)
 8002c4c:	203a      	movs	r0, #58	; 0x3a
 8002c4e:	f000 fb27 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
  return(ret);
 8002c52:	89fb      	ldrh	r3, [r7, #14]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	3710      	adds	r7, #16
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	08009ae0 	.word	0x08009ae0
 8002c60:	08009ab0 	.word	0x08009ab0

08002c64 <ili9341_SetDisplayWindow>:
  * @param  Height: display window height.
  * @param  Width:  display window width.
  * @retval None
  */
void ili9341_SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002c64:	b590      	push	{r4, r7, lr}
 8002c66:	b083      	sub	sp, #12
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	4604      	mov	r4, r0
 8002c6c:	4608      	mov	r0, r1
 8002c6e:	4611      	mov	r1, r2
 8002c70:	461a      	mov	r2, r3
 8002c72:	4623      	mov	r3, r4
 8002c74:	80fb      	strh	r3, [r7, #6]
 8002c76:	4603      	mov	r3, r0
 8002c78:	80bb      	strh	r3, [r7, #4]
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	807b      	strh	r3, [r7, #2]
 8002c7e:	4613      	mov	r3, r2
 8002c80:	803b      	strh	r3, [r7, #0]
  yStart = Ypos; yEnd = Ypos + Height - 1;
 8002c82:	4a2a      	ldr	r2, [pc, #168]	; (8002d2c <ili9341_SetDisplayWindow+0xc8>)
 8002c84:	88bb      	ldrh	r3, [r7, #4]
 8002c86:	8013      	strh	r3, [r2, #0]
 8002c88:	88ba      	ldrh	r2, [r7, #4]
 8002c8a:	883b      	ldrh	r3, [r7, #0]
 8002c8c:	4413      	add	r3, r2
 8002c8e:	b29b      	uxth	r3, r3
 8002c90:	3b01      	subs	r3, #1
 8002c92:	b29a      	uxth	r2, r3
 8002c94:	4b26      	ldr	r3, [pc, #152]	; (8002d30 <ili9341_SetDisplayWindow+0xcc>)
 8002c96:	801a      	strh	r2, [r3, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Width - 1);
 8002c98:	202a      	movs	r0, #42	; 0x2a
 8002c9a:	f000 fab1 	bl	8003200 <LCD_IO_WriteCmd8>
 8002c9e:	88fb      	ldrh	r3, [r7, #6]
 8002ca0:	0a1b      	lsrs	r3, r3, #8
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	b2db      	uxtb	r3, r3
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 faba 	bl	8003220 <LCD_IO_WriteData8>
 8002cac:	88fb      	ldrh	r3, [r7, #6]
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f000 fab5 	bl	8003220 <LCD_IO_WriteData8>
 8002cb6:	88fa      	ldrh	r2, [r7, #6]
 8002cb8:	887b      	ldrh	r3, [r7, #2]
 8002cba:	4413      	add	r3, r2
 8002cbc:	3b01      	subs	r3, #1
 8002cbe:	121b      	asrs	r3, r3, #8
 8002cc0:	b2db      	uxtb	r3, r3
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f000 faac 	bl	8003220 <LCD_IO_WriteData8>
 8002cc8:	88fb      	ldrh	r3, [r7, #6]
 8002cca:	b2da      	uxtb	r2, r3
 8002ccc:	887b      	ldrh	r3, [r7, #2]
 8002cce:	b2db      	uxtb	r3, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	b2db      	uxtb	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b2db      	uxtb	r3, r3
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f000 faa1 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Height - 1);
 8002cde:	202b      	movs	r0, #43	; 0x2b
 8002ce0:	f000 fa8e 	bl	8003200 <LCD_IO_WriteCmd8>
 8002ce4:	88bb      	ldrh	r3, [r7, #4]
 8002ce6:	0a1b      	lsrs	r3, r3, #8
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	4618      	mov	r0, r3
 8002cee:	f000 fa97 	bl	8003220 <LCD_IO_WriteData8>
 8002cf2:	88bb      	ldrh	r3, [r7, #4]
 8002cf4:	b2db      	uxtb	r3, r3
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f000 fa92 	bl	8003220 <LCD_IO_WriteData8>
 8002cfc:	88ba      	ldrh	r2, [r7, #4]
 8002cfe:	883b      	ldrh	r3, [r7, #0]
 8002d00:	4413      	add	r3, r2
 8002d02:	3b01      	subs	r3, #1
 8002d04:	121b      	asrs	r3, r3, #8
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fa89 	bl	8003220 <LCD_IO_WriteData8>
 8002d0e:	88bb      	ldrh	r3, [r7, #4]
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	883b      	ldrh	r3, [r7, #0]
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	4413      	add	r3, r2
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	3b01      	subs	r3, #1
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f000 fa7e 	bl	8003220 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8002d24:	bf00      	nop
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	bd90      	pop	{r4, r7, pc}
 8002d2c:	200000e6 	.word	0x200000e6
 8002d30:	200000e8 	.word	0x200000e8

08002d34 <ili9341_DrawHLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawHLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002d34:	b590      	push	{r4, r7, lr}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	4604      	mov	r4, r0
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4623      	mov	r3, r4
 8002d44:	80fb      	strh	r3, [r7, #6]
 8002d46:	4603      	mov	r3, r0
 8002d48:	80bb      	strh	r3, [r7, #4]
 8002d4a:	460b      	mov	r3, r1
 8002d4c:	807b      	strh	r3, [r7, #2]
 8002d4e:	4613      	mov	r3, r2
 8002d50:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Length - 1);
 8002d52:	202a      	movs	r0, #42	; 0x2a
 8002d54:	f000 fa54 	bl	8003200 <LCD_IO_WriteCmd8>
 8002d58:	88bb      	ldrh	r3, [r7, #4]
 8002d5a:	0a1b      	lsrs	r3, r3, #8
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	4618      	mov	r0, r3
 8002d62:	f000 fa5d 	bl	8003220 <LCD_IO_WriteData8>
 8002d66:	88bb      	ldrh	r3, [r7, #4]
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fa58 	bl	8003220 <LCD_IO_WriteData8>
 8002d70:	88ba      	ldrh	r2, [r7, #4]
 8002d72:	883b      	ldrh	r3, [r7, #0]
 8002d74:	4413      	add	r3, r2
 8002d76:	3b01      	subs	r3, #1
 8002d78:	121b      	asrs	r3, r3, #8
 8002d7a:	b2db      	uxtb	r3, r3
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f000 fa4f 	bl	8003220 <LCD_IO_WriteData8>
 8002d82:	88bb      	ldrh	r3, [r7, #4]
 8002d84:	b2da      	uxtb	r2, r3
 8002d86:	883b      	ldrh	r3, [r7, #0]
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	b2db      	uxtb	r3, r3
 8002d8e:	3b01      	subs	r3, #1
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	4618      	mov	r0, r3
 8002d94:	f000 fa44 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos);
 8002d98:	202b      	movs	r0, #43	; 0x2b
 8002d9a:	f000 fa31 	bl	8003200 <LCD_IO_WriteCmd8>
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	0a1b      	lsrs	r3, r3, #8
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	b2db      	uxtb	r3, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fa3a 	bl	8003220 <LCD_IO_WriteData8>
 8002dac:	887b      	ldrh	r3, [r7, #2]
 8002dae:	b2db      	uxtb	r3, r3
 8002db0:	4618      	mov	r0, r3
 8002db2:	f000 fa35 	bl	8003220 <LCD_IO_WriteData8>
 8002db6:	887b      	ldrh	r3, [r7, #2]
 8002db8:	0a1b      	lsrs	r3, r3, #8
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fa2e 	bl	8003220 <LCD_IO_WriteData8>
 8002dc4:	887b      	ldrh	r3, [r7, #2]
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 fa29 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8002dce:	883a      	ldrh	r2, [r7, #0]
 8002dd0:	88fb      	ldrh	r3, [r7, #6]
 8002dd2:	4619      	mov	r1, r3
 8002dd4:	202c      	movs	r0, #44	; 0x2c
 8002dd6:	f000 fa45 	bl	8003264 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd90      	pop	{r4, r7, pc}

08002de2 <ili9341_DrawVLine>:
  * @param  Ypos:     specifies the Y position.
  * @param  Length:   specifies the Line length.
  * @retval None
  */
void ili9341_DrawVLine(uint16_t RGBCode, uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002de2:	b590      	push	{r4, r7, lr}
 8002de4:	b083      	sub	sp, #12
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	4604      	mov	r4, r0
 8002dea:	4608      	mov	r0, r1
 8002dec:	4611      	mov	r1, r2
 8002dee:	461a      	mov	r2, r3
 8002df0:	4623      	mov	r3, r4
 8002df2:	80fb      	strh	r3, [r7, #6]
 8002df4:	4603      	mov	r3, r0
 8002df6:	80bb      	strh	r3, [r7, #4]
 8002df8:	460b      	mov	r3, r1
 8002dfa:	807b      	strh	r3, [r7, #2]
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos);
 8002e00:	202a      	movs	r0, #42	; 0x2a
 8002e02:	f000 f9fd 	bl	8003200 <LCD_IO_WriteCmd8>
 8002e06:	88bb      	ldrh	r3, [r7, #4]
 8002e08:	0a1b      	lsrs	r3, r3, #8
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f000 fa06 	bl	8003220 <LCD_IO_WriteData8>
 8002e14:	88bb      	ldrh	r3, [r7, #4]
 8002e16:	b2db      	uxtb	r3, r3
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f000 fa01 	bl	8003220 <LCD_IO_WriteData8>
 8002e1e:	88bb      	ldrh	r3, [r7, #4]
 8002e20:	0a1b      	lsrs	r3, r3, #8
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	b2db      	uxtb	r3, r3
 8002e26:	4618      	mov	r0, r3
 8002e28:	f000 f9fa 	bl	8003220 <LCD_IO_WriteData8>
 8002e2c:	88bb      	ldrh	r3, [r7, #4]
 8002e2e:	b2db      	uxtb	r3, r3
 8002e30:	4618      	mov	r0, r3
 8002e32:	f000 f9f5 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Length - 1);
 8002e36:	202b      	movs	r0, #43	; 0x2b
 8002e38:	f000 f9e2 	bl	8003200 <LCD_IO_WriteCmd8>
 8002e3c:	887b      	ldrh	r3, [r7, #2]
 8002e3e:	0a1b      	lsrs	r3, r3, #8
 8002e40:	b29b      	uxth	r3, r3
 8002e42:	b2db      	uxtb	r3, r3
 8002e44:	4618      	mov	r0, r3
 8002e46:	f000 f9eb 	bl	8003220 <LCD_IO_WriteData8>
 8002e4a:	887b      	ldrh	r3, [r7, #2]
 8002e4c:	b2db      	uxtb	r3, r3
 8002e4e:	4618      	mov	r0, r3
 8002e50:	f000 f9e6 	bl	8003220 <LCD_IO_WriteData8>
 8002e54:	887a      	ldrh	r2, [r7, #2]
 8002e56:	883b      	ldrh	r3, [r7, #0]
 8002e58:	4413      	add	r3, r2
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	121b      	asrs	r3, r3, #8
 8002e5e:	b2db      	uxtb	r3, r3
 8002e60:	4618      	mov	r0, r3
 8002e62:	f000 f9dd 	bl	8003220 <LCD_IO_WriteData8>
 8002e66:	887b      	ldrh	r3, [r7, #2]
 8002e68:	b2da      	uxtb	r2, r3
 8002e6a:	883b      	ldrh	r3, [r7, #0]
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	4413      	add	r3, r2
 8002e70:	b2db      	uxtb	r3, r3
 8002e72:	3b01      	subs	r3, #1
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	4618      	mov	r0, r3
 8002e78:	f000 f9d2 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Length);
 8002e7c:	883a      	ldrh	r2, [r7, #0]
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	4619      	mov	r1, r3
 8002e82:	202c      	movs	r0, #44	; 0x2c
 8002e84:	f000 f9ee 	bl	8003264 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd90      	pop	{r4, r7, pc}

08002e90 <ili9341_FillRect>:
  * @param  Ysize:    specifies the Y size
  * @param  RGBCode:  specifies the RGB color
  * @retval None
  */
void ili9341_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t RGBCode)
{
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	4604      	mov	r4, r0
 8002e98:	4608      	mov	r0, r1
 8002e9a:	4611      	mov	r1, r2
 8002e9c:	461a      	mov	r2, r3
 8002e9e:	4623      	mov	r3, r4
 8002ea0:	80fb      	strh	r3, [r7, #6]
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	80bb      	strh	r3, [r7, #4]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	807b      	strh	r3, [r7, #2]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	803b      	strh	r3, [r7, #0]
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_CASET); LCD_IO_WriteData16_to_2x8(Xpos); LCD_IO_WriteData16_to_2x8(Xpos + Xsize - 1);
 8002eae:	202a      	movs	r0, #42	; 0x2a
 8002eb0:	f000 f9a6 	bl	8003200 <LCD_IO_WriteCmd8>
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	0a1b      	lsrs	r3, r3, #8
 8002eb8:	b29b      	uxth	r3, r3
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 f9af 	bl	8003220 <LCD_IO_WriteData8>
 8002ec2:	88fb      	ldrh	r3, [r7, #6]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 f9aa 	bl	8003220 <LCD_IO_WriteData8>
 8002ecc:	88fa      	ldrh	r2, [r7, #6]
 8002ece:	887b      	ldrh	r3, [r7, #2]
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	121b      	asrs	r3, r3, #8
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f9a1 	bl	8003220 <LCD_IO_WriteData8>
 8002ede:	88fb      	ldrh	r3, [r7, #6]
 8002ee0:	b2da      	uxtb	r2, r3
 8002ee2:	887b      	ldrh	r3, [r7, #2]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	3b01      	subs	r3, #1
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f000 f996 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(Ypos); LCD_IO_WriteData16_to_2x8(Ypos + Ysize - 1);
 8002ef4:	202b      	movs	r0, #43	; 0x2b
 8002ef6:	f000 f983 	bl	8003200 <LCD_IO_WriteCmd8>
 8002efa:	88bb      	ldrh	r3, [r7, #4]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	4618      	mov	r0, r3
 8002f04:	f000 f98c 	bl	8003220 <LCD_IO_WriteData8>
 8002f08:	88bb      	ldrh	r3, [r7, #4]
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	f000 f987 	bl	8003220 <LCD_IO_WriteData8>
 8002f12:	88ba      	ldrh	r2, [r7, #4]
 8002f14:	883b      	ldrh	r3, [r7, #0]
 8002f16:	4413      	add	r3, r2
 8002f18:	3b01      	subs	r3, #1
 8002f1a:	121b      	asrs	r3, r3, #8
 8002f1c:	b2db      	uxtb	r3, r3
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f97e 	bl	8003220 <LCD_IO_WriteData8>
 8002f24:	88bb      	ldrh	r3, [r7, #4]
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	883b      	ldrh	r3, [r7, #0]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	3b01      	subs	r3, #1
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	4618      	mov	r0, r3
 8002f36:	f000 f973 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8DataFill16(ILI9341_RAMWR, RGBCode, Xsize * Ysize);
 8002f3a:	887b      	ldrh	r3, [r7, #2]
 8002f3c:	883a      	ldrh	r2, [r7, #0]
 8002f3e:	fb02 f303 	mul.w	r3, r2, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	8b3b      	ldrh	r3, [r7, #24]
 8002f46:	4619      	mov	r1, r3
 8002f48:	202c      	movs	r0, #44	; 0x2c
 8002f4a:	f000 f98b 	bl	8003264 <LCD_IO_WriteCmd8DataFill16>
  ILI9341_LCDMUTEX_POP();
}
 8002f4e:	bf00      	nop
 8002f50:	370c      	adds	r7, #12
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd90      	pop	{r4, r7, pc}
	...

08002f58 <ili9341_DrawBitmap>:
  * @param  Ypos:  Bmp Y position in the LCD
  * @retval None
  * @brief  Draw direction: right then up
  */
void ili9341_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pbmp)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b084      	sub	sp, #16
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	4603      	mov	r3, r0
 8002f60:	603a      	str	r2, [r7, #0]
 8002f62:	80fb      	strh	r3, [r7, #6]
 8002f64:	460b      	mov	r3, r1
 8002f66:	80bb      	strh	r3, [r7, #4]
  uint32_t index, size;
  /* Read bitmap size */
  size = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfSize;
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	f8d3 3002 	ldr.w	r3, [r3, #2]
 8002f6e:	60fb      	str	r3, [r7, #12]
  /* Get bitmap data address offset */
  index = ((BITMAPSTRUCT *)pbmp)->fileHeader.bfOffBits;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	f8d3 300a 	ldr.w	r3, [r3, #10]
 8002f76:	60bb      	str	r3, [r7, #8]
  size = (size - index) / 2;
 8002f78:	68fa      	ldr	r2, [r7, #12]
 8002f7a:	68bb      	ldr	r3, [r7, #8]
 8002f7c:	1ad3      	subs	r3, r2, r3
 8002f7e:	085b      	lsrs	r3, r3, #1
 8002f80:	60fb      	str	r3, [r7, #12]
  pbmp += index;
 8002f82:	683a      	ldr	r2, [r7, #0]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4413      	add	r3, r2
 8002f88:	603b      	str	r3, [r7, #0]

  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_UP);
 8002f8a:	2036      	movs	r0, #54	; 0x36
 8002f8c:	f000 f938 	bl	8003200 <LCD_IO_WriteCmd8>
 8002f90:	2068      	movs	r0, #104	; 0x68
 8002f92:	f000 f945 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8(ILI9341_PASET); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yEnd); LCD_IO_WriteData16_to_2x8(ILI9341_SIZE_Y - 1 - yStart);
 8002f96:	202b      	movs	r0, #43	; 0x2b
 8002f98:	f000 f932 	bl	8003200 <LCD_IO_WriteCmd8>
 8002f9c:	4b1a      	ldr	r3, [pc, #104]	; (8003008 <ili9341_DrawBitmap+0xb0>)
 8002f9e:	881b      	ldrh	r3, [r3, #0]
 8002fa0:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002fa4:	121b      	asrs	r3, r3, #8
 8002fa6:	b2db      	uxtb	r3, r3
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f000 f939 	bl	8003220 <LCD_IO_WriteData8>
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <ili9341_DrawBitmap+0xb0>)
 8002fb0:	881b      	ldrh	r3, [r3, #0]
 8002fb2:	b2da      	uxtb	r2, r3
 8002fb4:	f06f 0310 	mvn.w	r3, #16
 8002fb8:	1a9b      	subs	r3, r3, r2
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 f92f 	bl	8003220 <LCD_IO_WriteData8>
 8002fc2:	4b12      	ldr	r3, [pc, #72]	; (800300c <ili9341_DrawBitmap+0xb4>)
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	f1c3 03ef 	rsb	r3, r3, #239	; 0xef
 8002fca:	121b      	asrs	r3, r3, #8
 8002fcc:	b2db      	uxtb	r3, r3
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f926 	bl	8003220 <LCD_IO_WriteData8>
 8002fd4:	4b0d      	ldr	r3, [pc, #52]	; (800300c <ili9341_DrawBitmap+0xb4>)
 8002fd6:	881b      	ldrh	r3, [r3, #0]
 8002fd8:	b2da      	uxtb	r2, r3
 8002fda:	f06f 0310 	mvn.w	r3, #16
 8002fde:	1a9b      	subs	r3, r3, r2
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f000 f91c 	bl	8003220 <LCD_IO_WriteData8>
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, (uint16_t *)pbmp, size);
 8002fe8:	68fa      	ldr	r2, [r7, #12]
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	202c      	movs	r0, #44	; 0x2c
 8002fee:	f000 f979 	bl	80032e4 <LCD_IO_WriteCmd8MultipleData16>
  LCD_IO_WriteCmd8(ILI9341_MADCTL); LCD_IO_WriteData8(ILI9341_MAD_DATA_RIGHT_THEN_DOWN);
 8002ff2:	2036      	movs	r0, #54	; 0x36
 8002ff4:	f000 f904 	bl	8003200 <LCD_IO_WriteCmd8>
 8002ff8:	2028      	movs	r0, #40	; 0x28
 8002ffa:	f000 f911 	bl	8003220 <LCD_IO_WriteData8>
  ILI9341_LCDMUTEX_POP();
}
 8002ffe:	bf00      	nop
 8003000:	3710      	adds	r7, #16
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	200000e8 	.word	0x200000e8
 800300c:	200000e6 	.word	0x200000e6

08003010 <ili9341_DrawRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_DrawRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8003010:	b590      	push	{r4, r7, lr}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4604      	mov	r4, r0
 8003018:	4608      	mov	r0, r1
 800301a:	4611      	mov	r1, r2
 800301c:	461a      	mov	r2, r3
 800301e:	4623      	mov	r3, r4
 8003020:	80fb      	strh	r3, [r7, #6]
 8003022:	4603      	mov	r3, r0
 8003024:	80bb      	strh	r3, [r7, #4]
 8003026:	460b      	mov	r3, r1
 8003028:	807b      	strh	r3, [r7, #2]
 800302a:	4613      	mov	r3, r2
 800302c:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 800302e:	883b      	ldrh	r3, [r7, #0]
 8003030:	887a      	ldrh	r2, [r7, #2]
 8003032:	88b9      	ldrh	r1, [r7, #4]
 8003034:	88f8      	ldrh	r0, [r7, #6]
 8003036:	f7ff fe15 	bl	8002c64 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData16(ILI9341_RAMWR, pData, Xsize * Ysize);
 800303a:	887b      	ldrh	r3, [r7, #2]
 800303c:	883a      	ldrh	r2, [r7, #0]
 800303e:	fb02 f303 	mul.w	r3, r2, r3
 8003042:	461a      	mov	r2, r3
 8003044:	69b9      	ldr	r1, [r7, #24]
 8003046:	202c      	movs	r0, #44	; 0x2c
 8003048:	f000 f94c 	bl	80032e4 <LCD_IO_WriteCmd8MultipleData16>
  ILI9341_LCDMUTEX_POP();
}
 800304c:	bf00      	nop
 800304e:	370c      	adds	r7, #12
 8003050:	46bd      	mov	sp, r7
 8003052:	bd90      	pop	{r4, r7, pc}

08003054 <ili9341_ReadRGBImage>:
  * @param  Ysize: Image Y size in the LCD
  * @retval None
  * @brief  Draw direction: right then down
  */
void ili9341_ReadRGBImage(uint16_t Xpos, uint16_t Ypos, uint16_t Xsize, uint16_t Ysize, uint16_t *pData)
{
 8003054:	b590      	push	{r4, r7, lr}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	4604      	mov	r4, r0
 800305c:	4608      	mov	r0, r1
 800305e:	4611      	mov	r1, r2
 8003060:	461a      	mov	r2, r3
 8003062:	4623      	mov	r3, r4
 8003064:	80fb      	strh	r3, [r7, #6]
 8003066:	4603      	mov	r3, r0
 8003068:	80bb      	strh	r3, [r7, #4]
 800306a:	460b      	mov	r3, r1
 800306c:	807b      	strh	r3, [r7, #2]
 800306e:	4613      	mov	r3, r2
 8003070:	803b      	strh	r3, [r7, #0]
  ili9341_SetDisplayWindow(Xpos, Ypos, Xsize, Ysize);
 8003072:	883b      	ldrh	r3, [r7, #0]
 8003074:	887a      	ldrh	r2, [r7, #2]
 8003076:	88b9      	ldrh	r1, [r7, #4]
 8003078:	88f8      	ldrh	r0, [r7, #6]
 800307a:	f7ff fdf3 	bl	8002c64 <ili9341_SetDisplayWindow>
  ILI9341_LCDMUTEX_PUSH();
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x66", 1); // Read: only 24bit pixel mode
 800307e:	2201      	movs	r2, #1
 8003080:	490b      	ldr	r1, [pc, #44]	; (80030b0 <ili9341_ReadRGBImage+0x5c>)
 8003082:	203a      	movs	r0, #58	; 0x3a
 8003084:	f000 f90c 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  LCD_IO_ReadCmd8MultipleData24to16(ILI9341_RAMRD, pData, Xsize * Ysize, 1);
 8003088:	887b      	ldrh	r3, [r7, #2]
 800308a:	883a      	ldrh	r2, [r7, #0]
 800308c:	fb02 f303 	mul.w	r3, r2, r3
 8003090:	461a      	mov	r2, r3
 8003092:	2301      	movs	r3, #1
 8003094:	69b9      	ldr	r1, [r7, #24]
 8003096:	202e      	movs	r0, #46	; 0x2e
 8003098:	f000 f974 	bl	8003384 <LCD_IO_ReadCmd8MultipleData24to16>
  LCD_IO_WriteCmd8MultipleData8(ILI9341_PIXFMT, (uint8_t *)"\x55", 1); // Return to 16bit pixel mode
 800309c:	2201      	movs	r2, #1
 800309e:	4905      	ldr	r1, [pc, #20]	; (80030b4 <ili9341_ReadRGBImage+0x60>)
 80030a0:	203a      	movs	r0, #58	; 0x3a
 80030a2:	f000 f8fd 	bl	80032a0 <LCD_IO_WriteCmd8MultipleData8>
  ILI9341_LCDMUTEX_POP();
}
 80030a6:	bf00      	nop
 80030a8:	370c      	adds	r7, #12
 80030aa:	46bd      	mov	sp, r7
 80030ac:	bd90      	pop	{r4, r7, pc}
 80030ae:	bf00      	nop
 80030b0:	08009ae0 	.word	0x08009ae0
 80030b4:	08009ab0 	.word	0x08009ab0

080030b8 <ili9341_Scroll>:
  * @param  TopFix    : Top fix size [pixel]
  * @param  BottonFix : Botton fix size [pixel]
  * @retval None
  */
void ili9341_Scroll(int16_t Scroll, uint16_t TopFix, uint16_t BottonFix)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b082      	sub	sp, #8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	4603      	mov	r3, r0
 80030c0:	80fb      	strh	r3, [r7, #6]
 80030c2:	460b      	mov	r3, r1
 80030c4:	80bb      	strh	r3, [r7, #4]
 80030c6:	4613      	mov	r3, r2
 80030c8:	807b      	strh	r3, [r7, #2]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #elif (ILI9341_ORIENTATION == 1)
  if((TopFix != scrparam[1]) || (BottonFix != scrparam[3]))
 80030ca:	4b2a      	ldr	r3, [pc, #168]	; (8003174 <ili9341_Scroll+0xbc>)
 80030cc:	885b      	ldrh	r3, [r3, #2]
 80030ce:	88ba      	ldrh	r2, [r7, #4]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d104      	bne.n	80030de <ili9341_Scroll+0x26>
 80030d4:	4b27      	ldr	r3, [pc, #156]	; (8003174 <ili9341_Scroll+0xbc>)
 80030d6:	88db      	ldrh	r3, [r3, #6]
 80030d8:	887a      	ldrh	r2, [r7, #2]
 80030da:	429a      	cmp	r2, r3
 80030dc:	d015      	beq.n	800310a <ili9341_Scroll+0x52>
  {
    scrparam[1] = TopFix;
 80030de:	4a25      	ldr	r2, [pc, #148]	; (8003174 <ili9341_Scroll+0xbc>)
 80030e0:	88bb      	ldrh	r3, [r7, #4]
 80030e2:	8053      	strh	r3, [r2, #2]
    scrparam[3] = BottonFix;
 80030e4:	4a23      	ldr	r2, [pc, #140]	; (8003174 <ili9341_Scroll+0xbc>)
 80030e6:	887b      	ldrh	r3, [r7, #2]
 80030e8:	80d3      	strh	r3, [r2, #6]
    scrparam[2] = ILI9341_LCD_PIXEL_HEIGHT - TopFix - BottonFix;
 80030ea:	88bb      	ldrh	r3, [r7, #4]
 80030ec:	425b      	negs	r3, r3
 80030ee:	b29a      	uxth	r2, r3
 80030f0:	887b      	ldrh	r3, [r7, #2]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	4b1d      	ldr	r3, [pc, #116]	; (8003174 <ili9341_Scroll+0xbc>)
 80030fe:	809a      	strh	r2, [r3, #4]
    LCD_IO_WriteCmd8MultipleData16(ILI9341_VSCRDEF, &scrparam[1], 3);
 8003100:	2203      	movs	r2, #3
 8003102:	491d      	ldr	r1, [pc, #116]	; (8003178 <ili9341_Scroll+0xc0>)
 8003104:	2033      	movs	r0, #51	; 0x33
 8003106:	f000 f8ed 	bl	80032e4 <LCD_IO_WriteCmd8MultipleData16>
  }
  Scroll = (0 - Scroll) % scrparam[2];
 800310a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800310e:	425b      	negs	r3, r3
 8003110:	4a18      	ldr	r2, [pc, #96]	; (8003174 <ili9341_Scroll+0xbc>)
 8003112:	8892      	ldrh	r2, [r2, #4]
 8003114:	fb93 f1f2 	sdiv	r1, r3, r2
 8003118:	fb02 f201 	mul.w	r2, r2, r1
 800311c:	1a9b      	subs	r3, r3, r2
 800311e:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
 8003120:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003124:	2b00      	cmp	r3, #0
 8003126:	da0a      	bge.n	800313e <ili9341_Scroll+0x86>
    Scroll = scrparam[2] + Scroll + scrparam[1];
 8003128:	4b12      	ldr	r3, [pc, #72]	; (8003174 <ili9341_Scroll+0xbc>)
 800312a:	889a      	ldrh	r2, [r3, #4]
 800312c:	88fb      	ldrh	r3, [r7, #6]
 800312e:	4413      	add	r3, r2
 8003130:	b29a      	uxth	r2, r3
 8003132:	4b10      	ldr	r3, [pc, #64]	; (8003174 <ili9341_Scroll+0xbc>)
 8003134:	885b      	ldrh	r3, [r3, #2]
 8003136:	4413      	add	r3, r2
 8003138:	b29b      	uxth	r3, r3
 800313a:	80fb      	strh	r3, [r7, #6]
 800313c:	e005      	b.n	800314a <ili9341_Scroll+0x92>
  else
    Scroll = Scroll + scrparam[1];
 800313e:	4b0d      	ldr	r3, [pc, #52]	; (8003174 <ili9341_Scroll+0xbc>)
 8003140:	885a      	ldrh	r2, [r3, #2]
 8003142:	88fb      	ldrh	r3, [r7, #6]
 8003144:	4413      	add	r3, r2
 8003146:	b29b      	uxth	r3, r3
 8003148:	80fb      	strh	r3, [r7, #6]
  if(Scroll < 0)
    Scroll = scrparam[2] + Scroll + scrparam[1];
  else
    Scroll = Scroll + scrparam[1];
  #endif
  if(Scroll != scrparam[0])
 800314a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800314e:	4a09      	ldr	r2, [pc, #36]	; (8003174 <ili9341_Scroll+0xbc>)
 8003150:	8812      	ldrh	r2, [r2, #0]
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <ili9341_Scroll+0xb2>
  {
    scrparam[0] = Scroll;
 8003156:	88fa      	ldrh	r2, [r7, #6]
 8003158:	4b06      	ldr	r3, [pc, #24]	; (8003174 <ili9341_Scroll+0xbc>)
 800315a:	801a      	strh	r2, [r3, #0]
    LCD_IO_WriteCmd8DataFill16(ILI9341_VSCRSADD, scrparam[0], 1);
 800315c:	4b05      	ldr	r3, [pc, #20]	; (8003174 <ili9341_Scroll+0xbc>)
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	4619      	mov	r1, r3
 8003164:	2037      	movs	r0, #55	; 0x37
 8003166:	f000 f87d 	bl	8003264 <LCD_IO_WriteCmd8DataFill16>
  }
  ILI9341_LCDMUTEX_POP();
}
 800316a:	bf00      	nop
 800316c:	3708      	adds	r7, #8
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	200000ec 	.word	0x200000ec
 8003178:	200000ee 	.word	0x200000ee

0800317c <LCD_Delay>:
#define LCD_RST_ON            GPIOX_ODR(LCD_RST) = 0
#define LCD_RST_OFF           GPIOX_ODR(LCD_RST) = 1

//-----------------------------------------------------------------------------
void LCD_Delay(uint32_t Delay)
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b082      	sub	sp, #8
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  DelayMs(Delay);
 8003184:	6878      	ldr	r0, [r7, #4]
 8003186:	f001 f879 	bl	800427c <HAL_Delay>
}
 800318a:	bf00      	nop
 800318c:	3708      	adds	r7, #8
 800318e:	46bd      	mov	sp, r7
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <LCD_IO_Bl_OnOff>:

//-----------------------------------------------------------------------------
void LCD_IO_Bl_OnOff(uint8_t Bl)
{
 8003194:	b480      	push	{r7}
 8003196:	b083      	sub	sp, #12
 8003198:	af00      	add	r7, sp, #0
 800319a:	4603      	mov	r3, r0
 800319c:	71fb      	strb	r3, [r7, #7]
  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  if(Bl)
 800319e:	79fb      	ldrb	r3, [r7, #7]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d003      	beq.n	80031ac <LCD_IO_Bl_OnOff+0x18>
    GPIOX_ODR(LCD_BL) = LCD_BLON;
 80031a4:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <LCD_IO_Bl_OnOff+0x2c>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
  else
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
  #endif
}
 80031aa:	e002      	b.n	80031b2 <LCD_IO_Bl_OnOff+0x1e>
    GPIOX_ODR(LCD_BL) = 1 - LCD_BLON;
 80031ac:	4b04      	ldr	r3, [pc, #16]	; (80031c0 <LCD_IO_Bl_OnOff+0x2c>)
 80031ae:	2201      	movs	r2, #1
 80031b0:	601a      	str	r2, [r3, #0]
}
 80031b2:	bf00      	nop
 80031b4:	370c      	adds	r7, #12
 80031b6:	46bd      	mov	sp, r7
 80031b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031bc:	4770      	bx	lr
 80031be:	bf00      	nop
 80031c0:	424082bc 	.word	0x424082bc

080031c4 <LCD_IO_Init>:

//-----------------------------------------------------------------------------
void LCD_IO_Init(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  #define DMA_CLOCK             0
  #endif

  /* GPIO, DMA Clocks */
  #if GPIOX_PORTNUM(LCD_RST) >= GPIOX_PORTNUM_A || GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A || DMANUM(LCD_DMA) > 0
  RCC->AHB1ENR |= GPIOX_CLOCK_LCD_RST | GPIOX_CLOCK_LCD_BL | DMA_CLOCK;
 80031c8:	4b0a      	ldr	r3, [pc, #40]	; (80031f4 <LCD_IO_Init+0x30>)
 80031ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031cc:	4a09      	ldr	r2, [pc, #36]	; (80031f4 <LCD_IO_Init+0x30>)
 80031ce:	f043 0302 	orr.w	r3, r3, #2
 80031d2:	6313      	str	r3, [r2, #48]	; 0x30
  GPIOX_MODER(MODE_OUT, LCD_RST);       /* RST = GPIO OUT */
  GPIOX_ODR(LCD_RST) = 1;               /* RST = 1 */
  #endif

  #if GPIOX_PORTNUM(LCD_BL) >= GPIOX_PORTNUM_A
  GPIOX_ODR(LCD_BL) = LCD_BLON;
 80031d4:	4b08      	ldr	r3, [pc, #32]	; (80031f8 <LCD_IO_Init+0x34>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
  GPIOX_MODER(MODE_OUT, LCD_BL);
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <LCD_IO_Init+0x38>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 80031e2:	4a06      	ldr	r2, [pc, #24]	; (80031fc <LCD_IO_Init+0x38>)
 80031e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031e8:	6013      	str	r3, [r2, #0]
  LCD_Delay(1);
  LCD_RST_ON;
  LCD_Delay(1);
  LCD_RST_OFF;
  #endif
  LCD_Delay(1);
 80031ea:	2001      	movs	r0, #1
 80031ec:	f7ff ffc6 	bl	800317c <LCD_Delay>
  osSemaphoreDef(spiDmaBinSem);
  spiDmaBinSemHandle = osSemaphoreCreate(osSemaphore(spiDmaBinSem), 1);
  osSemaphoreWait(spiDmaBinSemHandle, 1);
  #endif
  #endif  /* #if DMANUM(LCD_DMA) > 0 */
}
 80031f0:	bf00      	nop
 80031f2:	bd80      	pop	{r7, pc}
 80031f4:	40023800 	.word	0x40023800
 80031f8:	424082bc 	.word	0x424082bc
 80031fc:	40020400 	.word	0x40020400

08003200 <LCD_IO_WriteCmd8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8(uint8_t Cmd)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_BASE = (uint16_t)Cmd;
 800320a:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800320e:	79fa      	ldrb	r2, [r7, #7]
 8003210:	b292      	uxth	r2, r2
 8003212:	801a      	strh	r2, [r3, #0]
}
 8003214:	bf00      	nop
 8003216:	370c      	adds	r7, #12
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr

08003220 <LCD_IO_WriteData8>:
  *(volatile uint16_t *)LCD_ADDR_BASE = Cmd;
}

//-----------------------------------------------------------------------------
void LCD_IO_WriteData8(uint8_t Data)
{
 8003220:	b480      	push	{r7}
 8003222:	b083      	sub	sp, #12
 8003224:	af00      	add	r7, sp, #0
 8003226:	4603      	mov	r3, r0
 8003228:	71fb      	strb	r3, [r7, #7]
  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_DATA = (uint16_t)Data;
 800322a:	4b05      	ldr	r3, [pc, #20]	; (8003240 <LCD_IO_WriteData8+0x20>)
 800322c:	79fa      	ldrb	r2, [r7, #7]
 800322e:	b292      	uxth	r2, r2
 8003230:	801a      	strh	r2, [r3, #0]
}
 8003232:	bf00      	nop
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	600ffffe 	.word	0x600ffffe

08003244 <LCD_IO_WriteData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteData16(uint16_t Data)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	80fb      	strh	r3, [r7, #6]
  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_DATA = Data;
 800324e:	4a04      	ldr	r2, [pc, #16]	; (8003260 <LCD_IO_WriteData16+0x1c>)
 8003250:	88fb      	ldrh	r3, [r7, #6]
 8003252:	8013      	strh	r3, [r2, #0]
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr
 8003260:	600ffffe 	.word	0x600ffffe

08003264 <LCD_IO_WriteCmd8DataFill16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8DataFill16(uint8_t Cmd, uint16_t Data, uint32_t Size)
{
 8003264:	b480      	push	{r7}
 8003266:	b083      	sub	sp, #12
 8003268:	af00      	add	r7, sp, #0
 800326a:	4603      	mov	r3, r0
 800326c:	603a      	str	r2, [r7, #0]
 800326e:	71fb      	strb	r3, [r7, #7]
 8003270:	460b      	mov	r3, r1
 8003272:	80bb      	strh	r3, [r7, #4]
  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_BASE = (uint16_t)Cmd;
 8003274:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003278:	79fa      	ldrb	r2, [r7, #7]
 800327a:	b292      	uxth	r2, r2
 800327c:	801a      	strh	r2, [r3, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 800327e:	e002      	b.n	8003286 <LCD_IO_WriteCmd8DataFill16+0x22>
    *(volatile uint16_t *)LCD_ADDR_DATA = Data;
 8003280:	4a06      	ldr	r2, [pc, #24]	; (800329c <LCD_IO_WriteCmd8DataFill16+0x38>)
 8003282:	88bb      	ldrh	r3, [r7, #4]
 8003284:	8013      	strh	r3, [r2, #0]
  while(Size--)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	1e5a      	subs	r2, r3, #1
 800328a:	603a      	str	r2, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d1f7      	bne.n	8003280 <LCD_IO_WriteCmd8DataFill16+0x1c>

  #else
  LCD_IO_WriteMultiData16(&Data, Size, 0);
  #endif
}
 8003290:	bf00      	nop
 8003292:	370c      	adds	r7, #12
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr
 800329c:	600ffffe 	.word	0x600ffffe

080032a0 <LCD_IO_WriteCmd8MultipleData8>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size)
{
 80032a0:	b480      	push	{r7}
 80032a2:	b085      	sub	sp, #20
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	4603      	mov	r3, r0
 80032a8:	60b9      	str	r1, [r7, #8]
 80032aa:	607a      	str	r2, [r7, #4]
 80032ac:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_BASE = (uint16_t)Cmd;
 80032ae:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80032b2:	7bfa      	ldrb	r2, [r7, #15]
 80032b4:	b292      	uxth	r2, r2
 80032b6:	801a      	strh	r2, [r3, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 80032b8:	e007      	b.n	80032ca <LCD_IO_WriteCmd8MultipleData8+0x2a>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = (uint16_t)*pData;
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	781a      	ldrb	r2, [r3, #0]
 80032be:	4b08      	ldr	r3, [pc, #32]	; (80032e0 <LCD_IO_WriteCmd8MultipleData8+0x40>)
 80032c0:	b292      	uxth	r2, r2
 80032c2:	801a      	strh	r2, [r3, #0]
    pData++;
 80032c4:	68bb      	ldr	r3, [r7, #8]
 80032c6:	3301      	adds	r3, #1
 80032c8:	60bb      	str	r3, [r7, #8]
  while(Size--)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	1e5a      	subs	r2, r3, #1
 80032ce:	607a      	str	r2, [r7, #4]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d1f2      	bne.n	80032ba <LCD_IO_WriteCmd8MultipleData8+0x1a>
  }

  #else
  LCD_IO_WriteMultiData8(pData, Size, 1);
  #endif
}
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	600ffffe 	.word	0x600ffffe

080032e4 <LCD_IO_WriteCmd8MultipleData16>:

//-----------------------------------------------------------------------------
void LCD_IO_WriteCmd8MultipleData16(uint8_t Cmd, uint16_t *pData, uint32_t Size)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	4603      	mov	r3, r0
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
 80032f0:	73fb      	strb	r3, [r7, #15]
  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_BASE = (uint16_t)Cmd;
 80032f2:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 80032f6:	7bfa      	ldrb	r2, [r7, #15]
 80032f8:	b292      	uxth	r2, r2
 80032fa:	801a      	strh	r2, [r3, #0]

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 80032fc:	e006      	b.n	800330c <LCD_IO_WriteCmd8MultipleData16+0x28>
  {
    *(volatile uint16_t *)LCD_ADDR_DATA = *pData;
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <LCD_IO_WriteCmd8MultipleData16+0x40>)
 8003300:	68bb      	ldr	r3, [r7, #8]
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	8013      	strh	r3, [r2, #0]
    pData++;
 8003306:	68bb      	ldr	r3, [r7, #8]
 8003308:	3302      	adds	r3, #2
 800330a:	60bb      	str	r3, [r7, #8]
  while(Size--)
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	1e5a      	subs	r2, r3, #1
 8003310:	607a      	str	r2, [r7, #4]
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1f3      	bne.n	80032fe <LCD_IO_WriteCmd8MultipleData16+0x1a>
  }

  #else
  LCD_IO_WriteMultiData16(pData, Size, 1);
  #endif
}
 8003316:	bf00      	nop
 8003318:	3714      	adds	r7, #20
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
 8003322:	bf00      	nop
 8003324:	600ffffe 	.word	0x600ffffe

08003328 <LCD_IO_ReadCmd8MultipleData8>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData8(uint8_t Cmd, uint8_t *pData, uint32_t Size, uint32_t DummySize)
{
 8003328:	b480      	push	{r7}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60b9      	str	r1, [r7, #8]
 8003330:	607a      	str	r2, [r7, #4]
 8003332:	603b      	str	r3, [r7, #0]
 8003334:	4603      	mov	r3, r0
 8003336:	73fb      	strb	r3, [r7, #15]
  #elif   defined(__CC_ARM)
  uint16_t DummyData;
  #endif

  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_BASE = (uint16_t)Cmd;
 8003338:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 800333c:	7bfa      	ldrb	r2, [r7, #15]
 800333e:	b292      	uxth	r2, r2
 8003340:	801a      	strh	r2, [r3, #0]

  while(DummySize--)
 8003342:	e002      	b.n	800334a <LCD_IO_ReadCmd8MultipleData8+0x22>
    DummyData = *(volatile uint16_t *)LCD_ADDR_DATA;
 8003344:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <LCD_IO_ReadCmd8MultipleData8+0x58>)
 8003346:	881b      	ldrh	r3, [r3, #0]
 8003348:	82fb      	strh	r3, [r7, #22]
  while(DummySize--)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	1e5a      	subs	r2, r3, #1
 800334e:	603a      	str	r2, [r7, #0]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d1f7      	bne.n	8003344 <LCD_IO_ReadCmd8MultipleData8+0x1c>

  #if DMANUM(LCD_DMA) == 0
  while(Size--)
 8003354:	e008      	b.n	8003368 <LCD_IO_ReadCmd8MultipleData8+0x40>
  {
    *pData = (uint8_t)(*(volatile uint16_t *)LCD_ADDR_DATA);
 8003356:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <LCD_IO_ReadCmd8MultipleData8+0x58>)
 8003358:	881b      	ldrh	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	b2da      	uxtb	r2, r3
 800335e:	68bb      	ldr	r3, [r7, #8]
 8003360:	701a      	strb	r2, [r3, #0]
    pData++;
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	3301      	adds	r3, #1
 8003366:	60bb      	str	r3, [r7, #8]
  while(Size--)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	1e5a      	subs	r2, r3, #1
 800336c:	607a      	str	r2, [r7, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1f1      	bne.n	8003356 <LCD_IO_ReadCmd8MultipleData8+0x2e>
  }

  #else
  LCD_IO_ReadMultiData8(pData, Size);
  #endif
}
 8003372:	bf00      	nop
 8003374:	371c      	adds	r7, #28
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr
 800337e:	bf00      	nop
 8003380:	600ffffe 	.word	0x600ffffe

08003384 <LCD_IO_ReadCmd8MultipleData24to16>:
  #endif
}

//-----------------------------------------------------------------------------
void LCD_IO_ReadCmd8MultipleData24to16(uint8_t Cmd, uint16_t *pData, uint32_t Size, uint32_t DummySize)
{
 8003384:	b480      	push	{r7}
 8003386:	b087      	sub	sp, #28
 8003388:	af00      	add	r7, sp, #0
 800338a:	60b9      	str	r1, [r7, #8]
 800338c:	607a      	str	r2, [r7, #4]
 800338e:	603b      	str	r3, [r7, #0]
 8003390:	4603      	mov	r3, r0
 8003392:	73fb      	strb	r3, [r7, #15]
  #elif   defined(__CC_ARM)
  uint16_t DummyData;
  #endif

  WaitForDmaEnd();
  *(volatile uint16_t *)LCD_ADDR_BASE = (uint16_t)Cmd;
 8003394:	f04f 43c0 	mov.w	r3, #1610612736	; 0x60000000
 8003398:	7bfa      	ldrb	r2, [r7, #15]
 800339a:	b292      	uxth	r2, r2
 800339c:	801a      	strh	r2, [r3, #0]

  while(DummySize--)
 800339e:	e002      	b.n	80033a6 <LCD_IO_ReadCmd8MultipleData24to16+0x22>
    DummyData = *(volatile uint16_t *)LCD_ADDR_DATA;
 80033a0:	4b2e      	ldr	r3, [pc, #184]	; (800345c <LCD_IO_ReadCmd8MultipleData24to16+0xd8>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	82fb      	strh	r3, [r7, #22]
  while(DummySize--)
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	1e5a      	subs	r2, r3, #1
 80033aa:	603a      	str	r2, [r7, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d1f7      	bne.n	80033a0 <LCD_IO_ReadCmd8MultipleData24to16+0x1c>

  while(Size--)
 80033b0:	e049      	b.n	8003446 <LCD_IO_ReadCmd8MultipleData24to16+0xc2>
  {
    u.rgb888_16[0] = *(volatile uint16_t*)LCD_ADDR_DATA;
 80033b2:	4b2a      	ldr	r3, [pc, #168]	; (800345c <LCD_IO_ReadCmd8MultipleData24to16+0xd8>)
 80033b4:	881b      	ldrh	r3, [r3, #0]
 80033b6:	b29b      	uxth	r3, r3
 80033b8:	823b      	strh	r3, [r7, #16]
    u.rgb888_16[1] = *(volatile uint16_t*)LCD_ADDR_DATA;
 80033ba:	4b28      	ldr	r3, [pc, #160]	; (800345c <LCD_IO_ReadCmd8MultipleData24to16+0xd8>)
 80033bc:	881b      	ldrh	r3, [r3, #0]
 80033be:	b29b      	uxth	r3, r3
 80033c0:	827b      	strh	r3, [r7, #18]
    u.rgb888_16[2] = *(volatile uint16_t*)LCD_ADDR_DATA;
 80033c2:	4b26      	ldr	r3, [pc, #152]	; (800345c <LCD_IO_ReadCmd8MultipleData24to16+0xd8>)
 80033c4:	881b      	ldrh	r3, [r3, #0]
 80033c6:	b29b      	uxth	r3, r3
 80033c8:	82bb      	strh	r3, [r7, #20]

    *pData = ((u.rgb888[1] & 0xF8) << 8 | (u.rgb888[0] & 0xFC) << 3 | u.rgb888[3] >> 3);
 80033ca:	7c7b      	ldrb	r3, [r7, #17]
 80033cc:	021b      	lsls	r3, r3, #8
 80033ce:	b21b      	sxth	r3, r3
 80033d0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80033d4:	f023 0307 	bic.w	r3, r3, #7
 80033d8:	b21a      	sxth	r2, r3
 80033da:	7c3b      	ldrb	r3, [r7, #16]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	b21b      	sxth	r3, r3
 80033e0:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 80033e4:	b21b      	sxth	r3, r3
 80033e6:	4313      	orrs	r3, r2
 80033e8:	b21a      	sxth	r2, r3
 80033ea:	7cfb      	ldrb	r3, [r7, #19]
 80033ec:	08db      	lsrs	r3, r3, #3
 80033ee:	b2db      	uxtb	r3, r3
 80033f0:	b21b      	sxth	r3, r3
 80033f2:	4313      	orrs	r3, r2
 80033f4:	b21b      	sxth	r3, r3
 80033f6:	b29a      	uxth	r2, r3
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	801a      	strh	r2, [r3, #0]
    pData++;
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	3302      	adds	r3, #2
 8003400:	60bb      	str	r3, [r7, #8]
    if(Size)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d01e      	beq.n	8003446 <LCD_IO_ReadCmd8MultipleData24to16+0xc2>
    {
      *pData = ((u.rgb888[2] & 0xF8) << 8 | (u.rgb888[5] & 0xFC) << 3 | u.rgb888[4] >> 3);
 8003408:	7cbb      	ldrb	r3, [r7, #18]
 800340a:	021b      	lsls	r3, r3, #8
 800340c:	b21b      	sxth	r3, r3
 800340e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8003412:	f023 0307 	bic.w	r3, r3, #7
 8003416:	b21a      	sxth	r2, r3
 8003418:	7d7b      	ldrb	r3, [r7, #21]
 800341a:	00db      	lsls	r3, r3, #3
 800341c:	b21b      	sxth	r3, r3
 800341e:	f403 63fc 	and.w	r3, r3, #2016	; 0x7e0
 8003422:	b21b      	sxth	r3, r3
 8003424:	4313      	orrs	r3, r2
 8003426:	b21a      	sxth	r2, r3
 8003428:	7d3b      	ldrb	r3, [r7, #20]
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	b2db      	uxtb	r3, r3
 800342e:	b21b      	sxth	r3, r3
 8003430:	4313      	orrs	r3, r2
 8003432:	b21b      	sxth	r3, r3
 8003434:	b29a      	uxth	r2, r3
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	801a      	strh	r2, [r3, #0]
      pData++;
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	3302      	adds	r3, #2
 800343e:	60bb      	str	r3, [r7, #8]
      Size--;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	3b01      	subs	r3, #1
 8003444:	607b      	str	r3, [r7, #4]
  while(Size--)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	1e5a      	subs	r2, r3, #1
 800344a:	607a      	str	r2, [r7, #4]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1b0      	bne.n	80033b2 <LCD_IO_ReadCmd8MultipleData24to16+0x2e>
    }
  }
}
 8003450:	bf00      	nop
 8003452:	371c      	adds	r7, #28
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr
 800345c:	600ffffe 	.word	0x600ffffe

08003460 <BSP_LCD_Init>:
  * @brief  Initializes the LCD.
  * @param  None
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{ 
 8003460:	b580      	push	{r7, lr}
 8003462:	b082      	sub	sp, #8
 8003464:	af00      	add	r7, sp, #0
  uint8_t ret = LCD_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	71fb      	strb	r3, [r7, #7]

  /* LCD Init */   
  lcd_drv->Init();
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <BSP_LCD_Init+0x34>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4798      	blx	r3
  
  /* Default value for draw propriety */
  DrawProp.BackColor = LCD_DEFAULT_BACKCOLOR;
 8003472:	4b09      	ldr	r3, [pc, #36]	; (8003498 <BSP_LCD_Init+0x38>)
 8003474:	2200      	movs	r2, #0
 8003476:	605a      	str	r2, [r3, #4]
  DrawProp.TextColor = LCD_DEFAULT_TEXTCOLOR;
 8003478:	4b07      	ldr	r3, [pc, #28]	; (8003498 <BSP_LCD_Init+0x38>)
 800347a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800347e:	601a      	str	r2, [r3, #0]
  DrawProp.pFont     = &LCD_DEFAULT_FONT;
 8003480:	4b05      	ldr	r3, [pc, #20]	; (8003498 <BSP_LCD_Init+0x38>)
 8003482:	4a06      	ldr	r2, [pc, #24]	; (800349c <BSP_LCD_Init+0x3c>)
 8003484:	609a      	str	r2, [r3, #8]
  /* Clear the LCD screen */
  #if LCD_INIT_CLEAR == 1
  BSP_LCD_Clear(LCD_DEFAULT_BACKCOLOR);
  #endif
  
  ret = LCD_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	71fb      	strb	r3, [r7, #7]
  
  return ret;
 800348a:	79fb      	ldrb	r3, [r7, #7]
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000048 	.word	0x20000048
 8003498:	20000564 	.word	0x20000564
 800349c:	20000054 	.word	0x20000054

080034a0 <BSP_LCD_GetXSize>:
  * @brief  Gets the LCD X size.
  * @param  None    
  * @retval Used LCD X size
  */
uint16_t BSP_LCD_GetXSize(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelWidth());
 80034a4:	4b03      	ldr	r3, [pc, #12]	; (80034b4 <BSP_LCD_GetXSize+0x14>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034aa:	4798      	blx	r3
 80034ac:	4603      	mov	r3, r0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	20000048 	.word	0x20000048

080034b8 <BSP_LCD_GetYSize>:
  * @brief  Gets the LCD Y size.
  * @param  None   
  * @retval Used LCD Y size
  */
uint16_t BSP_LCD_GetYSize(void)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	af00      	add	r7, sp, #0
  return(lcd_drv->GetLcdPixelHeight());
 80034bc:	4b03      	ldr	r3, [pc, #12]	; (80034cc <BSP_LCD_GetYSize+0x14>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034c2:	4798      	blx	r3
 80034c4:	4603      	mov	r3, r0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	20000048 	.word	0x20000048

080034d0 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint16_t Color)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	4603      	mov	r3, r0
 80034d8:	80fb      	strh	r3, [r7, #6]
  DrawProp.TextColor = Color;
 80034da:	88fb      	ldrh	r3, [r7, #6]
 80034dc:	4a03      	ldr	r2, [pc, #12]	; (80034ec <BSP_LCD_SetTextColor+0x1c>)
 80034de:	6013      	str	r3, [r2, #0]
}
 80034e0:	bf00      	nop
 80034e2:	370c      	adds	r7, #12
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr
 80034ec:	20000564 	.word	0x20000564

080034f0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Background color code RGB(5-6-5)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint16_t Color)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b083      	sub	sp, #12
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	4603      	mov	r3, r0
 80034f8:	80fb      	strh	r3, [r7, #6]
  DrawProp.BackColor = Color;
 80034fa:	88fb      	ldrh	r3, [r7, #6]
 80034fc:	4a03      	ldr	r2, [pc, #12]	; (800350c <BSP_LCD_SetBackColor+0x1c>)
 80034fe:	6053      	str	r3, [r2, #4]
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr
 800350c:	20000564 	.word	0x20000564

08003510 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint16_t Color)
{
 8003510:	b5b0      	push	{r4, r5, r7, lr}
 8003512:	b084      	sub	sp, #16
 8003514:	af02      	add	r7, sp, #8
 8003516:	4603      	mov	r3, r0
 8003518:	80fb      	strh	r3, [r7, #6]
  lcd_drv->FillRect(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), Color);
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <BSP_LCD_Clear+0x38>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	6b9c      	ldr	r4, [r3, #56]	; 0x38
 8003520:	f7ff ffbe 	bl	80034a0 <BSP_LCD_GetXSize>
 8003524:	4603      	mov	r3, r0
 8003526:	461d      	mov	r5, r3
 8003528:	f7ff ffc6 	bl	80034b8 <BSP_LCD_GetYSize>
 800352c:	4603      	mov	r3, r0
 800352e:	461a      	mov	r2, r3
 8003530:	88fb      	ldrh	r3, [r7, #6]
 8003532:	9300      	str	r3, [sp, #0]
 8003534:	4613      	mov	r3, r2
 8003536:	462a      	mov	r2, r5
 8003538:	2100      	movs	r1, #0
 800353a:	2000      	movs	r0, #0
 800353c:	47a0      	blx	r4
}
 800353e:	bf00      	nop
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bdb0      	pop	{r4, r5, r7, pc}
 8003546:	bf00      	nop
 8003548:	20000048 	.word	0x20000048

0800354c <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	4603      	mov	r3, r0
 8003554:	80fb      	strh	r3, [r7, #6]
 8003556:	460b      	mov	r3, r1
 8003558:	80bb      	strh	r3, [r7, #4]
 800355a:	4613      	mov	r3, r2
 800355c:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <BSP_LCD_DisplayChar+0x50>)
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	78fb      	ldrb	r3, [r7, #3]
 8003566:	3b20      	subs	r3, #32
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003568:	490c      	ldr	r1, [pc, #48]	; (800359c <BSP_LCD_DisplayChar+0x50>)
 800356a:	6889      	ldr	r1, [r1, #8]
 800356c:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 800356e:	fb01 f103 	mul.w	r1, r1, r3
    DrawProp.pFont->Height * ((DrawProp.pFont->Width + 7) / 8)]);
 8003572:	4b0a      	ldr	r3, [pc, #40]	; (800359c <BSP_LCD_DisplayChar+0x50>)
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	889b      	ldrh	r3, [r3, #4]
 8003578:	3307      	adds	r3, #7
 800357a:	2b00      	cmp	r3, #0
 800357c:	da00      	bge.n	8003580 <BSP_LCD_DisplayChar+0x34>
 800357e:	3307      	adds	r3, #7
 8003580:	10db      	asrs	r3, r3, #3
 8003582:	fb03 f301 	mul.w	r3, r3, r1
  DrawChar(Xpos, Ypos, &DrawProp.pFont->table[(Ascii-' ') *\
 8003586:	441a      	add	r2, r3
 8003588:	88b9      	ldrh	r1, [r7, #4]
 800358a:	88fb      	ldrh	r3, [r7, #6]
 800358c:	4618      	mov	r0, r3
 800358e:	f000 fb95 	bl	8003cbc <DrawChar>
}
 8003592:	bf00      	nop
 8003594:	3708      	adds	r7, #8
 8003596:	46bd      	mov	sp, r7
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	20000564 	.word	0x20000564

080035a0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Line_ModeTypdef Mode)
{
 80035a0:	b590      	push	{r4, r7, lr}
 80035a2:	b089      	sub	sp, #36	; 0x24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	60ba      	str	r2, [r7, #8]
 80035a8:	461a      	mov	r2, r3
 80035aa:	4603      	mov	r3, r0
 80035ac:	81fb      	strh	r3, [r7, #14]
 80035ae:	460b      	mov	r3, r1
 80035b0:	81bb      	strh	r3, [r7, #12]
 80035b2:	4613      	mov	r3, r2
 80035b4:	71fb      	strb	r3, [r7, #7]
  uint16_t refcolumn = 1, i = 0;
 80035b6:	2301      	movs	r3, #1
 80035b8:	83fb      	strh	r3, [r7, #30]
 80035ba:	2300      	movs	r3, #0
 80035bc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80035ca:	e002      	b.n	80035d2 <BSP_LCD_DisplayStringAt+0x32>
 80035cc:	69bb      	ldr	r3, [r7, #24]
 80035ce:	3301      	adds	r3, #1
 80035d0:	61bb      	str	r3, [r7, #24]
 80035d2:	697b      	ldr	r3, [r7, #20]
 80035d4:	1c5a      	adds	r2, r3, #1
 80035d6:	617a      	str	r2, [r7, #20]
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f6      	bne.n	80035cc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp.pFont->Width);
 80035de:	f7ff ff5f 	bl	80034a0 <BSP_LCD_GetXSize>
 80035e2:	4603      	mov	r3, r0
 80035e4:	461a      	mov	r2, r3
 80035e6:	4b33      	ldr	r3, [pc, #204]	; (80036b4 <BSP_LCD_DisplayStringAt+0x114>)
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	889b      	ldrh	r3, [r3, #4]
 80035ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	2b02      	cmp	r3, #2
 80035f8:	d014      	beq.n	8003624 <BSP_LCD_DisplayStringAt+0x84>
 80035fa:	2b03      	cmp	r3, #3
 80035fc:	d00f      	beq.n	800361e <BSP_LCD_DisplayStringAt+0x7e>
 80035fe:	2b01      	cmp	r3, #1
 8003600:	d11e      	bne.n	8003640 <BSP_LCD_DisplayStringAt+0xa0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp.pFont->Width) / 2;
 8003602:	693a      	ldr	r2, [r7, #16]
 8003604:	69bb      	ldr	r3, [r7, #24]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	4a2a      	ldr	r2, [pc, #168]	; (80036b4 <BSP_LCD_DisplayStringAt+0x114>)
 800360a:	6892      	ldr	r2, [r2, #8]
 800360c:	8892      	ldrh	r2, [r2, #4]
 800360e:	fb02 f303 	mul.w	r3, r2, r3
 8003612:	085b      	lsrs	r3, r3, #1
 8003614:	b29a      	uxth	r2, r3
 8003616:	89fb      	ldrh	r3, [r7, #14]
 8003618:	4413      	add	r3, r2
 800361a:	83fb      	strh	r3, [r7, #30]
      break;
 800361c:	e013      	b.n	8003646 <BSP_LCD_DisplayStringAt+0xa6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 800361e:	89fb      	ldrh	r3, [r7, #14]
 8003620:	83fb      	strh	r3, [r7, #30]
      break;
 8003622:	e010      	b.n	8003646 <BSP_LCD_DisplayStringAt+0xa6>
    }
  case RIGHT_MODE:
    {
      refcolumn =  - Xpos + ((xsize - size)*DrawProp.pFont->Width);
 8003624:	693a      	ldr	r2, [r7, #16]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	b29a      	uxth	r2, r3
 800362c:	4b21      	ldr	r3, [pc, #132]	; (80036b4 <BSP_LCD_DisplayStringAt+0x114>)
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	889b      	ldrh	r3, [r3, #4]
 8003632:	fb12 f303 	smulbb	r3, r2, r3
 8003636:	b29a      	uxth	r2, r3
 8003638:	89fb      	ldrh	r3, [r7, #14]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	83fb      	strh	r3, [r7, #30]
      break;
 800363e:	e002      	b.n	8003646 <BSP_LCD_DisplayStringAt+0xa6>
    }    
  default:
    {
      refcolumn = Xpos;
 8003640:	89fb      	ldrh	r3, [r7, #14]
 8003642:	83fb      	strh	r3, [r7, #30]
      break;
 8003644:	bf00      	nop
    }
  }
  
  /* Send the string character by character on lCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 8003646:	e012      	b.n	800366e <BSP_LCD_DisplayStringAt+0xce>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(refcolumn, Ypos, *Text);
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	781a      	ldrb	r2, [r3, #0]
 800364c:	89b9      	ldrh	r1, [r7, #12]
 800364e:	8bfb      	ldrh	r3, [r7, #30]
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff ff7b 	bl	800354c <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp.pFont->Width;
 8003656:	4b17      	ldr	r3, [pc, #92]	; (80036b4 <BSP_LCD_DisplayStringAt+0x114>)
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	889a      	ldrh	r2, [r3, #4]
 800365c:	8bfb      	ldrh	r3, [r7, #30]
 800365e:	4413      	add	r3, r2
 8003660:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	3301      	adds	r3, #1
 8003666:	60bb      	str	r3, [r7, #8]
    i++;
 8003668:	8bbb      	ldrh	r3, [r7, #28]
 800366a:	3301      	adds	r3, #1
 800366c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp.pFont->Width)) & 0xFFFF) >= DrawProp.pFont->Width))
 800366e:	68bb      	ldr	r3, [r7, #8]
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	bf14      	ite	ne
 8003676:	2301      	movne	r3, #1
 8003678:	2300      	moveq	r3, #0
 800367a:	b2dc      	uxtb	r4, r3
 800367c:	f7ff ff10 	bl	80034a0 <BSP_LCD_GetXSize>
 8003680:	4603      	mov	r3, r0
 8003682:	4619      	mov	r1, r3
 8003684:	8bbb      	ldrh	r3, [r7, #28]
 8003686:	4a0b      	ldr	r2, [pc, #44]	; (80036b4 <BSP_LCD_DisplayStringAt+0x114>)
 8003688:	6892      	ldr	r2, [r2, #8]
 800368a:	8892      	ldrh	r2, [r2, #4]
 800368c:	fb02 f303 	mul.w	r3, r2, r3
 8003690:	1acb      	subs	r3, r1, r3
 8003692:	b29b      	uxth	r3, r3
 8003694:	4a07      	ldr	r2, [pc, #28]	; (80036b4 <BSP_LCD_DisplayStringAt+0x114>)
 8003696:	6892      	ldr	r2, [r2, #8]
 8003698:	8892      	ldrh	r2, [r2, #4]
 800369a:	4293      	cmp	r3, r2
 800369c:	bfac      	ite	ge
 800369e:	2301      	movge	r3, #1
 80036a0:	2300      	movlt	r3, #0
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	4023      	ands	r3, r4
 80036a6:	b2db      	uxtb	r3, r3
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1cd      	bne.n	8003648 <BSP_LCD_DisplayStringAt+0xa8>
  }
}
 80036ac:	bf00      	nop
 80036ae:	3724      	adds	r7, #36	; 0x24
 80036b0:	46bd      	mov	sp, r7
 80036b2:	bd90      	pop	{r4, r7, pc}
 80036b4:	20000564 	.word	0x20000564

080036b8 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in RGB mode (5-6-5)  
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint16_t RGB_Code)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b082      	sub	sp, #8
 80036bc:	af00      	add	r7, sp, #0
 80036be:	4603      	mov	r3, r0
 80036c0:	80fb      	strh	r3, [r7, #6]
 80036c2:	460b      	mov	r3, r1
 80036c4:	80bb      	strh	r3, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	807b      	strh	r3, [r7, #2]
  if(lcd_drv->WritePixel != NULL)
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <BSP_LCD_DrawPixel+0x34>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	695b      	ldr	r3, [r3, #20]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d006      	beq.n	80036e2 <BSP_LCD_DrawPixel+0x2a>
  {
    lcd_drv->WritePixel(Xpos, Ypos, RGB_Code);
 80036d4:	4b05      	ldr	r3, [pc, #20]	; (80036ec <BSP_LCD_DrawPixel+0x34>)
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	887a      	ldrh	r2, [r7, #2]
 80036dc:	88b9      	ldrh	r1, [r7, #4]
 80036de:	88f8      	ldrh	r0, [r7, #6]
 80036e0:	4798      	blx	r3
  }
}
 80036e2:	bf00      	nop
 80036e4:	3708      	adds	r7, #8
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	20000048 	.word	0x20000048

080036f0 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 80036f0:	b590      	push	{r4, r7, lr}
 80036f2:	b085      	sub	sp, #20
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	4603      	mov	r3, r0
 80036f8:	80fb      	strh	r3, [r7, #6]
 80036fa:	460b      	mov	r3, r1
 80036fc:	80bb      	strh	r3, [r7, #4]
 80036fe:	4613      	mov	r3, r2
 8003700:	807b      	strh	r3, [r7, #2]
  uint32_t index = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	60fb      	str	r3, [r7, #12]
  
  if(lcd_drv->DrawHLine != NULL)
 8003706:	4b15      	ldr	r3, [pc, #84]	; (800375c <BSP_LCD_DrawHLine+0x6c>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6a1b      	ldr	r3, [r3, #32]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <BSP_LCD_DrawHLine+0x36>
  {
    lcd_drv->DrawHLine(DrawProp.TextColor, Xpos, Ypos, Length);
 8003710:	4b12      	ldr	r3, [pc, #72]	; (800375c <BSP_LCD_DrawHLine+0x6c>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	6a1c      	ldr	r4, [r3, #32]
 8003716:	4b12      	ldr	r3, [pc, #72]	; (8003760 <BSP_LCD_DrawHLine+0x70>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	b298      	uxth	r0, r3
 800371c:	887b      	ldrh	r3, [r7, #2]
 800371e:	88ba      	ldrh	r2, [r7, #4]
 8003720:	88f9      	ldrh	r1, [r7, #6]
 8003722:	47a0      	blx	r4
    for(index = 0; index < Length; index++)
    {
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
    }
  }
}
 8003724:	e015      	b.n	8003752 <BSP_LCD_DrawHLine+0x62>
    for(index = 0; index < Length; index++)
 8003726:	2300      	movs	r3, #0
 8003728:	60fb      	str	r3, [r7, #12]
 800372a:	e00e      	b.n	800374a <BSP_LCD_DrawHLine+0x5a>
      BSP_LCD_DrawPixel((Xpos + index), Ypos, DrawProp.TextColor);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	b29a      	uxth	r2, r3
 8003730:	88fb      	ldrh	r3, [r7, #6]
 8003732:	4413      	add	r3, r2
 8003734:	b298      	uxth	r0, r3
 8003736:	4b0a      	ldr	r3, [pc, #40]	; (8003760 <BSP_LCD_DrawHLine+0x70>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	b29a      	uxth	r2, r3
 800373c:	88bb      	ldrh	r3, [r7, #4]
 800373e:	4619      	mov	r1, r3
 8003740:	f7ff ffba 	bl	80036b8 <BSP_LCD_DrawPixel>
    for(index = 0; index < Length; index++)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	3301      	adds	r3, #1
 8003748:	60fb      	str	r3, [r7, #12]
 800374a:	887b      	ldrh	r3, [r7, #2]
 800374c:	68fa      	ldr	r2, [r7, #12]
 800374e:	429a      	cmp	r2, r3
 8003750:	d3ec      	bcc.n	800372c <BSP_LCD_DrawHLine+0x3c>
}
 8003752:	bf00      	nop
 8003754:	3714      	adds	r7, #20
 8003756:	46bd      	mov	sp, r7
 8003758:	bd90      	pop	{r4, r7, pc}
 800375a:	bf00      	nop
 800375c:	20000048 	.word	0x20000048
 8003760:	20000564 	.word	0x20000564

08003764 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003764:	b590      	push	{r4, r7, lr}
 8003766:	b08b      	sub	sp, #44	; 0x2c
 8003768:	af00      	add	r7, sp, #0
 800376a:	4604      	mov	r4, r0
 800376c:	4608      	mov	r0, r1
 800376e:	4611      	mov	r1, r2
 8003770:	461a      	mov	r2, r3
 8003772:	4623      	mov	r3, r4
 8003774:	80fb      	strh	r3, [r7, #6]
 8003776:	4603      	mov	r3, r0
 8003778:	80bb      	strh	r3, [r7, #4]
 800377a:	460b      	mov	r3, r1
 800377c:	807b      	strh	r3, [r7, #2]
 800377e:	4613      	mov	r3, r2
 8003780:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003782:	2300      	movs	r3, #0
 8003784:	823b      	strh	r3, [r7, #16]
 8003786:	2300      	movs	r3, #0
 8003788:	81fb      	strh	r3, [r7, #14]
 800378a:	2300      	movs	r3, #0
 800378c:	84fb      	strh	r3, [r7, #38]	; 0x26
 800378e:	2300      	movs	r3, #0
 8003790:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003792:	2300      	movs	r3, #0
 8003794:	847b      	strh	r3, [r7, #34]	; 0x22
 8003796:	2300      	movs	r3, #0
 8003798:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0, 
 800379a:	2300      	movs	r3, #0
 800379c:	83fb      	strh	r3, [r7, #30]
 800379e:	2300      	movs	r3, #0
 80037a0:	83bb      	strh	r3, [r7, #28]
 80037a2:	2300      	movs	r3, #0
 80037a4:	837b      	strh	r3, [r7, #26]
 80037a6:	2300      	movs	r3, #0
 80037a8:	833b      	strh	r3, [r7, #24]
 80037aa:	2300      	movs	r3, #0
 80037ac:	82fb      	strh	r3, [r7, #22]
 80037ae:	2300      	movs	r3, #0
 80037b0:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80037b2:	2300      	movs	r3, #0
 80037b4:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80037b6:	887a      	ldrh	r2, [r7, #2]
 80037b8:	88fb      	ldrh	r3, [r7, #6]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b00      	cmp	r3, #0
 80037be:	bfb8      	it	lt
 80037c0:	425b      	neglt	r3, r3
 80037c2:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 80037c4:	883a      	ldrh	r2, [r7, #0]
 80037c6:	88bb      	ldrh	r3, [r7, #4]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	bfb8      	it	lt
 80037ce:	425b      	neglt	r3, r3
 80037d0:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 80037d2:	88fb      	ldrh	r3, [r7, #6]
 80037d4:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 80037d6:	88bb      	ldrh	r3, [r7, #4]
 80037d8:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 80037da:	887a      	ldrh	r2, [r7, #2]
 80037dc:	88fb      	ldrh	r3, [r7, #6]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d304      	bcc.n	80037ec <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 80037e2:	2301      	movs	r3, #1
 80037e4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80037e6:	2301      	movs	r3, #1
 80037e8:	843b      	strh	r3, [r7, #32]
 80037ea:	e005      	b.n	80037f8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80037ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80037f2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80037f6:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80037f8:	883a      	ldrh	r2, [r7, #0]
 80037fa:	88bb      	ldrh	r3, [r7, #4]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d304      	bcc.n	800380a <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003800:	2301      	movs	r3, #1
 8003802:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003804:	2301      	movs	r3, #1
 8003806:	83bb      	strh	r3, [r7, #28]
 8003808:	e005      	b.n	8003816 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800380a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800380e:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003810:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003814:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003816:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800381a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800381e:	429a      	cmp	r2, r3
 8003820:	db10      	blt.n	8003844 <BSP_LCD_DrawLine+0xe0>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003822:	2300      	movs	r3, #0
 8003824:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003826:	2300      	movs	r3, #0
 8003828:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800382a:	8a3b      	ldrh	r3, [r7, #16]
 800382c:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800382e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003832:	0fda      	lsrs	r2, r3, #31
 8003834:	4413      	add	r3, r2
 8003836:	105b      	asrs	r3, r3, #1
 8003838:	833b      	strh	r3, [r7, #24]
    numadd = deltay;
 800383a:	89fb      	ldrh	r3, [r7, #14]
 800383c:	82fb      	strh	r3, [r7, #22]
    numpixels = deltax;         /* There are more x-values than y-values */
 800383e:	8a3b      	ldrh	r3, [r7, #16]
 8003840:	82bb      	strh	r3, [r7, #20]
 8003842:	e00f      	b.n	8003864 <BSP_LCD_DrawLine+0x100>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003844:	2300      	movs	r3, #0
 8003846:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003848:	2300      	movs	r3, #0
 800384a:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800384c:	89fb      	ldrh	r3, [r7, #14]
 800384e:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003850:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003854:	0fda      	lsrs	r2, r3, #31
 8003856:	4413      	add	r3, r2
 8003858:	105b      	asrs	r3, r3, #1
 800385a:	833b      	strh	r3, [r7, #24]
    numadd = deltax;
 800385c:	8a3b      	ldrh	r3, [r7, #16]
 800385e:	82fb      	strh	r3, [r7, #22]
    numpixels = deltay;         /* There are more y-values than x-values */
 8003860:	89fb      	ldrh	r3, [r7, #14]
 8003862:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8003864:	2300      	movs	r3, #0
 8003866:	827b      	strh	r3, [r7, #18]
 8003868:	e031      	b.n	80038ce <BSP_LCD_DrawLine+0x16a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp.TextColor);  /* Draw the current pixel */
 800386a:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 800386c:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <BSP_LCD_DrawLine+0x180>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	b29b      	uxth	r3, r3
 8003874:	461a      	mov	r2, r3
 8003876:	f7ff ff1f 	bl	80036b8 <BSP_LCD_DrawPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 800387a:	8b3a      	ldrh	r2, [r7, #24]
 800387c:	8afb      	ldrh	r3, [r7, #22]
 800387e:	4413      	add	r3, r2
 8003880:	b29b      	uxth	r3, r3
 8003882:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003884:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003888:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800388c:	429a      	cmp	r2, r3
 800388e:	db0e      	blt.n	80038ae <BSP_LCD_DrawLine+0x14a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003890:	8b3a      	ldrh	r2, [r7, #24]
 8003892:	8b7b      	ldrh	r3, [r7, #26]
 8003894:	1ad3      	subs	r3, r2, r3
 8003896:	b29b      	uxth	r3, r3
 8003898:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 800389a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800389c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800389e:	4413      	add	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 80038a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038a6:	8bfb      	ldrh	r3, [r7, #30]
 80038a8:	4413      	add	r3, r2
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 80038ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80038b0:	8c3b      	ldrh	r3, [r7, #32]
 80038b2:	4413      	add	r3, r2
 80038b4:	b29b      	uxth	r3, r3
 80038b6:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 80038b8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80038ba:	8bbb      	ldrh	r3, [r7, #28]
 80038bc:	4413      	add	r3, r2
 80038be:	b29b      	uxth	r3, r3
 80038c0:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80038c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80038c6:	b29b      	uxth	r3, r3
 80038c8:	3301      	adds	r3, #1
 80038ca:	b29b      	uxth	r3, r3
 80038cc:	827b      	strh	r3, [r7, #18]
 80038ce:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80038d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	ddc7      	ble.n	800386a <BSP_LCD_DrawLine+0x106>
  }
}
 80038da:	bf00      	nop
 80038dc:	372c      	adds	r7, #44	; 0x2c
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd90      	pop	{r4, r7, pc}
 80038e2:	bf00      	nop
 80038e4:	20000564 	.word	0x20000564

080038e8 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	4603      	mov	r3, r0
 80038f0:	80fb      	strh	r3, [r7, #6]
 80038f2:	460b      	mov	r3, r1
 80038f4:	80bb      	strh	r3, [r7, #4]
 80038f6:	4613      	mov	r3, r2
 80038f8:	807b      	strh	r3, [r7, #2]
  int32_t  D;       /* Decision Variable */ 
  uint32_t  CurX;   /* Current X Value */
  uint32_t  CurY;   /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 80038fa:	887b      	ldrh	r3, [r7, #2]
 80038fc:	005b      	lsls	r3, r3, #1
 80038fe:	f1c3 0303 	rsb	r3, r3, #3
 8003902:	617b      	str	r3, [r7, #20]
  CurX = 0;
 8003904:	2300      	movs	r3, #0
 8003906:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003908:	887b      	ldrh	r3, [r7, #2]
 800390a:	60fb      	str	r3, [r7, #12]
  
  while (CurX <= CurY)
 800390c:	e097      	b.n	8003a3e <BSP_LCD_DrawCircle+0x156>
  {
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos - CurY), DrawProp.TextColor);
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	b29a      	uxth	r2, r3
 8003912:	88fb      	ldrh	r3, [r7, #6]
 8003914:	4413      	add	r3, r2
 8003916:	b298      	uxth	r0, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	b29b      	uxth	r3, r3
 800391c:	88ba      	ldrh	r2, [r7, #4]
 800391e:	1ad3      	subs	r3, r2, r3
 8003920:	b299      	uxth	r1, r3
 8003922:	4b4b      	ldr	r3, [pc, #300]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	b29b      	uxth	r3, r3
 8003928:	461a      	mov	r2, r3
 800392a:	f7ff fec5 	bl	80036b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos - CurY), DrawProp.TextColor);
 800392e:	693b      	ldr	r3, [r7, #16]
 8003930:	b29b      	uxth	r3, r3
 8003932:	88fa      	ldrh	r2, [r7, #6]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	b298      	uxth	r0, r3
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	b29b      	uxth	r3, r3
 800393c:	88ba      	ldrh	r2, [r7, #4]
 800393e:	1ad3      	subs	r3, r2, r3
 8003940:	b299      	uxth	r1, r3
 8003942:	4b43      	ldr	r3, [pc, #268]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	b29b      	uxth	r3, r3
 8003948:	461a      	mov	r2, r3
 800394a:	f7ff feb5 	bl	80036b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos - CurX), DrawProp.TextColor);
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	b29a      	uxth	r2, r3
 8003952:	88fb      	ldrh	r3, [r7, #6]
 8003954:	4413      	add	r3, r2
 8003956:	b298      	uxth	r0, r3
 8003958:	693b      	ldr	r3, [r7, #16]
 800395a:	b29b      	uxth	r3, r3
 800395c:	88ba      	ldrh	r2, [r7, #4]
 800395e:	1ad3      	subs	r3, r2, r3
 8003960:	b299      	uxth	r1, r3
 8003962:	4b3b      	ldr	r3, [pc, #236]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	b29b      	uxth	r3, r3
 8003968:	461a      	mov	r2, r3
 800396a:	f7ff fea5 	bl	80036b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos - CurX), DrawProp.TextColor);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	b29b      	uxth	r3, r3
 8003972:	88fa      	ldrh	r2, [r7, #6]
 8003974:	1ad3      	subs	r3, r2, r3
 8003976:	b298      	uxth	r0, r3
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	b29b      	uxth	r3, r3
 800397c:	88ba      	ldrh	r2, [r7, #4]
 800397e:	1ad3      	subs	r3, r2, r3
 8003980:	b299      	uxth	r1, r3
 8003982:	4b33      	ldr	r3, [pc, #204]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	b29b      	uxth	r3, r3
 8003988:	461a      	mov	r2, r3
 800398a:	f7ff fe95 	bl	80036b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurX), (Ypos + CurY), DrawProp.TextColor);
 800398e:	693b      	ldr	r3, [r7, #16]
 8003990:	b29a      	uxth	r2, r3
 8003992:	88fb      	ldrh	r3, [r7, #6]
 8003994:	4413      	add	r3, r2
 8003996:	b298      	uxth	r0, r3
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	b29a      	uxth	r2, r3
 800399c:	88bb      	ldrh	r3, [r7, #4]
 800399e:	4413      	add	r3, r2
 80039a0:	b299      	uxth	r1, r3
 80039a2:	4b2b      	ldr	r3, [pc, #172]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	b29b      	uxth	r3, r3
 80039a8:	461a      	mov	r2, r3
 80039aa:	f7ff fe85 	bl	80036b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurX), (Ypos + CurY), DrawProp.TextColor);
 80039ae:	693b      	ldr	r3, [r7, #16]
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	88fa      	ldrh	r2, [r7, #6]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	b298      	uxth	r0, r3
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	88bb      	ldrh	r3, [r7, #4]
 80039be:	4413      	add	r3, r2
 80039c0:	b299      	uxth	r1, r3
 80039c2:	4b23      	ldr	r3, [pc, #140]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	461a      	mov	r2, r3
 80039ca:	f7ff fe75 	bl	80036b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + CurY), (Ypos + CurX), DrawProp.TextColor);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	b29a      	uxth	r2, r3
 80039d2:	88fb      	ldrh	r3, [r7, #6]
 80039d4:	4413      	add	r3, r2
 80039d6:	b298      	uxth	r0, r3
 80039d8:	693b      	ldr	r3, [r7, #16]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	88bb      	ldrh	r3, [r7, #4]
 80039de:	4413      	add	r3, r2
 80039e0:	b299      	uxth	r1, r3
 80039e2:	4b1b      	ldr	r3, [pc, #108]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	f7ff fe65 	bl	80036b8 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - CurY), (Ypos + CurX), DrawProp.TextColor);   
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	88fa      	ldrh	r2, [r7, #6]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	b298      	uxth	r0, r3
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	b29a      	uxth	r2, r3
 80039fc:	88bb      	ldrh	r3, [r7, #4]
 80039fe:	4413      	add	r3, r2
 8003a00:	b299      	uxth	r1, r3
 8003a02:	4b13      	ldr	r3, [pc, #76]	; (8003a50 <BSP_LCD_DrawCircle+0x168>)
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	461a      	mov	r2, r3
 8003a0a:	f7ff fe55 	bl	80036b8 <BSP_LCD_DrawPixel>

    if (D < 0)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	da06      	bge.n	8003a22 <BSP_LCD_DrawCircle+0x13a>
    { 
      D += (CurX << 2) + 6;
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	009a      	lsls	r2, r3, #2
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	3306      	adds	r3, #6
 8003a1e:	617b      	str	r3, [r7, #20]
 8003a20:	e00a      	b.n	8003a38 <BSP_LCD_DrawCircle+0x150>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003a22:	693a      	ldr	r2, [r7, #16]
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	1ad3      	subs	r3, r2, r3
 8003a28:	009a      	lsls	r2, r3, #2
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	330a      	adds	r3, #10
 8003a30:	617b      	str	r3, [r7, #20]
      CurY--;
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3b01      	subs	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	429a      	cmp	r2, r3
 8003a44:	f67f af63 	bls.w	800390e <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003a48:	bf00      	nop
 8003a4a:	3718      	adds	r7, #24
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000564 	.word	0x20000564

08003a54 <BSP_LCD_DrawPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_DrawPolygon(pPoint Points, uint16_t PointCount)
{
 8003a54:	b590      	push	{r4, r7, lr}
 8003a56:	b085      	sub	sp, #20
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	460b      	mov	r3, r1
 8003a5e:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0;
 8003a60:	2300      	movs	r3, #0
 8003a62:	81fb      	strh	r3, [r7, #14]
 8003a64:	2300      	movs	r3, #0
 8003a66:	81bb      	strh	r3, [r7, #12]

  if(PointCount < 2)
 8003a68:	887b      	ldrh	r3, [r7, #2]
 8003a6a:	2b01      	cmp	r3, #1
 8003a6c:	d93b      	bls.n	8003ae6 <BSP_LCD_DrawPolygon+0x92>
  {
    return;
  }

  BSP_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a74:	b298      	uxth	r0, r3
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003a7c:	b299      	uxth	r1, r3
 8003a7e:	887b      	ldrh	r3, [r7, #2]
 8003a80:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a84:	3b01      	subs	r3, #1
 8003a86:	009b      	lsls	r3, r3, #2
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	4413      	add	r3, r2
 8003a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003a90:	b29c      	uxth	r4, r3
 8003a92:	887b      	ldrh	r3, [r7, #2]
 8003a94:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003a98:	3b01      	subs	r3, #1
 8003a9a:	009b      	lsls	r3, r3, #2
 8003a9c:	687a      	ldr	r2, [r7, #4]
 8003a9e:	4413      	add	r3, r2
 8003aa0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	4622      	mov	r2, r4
 8003aa8:	f7ff fe5c 	bl	8003764 <BSP_LCD_DrawLine>
  
  while(--PointCount)
 8003aac:	e014      	b.n	8003ad8 <BSP_LCD_DrawPolygon+0x84>
  {
    X = Points->X;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	881b      	ldrh	r3, [r3, #0]
 8003ab2:	81fb      	strh	r3, [r7, #14]
    Y = Points->Y;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	885b      	ldrh	r3, [r3, #2]
 8003ab8:	81bb      	strh	r3, [r7, #12]
    Points++;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3304      	adds	r3, #4
 8003abe:	607b      	str	r3, [r7, #4]
    BSP_LCD_DrawLine(X, Y, Points->X, Points->Y);
 8003ac0:	89f8      	ldrh	r0, [r7, #14]
 8003ac2:	89b9      	ldrh	r1, [r7, #12]
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003aca:	b29a      	uxth	r2, r3
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003ad2:	b29b      	uxth	r3, r3
 8003ad4:	f7ff fe46 	bl	8003764 <BSP_LCD_DrawLine>
  while(--PointCount)
 8003ad8:	887b      	ldrh	r3, [r7, #2]
 8003ada:	3b01      	subs	r3, #1
 8003adc:	807b      	strh	r3, [r7, #2]
 8003ade:	887b      	ldrh	r3, [r7, #2]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d1e4      	bne.n	8003aae <BSP_LCD_DrawPolygon+0x5a>
 8003ae4:	e000      	b.n	8003ae8 <BSP_LCD_DrawPolygon+0x94>
    return;
 8003ae6:	bf00      	nop
  }
}
 8003ae8:	3714      	adds	r7, #20
 8003aea:	46bd      	mov	sp, r7
 8003aec:	bd90      	pop	{r4, r7, pc}
	...

08003af0 <BSP_LCD_DrawBitmap>:
  * @param  Ypos: Bmp Y position in the LCD
  * @param  pBmp: Pointer to Bmp picture address
  * @retval None
  */
void BSP_LCD_DrawBitmap(uint16_t Xpos, uint16_t Ypos, uint8_t *pBmp)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b085      	sub	sp, #20
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	4603      	mov	r3, r0
 8003af8:	603a      	str	r2, [r7, #0]
 8003afa:	80fb      	strh	r3, [r7, #6]
 8003afc:	460b      	mov	r3, r1
 8003afe:	80bb      	strh	r3, [r7, #4]
  uint32_t height = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	60fb      	str	r3, [r7, #12]
  uint32_t width  = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60bb      	str	r3, [r7, #8]
  
  /* Read bitmap width */
  width = pBmp[18] + (pBmp[19] << 8) + (pBmp[20] << 16)  + (pBmp[21] << 24);
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	3312      	adds	r3, #18
 8003b0c:	781b      	ldrb	r3, [r3, #0]
 8003b0e:	461a      	mov	r2, r3
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	3313      	adds	r3, #19
 8003b14:	781b      	ldrb	r3, [r3, #0]
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	441a      	add	r2, r3
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	3314      	adds	r3, #20
 8003b1e:	781b      	ldrb	r3, [r3, #0]
 8003b20:	041b      	lsls	r3, r3, #16
 8003b22:	441a      	add	r2, r3
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	3315      	adds	r3, #21
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	061b      	lsls	r3, r3, #24
 8003b2c:	4413      	add	r3, r2
 8003b2e:	60bb      	str	r3, [r7, #8]

  /* Read bitmap height */
  height = pBmp[22] + (pBmp[23] << 8) + (pBmp[24] << 16)  + (pBmp[25] << 24);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	3316      	adds	r3, #22
 8003b34:	781b      	ldrb	r3, [r3, #0]
 8003b36:	461a      	mov	r2, r3
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	3317      	adds	r3, #23
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	021b      	lsls	r3, r3, #8
 8003b40:	441a      	add	r2, r3
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	3318      	adds	r3, #24
 8003b46:	781b      	ldrb	r3, [r3, #0]
 8003b48:	041b      	lsls	r3, r3, #16
 8003b4a:	441a      	add	r2, r3
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	3319      	adds	r3, #25
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	061b      	lsls	r3, r3, #24
 8003b54:	4413      	add	r3, r2
 8003b56:	60fb      	str	r3, [r7, #12]
  
  SetDisplayWindow(Xpos, Ypos, width, height);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	88b9      	ldrh	r1, [r7, #4]
 8003b62:	88f8      	ldrh	r0, [r7, #6]
 8003b64:	f000 fae4 	bl	8004130 <SetDisplayWindow>
  
  if(lcd_drv->DrawBitmap != NULL)
 8003b68:	4b0d      	ldr	r3, [pc, #52]	; (8003ba0 <BSP_LCD_DrawBitmap+0xb0>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d006      	beq.n	8003b80 <BSP_LCD_DrawBitmap+0x90>
  {
    lcd_drv->DrawBitmap(Xpos, Ypos, pBmp);
 8003b72:	4b0b      	ldr	r3, [pc, #44]	; (8003ba0 <BSP_LCD_DrawBitmap+0xb0>)
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b78:	88b9      	ldrh	r1, [r7, #4]
 8003b7a:	88f8      	ldrh	r0, [r7, #6]
 8003b7c:	683a      	ldr	r2, [r7, #0]
 8003b7e:	4798      	blx	r3
  } 
  SetDisplayWindow(0, 0, BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8003b80:	f7ff fc8e 	bl	80034a0 <BSP_LCD_GetXSize>
 8003b84:	4603      	mov	r3, r0
 8003b86:	461c      	mov	r4, r3
 8003b88:	f7ff fc96 	bl	80034b8 <BSP_LCD_GetYSize>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	4622      	mov	r2, r4
 8003b90:	2100      	movs	r1, #0
 8003b92:	2000      	movs	r0, #0
 8003b94:	f000 facc 	bl	8004130 <SetDisplayWindow>
}
 8003b98:	bf00      	nop
 8003b9a:	3714      	adds	r7, #20
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	20000048 	.word	0x20000048

08003ba4 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	4603      	mov	r3, r0
 8003bac:	80fb      	strh	r3, [r7, #6]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	80bb      	strh	r3, [r7, #4]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	807b      	strh	r3, [r7, #2]
  int32_t  D;        /* Decision Variable */ 
  uint32_t  CurX;    /* Current X Value */
  uint32_t  CurY;    /* Current Y Value */ 
  
  D = 3 - (Radius << 1);
 8003bb6:	887b      	ldrh	r3, [r7, #2]
 8003bb8:	005b      	lsls	r3, r3, #1
 8003bba:	f1c3 0303 	rsb	r3, r3, #3
 8003bbe:	617b      	str	r3, [r7, #20]

  CurX = 0;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
  CurY = Radius;
 8003bc4:	887b      	ldrh	r3, [r7, #2]
 8003bc6:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp.TextColor);
 8003bc8:	4b3b      	ldr	r3, [pc, #236]	; (8003cb8 <BSP_LCD_FillCircle+0x114>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	b29b      	uxth	r3, r3
 8003bce:	4618      	mov	r0, r3
 8003bd0:	f7ff fc7e 	bl	80034d0 <BSP_LCD_SetTextColor>

  while (CurX <= CurY)
 8003bd4:	e061      	b.n	8003c9a <BSP_LCD_FillCircle+0xf6>
  {
    if(CurY > 0) 
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d021      	beq.n	8003c20 <BSP_LCD_FillCircle+0x7c>
    {
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos + CurX, 2*CurY);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	88fa      	ldrh	r2, [r7, #6]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	b298      	uxth	r0, r3
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	88bb      	ldrh	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	b299      	uxth	r1, r3
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	f7ff fd79 	bl	80036f0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurY, Ypos - CurX, 2*CurY);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	b29b      	uxth	r3, r3
 8003c02:	88fa      	ldrh	r2, [r7, #6]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	b298      	uxth	r0, r3
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	88ba      	ldrh	r2, [r7, #4]
 8003c0e:	1ad3      	subs	r3, r2, r3
 8003c10:	b299      	uxth	r1, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	b29b      	uxth	r3, r3
 8003c16:	005b      	lsls	r3, r3, #1
 8003c18:	b29b      	uxth	r3, r3
 8003c1a:	461a      	mov	r2, r3
 8003c1c:	f7ff fd68 	bl	80036f0 <BSP_LCD_DrawHLine>
    }

    if(CurX > 0) 
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d021      	beq.n	8003c6a <BSP_LCD_FillCircle+0xc6>
    {
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos - CurY, 2*CurX);
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	b29b      	uxth	r3, r3
 8003c2a:	88fa      	ldrh	r2, [r7, #6]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	b298      	uxth	r0, r3
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	88ba      	ldrh	r2, [r7, #4]
 8003c36:	1ad3      	subs	r3, r2, r3
 8003c38:	b299      	uxth	r1, r3
 8003c3a:	693b      	ldr	r3, [r7, #16]
 8003c3c:	b29b      	uxth	r3, r3
 8003c3e:	005b      	lsls	r3, r3, #1
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	461a      	mov	r2, r3
 8003c44:	f7ff fd54 	bl	80036f0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - CurX, Ypos + CurY, 2*CurX);
 8003c48:	693b      	ldr	r3, [r7, #16]
 8003c4a:	b29b      	uxth	r3, r3
 8003c4c:	88fa      	ldrh	r2, [r7, #6]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	b298      	uxth	r0, r3
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	88bb      	ldrh	r3, [r7, #4]
 8003c58:	4413      	add	r3, r2
 8003c5a:	b299      	uxth	r1, r3
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	b29b      	uxth	r3, r3
 8003c60:	005b      	lsls	r3, r3, #1
 8003c62:	b29b      	uxth	r3, r3
 8003c64:	461a      	mov	r2, r3
 8003c66:	f7ff fd43 	bl	80036f0 <BSP_LCD_DrawHLine>
    }
    if (D < 0)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	da06      	bge.n	8003c7e <BSP_LCD_FillCircle+0xda>
    { 
      D += (CurX << 2) + 6;
 8003c70:	693b      	ldr	r3, [r7, #16]
 8003c72:	009a      	lsls	r2, r3, #2
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	4413      	add	r3, r2
 8003c78:	3306      	adds	r3, #6
 8003c7a:	617b      	str	r3, [r7, #20]
 8003c7c:	e00a      	b.n	8003c94 <BSP_LCD_FillCircle+0xf0>
    }
    else
    {
      D += ((CurX - CurY) << 2) + 10;
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	1ad3      	subs	r3, r2, r3
 8003c84:	009a      	lsls	r2, r3, #2
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	4413      	add	r3, r2
 8003c8a:	330a      	adds	r3, #10
 8003c8c:	617b      	str	r3, [r7, #20]
      CurY--;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3b01      	subs	r3, #1
 8003c92:	60fb      	str	r3, [r7, #12]
    }
    CurX++;
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	3301      	adds	r3, #1
 8003c98:	613b      	str	r3, [r7, #16]
  while (CurX <= CurY)
 8003c9a:	693a      	ldr	r2, [r7, #16]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d999      	bls.n	8003bd6 <BSP_LCD_FillCircle+0x32>
  }

  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003ca2:	887a      	ldrh	r2, [r7, #2]
 8003ca4:	88b9      	ldrh	r1, [r7, #4]
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7ff fe1d 	bl	80038e8 <BSP_LCD_DrawCircle>
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	20000564 	.word	0x20000564

08003cbc <DrawChar>:
  * @param  Ypos: Start column address
  * @param  pChar: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *pChar)
{
 8003cbc:	b580      	push	{r7, lr}
 8003cbe:	b08a      	sub	sp, #40	; 0x28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	4603      	mov	r3, r0
 8003cc4:	603a      	str	r2, [r7, #0]
 8003cc6:	80fb      	strh	r3, [r7, #6]
 8003cc8:	460b      	mov	r3, r1
 8003cca:	80bb      	strh	r3, [r7, #4]
  uint32_t counterh = 0, counterw = 0, index = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	627b      	str	r3, [r7, #36]	; 0x24
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	623b      	str	r3, [r7, #32]
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
  uint16_t height = 0, width = 0;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	82fb      	strh	r3, [r7, #22]
 8003cdc:	2300      	movs	r3, #0
 8003cde:	82bb      	strh	r3, [r7, #20]
  uint8_t offset = 0;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	74fb      	strb	r3, [r7, #19]
  uint8_t *pchar = NULL;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	60fb      	str	r3, [r7, #12]
  uint32_t line = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
  
  height = DrawProp.pFont->Height;
 8003cec:	4b63      	ldr	r3, [pc, #396]	; (8003e7c <DrawChar+0x1c0>)
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	88db      	ldrh	r3, [r3, #6]
 8003cf2:	82fb      	strh	r3, [r7, #22]
  width  = DrawProp.pFont->Width;
 8003cf4:	4b61      	ldr	r3, [pc, #388]	; (8003e7c <DrawChar+0x1c0>)
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	889b      	ldrh	r3, [r3, #4]
 8003cfa:	82bb      	strh	r3, [r7, #20]
  
  /* Fill bitmap header*/
  *(uint16_t *) (bitmap + 2) = (uint16_t)(height*width*2+OFFSET_BITMAP);
 8003cfc:	8afa      	ldrh	r2, [r7, #22]
 8003cfe:	8abb      	ldrh	r3, [r7, #20]
 8003d00:	fb12 f303 	smulbb	r3, r2, r3
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	331b      	adds	r3, #27
 8003d08:	b29b      	uxth	r3, r3
 8003d0a:	4a5d      	ldr	r2, [pc, #372]	; (8003e80 <DrawChar+0x1c4>)
 8003d0c:	005b      	lsls	r3, r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 4) = (uint16_t)((height*width*2+OFFSET_BITMAP)>>16);
 8003d12:	8afb      	ldrh	r3, [r7, #22]
 8003d14:	8aba      	ldrh	r2, [r7, #20]
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	331b      	adds	r3, #27
 8003d1c:	005b      	lsls	r3, r3, #1
 8003d1e:	141a      	asrs	r2, r3, #16
 8003d20:	4b58      	ldr	r3, [pc, #352]	; (8003e84 <DrawChar+0x1c8>)
 8003d22:	b292      	uxth	r2, r2
 8003d24:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 10) = OFFSET_BITMAP;
 8003d26:	4b58      	ldr	r3, [pc, #352]	; (8003e88 <DrawChar+0x1cc>)
 8003d28:	2236      	movs	r2, #54	; 0x36
 8003d2a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 18) = (uint16_t)(width);
 8003d2c:	4a57      	ldr	r2, [pc, #348]	; (8003e8c <DrawChar+0x1d0>)
 8003d2e:	8abb      	ldrh	r3, [r7, #20]
 8003d30:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 20) = (uint16_t)((width)>>16);
 8003d32:	8abb      	ldrh	r3, [r7, #20]
 8003d34:	141a      	asrs	r2, r3, #16
 8003d36:	4b56      	ldr	r3, [pc, #344]	; (8003e90 <DrawChar+0x1d4>)
 8003d38:	b292      	uxth	r2, r2
 8003d3a:	801a      	strh	r2, [r3, #0]
  *(uint16_t *) (bitmap + 22) = (uint16_t)(height);
 8003d3c:	4a55      	ldr	r2, [pc, #340]	; (8003e94 <DrawChar+0x1d8>)
 8003d3e:	8afb      	ldrh	r3, [r7, #22]
 8003d40:	8013      	strh	r3, [r2, #0]
  *(uint16_t *) (bitmap + 24) = (uint16_t)((height)>>16);
 8003d42:	8afb      	ldrh	r3, [r7, #22]
 8003d44:	141a      	asrs	r2, r3, #16
 8003d46:	4b54      	ldr	r3, [pc, #336]	; (8003e98 <DrawChar+0x1dc>)
 8003d48:	b292      	uxth	r2, r2
 8003d4a:	801a      	strh	r2, [r3, #0]
  
  offset =  8 *((width + 7)/8) - width ;
 8003d4c:	8abb      	ldrh	r3, [r7, #20]
 8003d4e:	3307      	adds	r3, #7
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	da00      	bge.n	8003d56 <DrawChar+0x9a>
 8003d54:	3307      	adds	r3, #7
 8003d56:	10db      	asrs	r3, r3, #3
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	b2da      	uxtb	r2, r3
 8003d5e:	8abb      	ldrh	r3, [r7, #20]
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	1ad3      	subs	r3, r2, r3
 8003d64:	74fb      	strb	r3, [r7, #19]
  
  for(counterh = 0; counterh < height; counterh++)
 8003d66:	2300      	movs	r3, #0
 8003d68:	627b      	str	r3, [r7, #36]	; 0x24
 8003d6a:	e078      	b.n	8003e5e <DrawChar+0x1a2>
  {
    pchar = ((uint8_t *)pChar + (width + 7)/8 * counterh);
 8003d6c:	8abb      	ldrh	r3, [r7, #20]
 8003d6e:	3307      	adds	r3, #7
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	da00      	bge.n	8003d76 <DrawChar+0xba>
 8003d74:	3307      	adds	r3, #7
 8003d76:	10db      	asrs	r3, r3, #3
 8003d78:	461a      	mov	r2, r3
 8003d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d7c:	fb03 f302 	mul.w	r3, r3, r2
 8003d80:	683a      	ldr	r2, [r7, #0]
 8003d82:	4413      	add	r3, r2
 8003d84:	60fb      	str	r3, [r7, #12]
    
    if(((width + 7)/8) == 3)
 8003d86:	8abb      	ldrh	r3, [r7, #20]
 8003d88:	3b11      	subs	r3, #17
 8003d8a:	2b07      	cmp	r3, #7
 8003d8c:	d80c      	bhi.n	8003da8 <DrawChar+0xec>
    {
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	781b      	ldrb	r3, [r3, #0]
 8003d92:	041a      	lsls	r2, r3, #16
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3301      	adds	r3, #1
 8003d98:	781b      	ldrb	r3, [r3, #0]
 8003d9a:	021b      	lsls	r3, r3, #8
 8003d9c:	4313      	orrs	r3, r2
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	3202      	adds	r2, #2
 8003da2:	7812      	ldrb	r2, [r2, #0]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 2)
 8003da8:	8abb      	ldrh	r3, [r7, #20]
 8003daa:	3b09      	subs	r3, #9
 8003dac:	2b07      	cmp	r3, #7
 8003dae:	d807      	bhi.n	8003dc0 <DrawChar+0x104>
    {
      line =  (pchar[0]<< 8) | pchar[1];
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	781b      	ldrb	r3, [r3, #0]
 8003db4:	021b      	lsls	r3, r3, #8
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	3201      	adds	r2, #1
 8003dba:	7812      	ldrb	r2, [r2, #0]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	61fb      	str	r3, [r7, #28]
    }
    
    if(((width + 7)/8) == 1)
 8003dc0:	8abb      	ldrh	r3, [r7, #20]
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	2b07      	cmp	r3, #7
 8003dc6:	d802      	bhi.n	8003dce <DrawChar+0x112>
    {
      line =  pchar[0];
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	781b      	ldrb	r3, [r3, #0]
 8003dcc:	61fb      	str	r3, [r7, #28]
    }    
    
    for (counterw = 0; counterw < width; counterw++)
 8003dce:	2300      	movs	r3, #0
 8003dd0:	623b      	str	r3, [r7, #32]
 8003dd2:	e03d      	b.n	8003e50 <DrawChar+0x194>
    {
      /* Image in the bitmap is written from the bottom to the top */
      /* Need to invert image in the bitmap */
      index = (((height-counterh-1)*width)+(counterw))*2+OFFSET_BITMAP;
 8003dd4:	8afa      	ldrh	r2, [r7, #22]
 8003dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	3b01      	subs	r3, #1
 8003ddc:	8aba      	ldrh	r2, [r7, #20]
 8003dde:	fb02 f203 	mul.w	r2, r2, r3
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	4413      	add	r3, r2
 8003de6:	331b      	adds	r3, #27
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	61bb      	str	r3, [r7, #24]
      if(line & (1 << (width- counterw + offset- 1))) 
 8003dec:	8aba      	ldrh	r2, [r7, #20]
 8003dee:	6a3b      	ldr	r3, [r7, #32]
 8003df0:	1ad2      	subs	r2, r2, r3
 8003df2:	7cfb      	ldrb	r3, [r7, #19]
 8003df4:	4413      	add	r3, r2
 8003df6:	3b01      	subs	r3, #1
 8003df8:	2201      	movs	r2, #1
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	461a      	mov	r2, r3
 8003e00:	69fb      	ldr	r3, [r7, #28]
 8003e02:	4013      	ands	r3, r2
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d010      	beq.n	8003e2a <DrawChar+0x16e>
      {
        bitmap[index] = (uint8_t)DrawProp.TextColor;
 8003e08:	4b1c      	ldr	r3, [pc, #112]	; (8003e7c <DrawChar+0x1c0>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	b2d9      	uxtb	r1, r3
 8003e0e:	4a23      	ldr	r2, [pc, #140]	; (8003e9c <DrawChar+0x1e0>)
 8003e10:	69bb      	ldr	r3, [r7, #24]
 8003e12:	4413      	add	r3, r2
 8003e14:	460a      	mov	r2, r1
 8003e16:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.TextColor >> 8);
 8003e18:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <DrawChar+0x1c0>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	0a1a      	lsrs	r2, r3, #8
 8003e1e:	69bb      	ldr	r3, [r7, #24]
 8003e20:	3301      	adds	r3, #1
 8003e22:	b2d1      	uxtb	r1, r2
 8003e24:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <DrawChar+0x1e0>)
 8003e26:	54d1      	strb	r1, [r2, r3]
 8003e28:	e00f      	b.n	8003e4a <DrawChar+0x18e>
      }
      else
      {
        bitmap[index] = (uint8_t)DrawProp.BackColor;
 8003e2a:	4b14      	ldr	r3, [pc, #80]	; (8003e7c <DrawChar+0x1c0>)
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	b2d9      	uxtb	r1, r3
 8003e30:	4a1a      	ldr	r2, [pc, #104]	; (8003e9c <DrawChar+0x1e0>)
 8003e32:	69bb      	ldr	r3, [r7, #24]
 8003e34:	4413      	add	r3, r2
 8003e36:	460a      	mov	r2, r1
 8003e38:	701a      	strb	r2, [r3, #0]
        bitmap[index+1] = (uint8_t)(DrawProp.BackColor >> 8);
 8003e3a:	4b10      	ldr	r3, [pc, #64]	; (8003e7c <DrawChar+0x1c0>)
 8003e3c:	685b      	ldr	r3, [r3, #4]
 8003e3e:	0a1a      	lsrs	r2, r3, #8
 8003e40:	69bb      	ldr	r3, [r7, #24]
 8003e42:	3301      	adds	r3, #1
 8003e44:	b2d1      	uxtb	r1, r2
 8003e46:	4a15      	ldr	r2, [pc, #84]	; (8003e9c <DrawChar+0x1e0>)
 8003e48:	54d1      	strb	r1, [r2, r3]
    for (counterw = 0; counterw < width; counterw++)
 8003e4a:	6a3b      	ldr	r3, [r7, #32]
 8003e4c:	3301      	adds	r3, #1
 8003e4e:	623b      	str	r3, [r7, #32]
 8003e50:	8abb      	ldrh	r3, [r7, #20]
 8003e52:	6a3a      	ldr	r2, [r7, #32]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d3bd      	bcc.n	8003dd4 <DrawChar+0x118>
  for(counterh = 0; counterh < height; counterh++)
 8003e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5a:	3301      	adds	r3, #1
 8003e5c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e5e:	8afb      	ldrh	r3, [r7, #22]
 8003e60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d382      	bcc.n	8003d6c <DrawChar+0xb0>
      } 
    }
  }
  BSP_LCD_DrawBitmap(Xpos, Ypos, bitmap);
 8003e66:	88b9      	ldrh	r1, [r7, #4]
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	4a0c      	ldr	r2, [pc, #48]	; (8003e9c <DrawChar+0x1e0>)
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	f7ff fe3f 	bl	8003af0 <BSP_LCD_DrawBitmap>
}
 8003e72:	bf00      	nop
 8003e74:	3728      	adds	r7, #40	; 0x28
 8003e76:	46bd      	mov	sp, r7
 8003e78:	bd80      	pop	{r7, pc}
 8003e7a:	bf00      	nop
 8003e7c:	20000564 	.word	0x20000564
 8003e80:	200000f6 	.word	0x200000f6
 8003e84:	200000f8 	.word	0x200000f8
 8003e88:	200000fe 	.word	0x200000fe
 8003e8c:	20000106 	.word	0x20000106
 8003e90:	20000108 	.word	0x20000108
 8003e94:	2000010a 	.word	0x2000010a
 8003e98:	2000010c 	.word	0x2000010c
 8003e9c:	200000f4 	.word	0x200000f4

08003ea0 <BSP_LCD_FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
void BSP_LCD_FillTriangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2, uint16_t x3, uint16_t y3)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b08f      	sub	sp, #60	; 0x3c
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	4608      	mov	r0, r1
 8003eaa:	4611      	mov	r1, r2
 8003eac:	461a      	mov	r2, r3
 8003eae:	4623      	mov	r3, r4
 8003eb0:	80fb      	strh	r3, [r7, #6]
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	80bb      	strh	r3, [r7, #4]
 8003eb6:	460b      	mov	r3, r1
 8003eb8:	807b      	strh	r3, [r7, #2]
 8003eba:	4613      	mov	r3, r2
 8003ebc:	803b      	strh	r3, [r7, #0]
  int16_t a, b, y, last;

  // Sort coordinates by Y order (y3 >= y2 >= y1)
  if (y1 > y2)
 8003ebe:	88ba      	ldrh	r2, [r7, #4]
 8003ec0:	883b      	ldrh	r3, [r7, #0]
 8003ec2:	429a      	cmp	r2, r3
 8003ec4:	d90b      	bls.n	8003ede <BSP_LCD_FillTriangle+0x3e>
  {
    SWAP16(y1, y2); SWAP16(x1, x2);
 8003ec6:	88bb      	ldrh	r3, [r7, #4]
 8003ec8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003eca:	883b      	ldrh	r3, [r7, #0]
 8003ecc:	80bb      	strh	r3, [r7, #4]
 8003ece:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8003ed0:	803b      	strh	r3, [r7, #0]
 8003ed2:	88fb      	ldrh	r3, [r7, #6]
 8003ed4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ed6:	887b      	ldrh	r3, [r7, #2]
 8003ed8:	80fb      	strh	r3, [r7, #6]
 8003eda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003edc:	807b      	strh	r3, [r7, #2]
  }
  if (y2 > y3) {
 8003ede:	883a      	ldrh	r2, [r7, #0]
 8003ee0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d90f      	bls.n	8003f08 <BSP_LCD_FillTriangle+0x68>
    SWAP16(y3, y2); SWAP16(x3, x2);
 8003ee8:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003eec:	847b      	strh	r3, [r7, #34]	; 0x22
 8003eee:	883b      	ldrh	r3, [r7, #0]
 8003ef0:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8003ef4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ef6:	803b      	strh	r3, [r7, #0]
 8003ef8:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003efc:	843b      	strh	r3, [r7, #32]
 8003efe:	887b      	ldrh	r3, [r7, #2]
 8003f00:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8003f04:	8c3b      	ldrh	r3, [r7, #32]
 8003f06:	807b      	strh	r3, [r7, #2]
  }
  if (y1 > y2) {
 8003f08:	88ba      	ldrh	r2, [r7, #4]
 8003f0a:	883b      	ldrh	r3, [r7, #0]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	d90b      	bls.n	8003f28 <BSP_LCD_FillTriangle+0x88>
    SWAP16(y1, y2); SWAP16(x1, x2);
 8003f10:	88bb      	ldrh	r3, [r7, #4]
 8003f12:	83fb      	strh	r3, [r7, #30]
 8003f14:	883b      	ldrh	r3, [r7, #0]
 8003f16:	80bb      	strh	r3, [r7, #4]
 8003f18:	8bfb      	ldrh	r3, [r7, #30]
 8003f1a:	803b      	strh	r3, [r7, #0]
 8003f1c:	88fb      	ldrh	r3, [r7, #6]
 8003f1e:	83bb      	strh	r3, [r7, #28]
 8003f20:	887b      	ldrh	r3, [r7, #2]
 8003f22:	80fb      	strh	r3, [r7, #6]
 8003f24:	8bbb      	ldrh	r3, [r7, #28]
 8003f26:	807b      	strh	r3, [r7, #2]
  }

  if(y1 == y3)
 8003f28:	88ba      	ldrh	r2, [r7, #4]
 8003f2a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003f2e:	429a      	cmp	r2, r3
 8003f30:	d131      	bne.n	8003f96 <BSP_LCD_FillTriangle+0xf6>
  { // Handle awkward all-on-same-line case as its own thing
    a = b = x1;
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003f36:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8003f38:	86fb      	strh	r3, [r7, #54]	; 0x36
    if(x2 < a)      a = x2;
 8003f3a:	887a      	ldrh	r2, [r7, #2]
 8003f3c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003f40:	429a      	cmp	r2, r3
 8003f42:	da02      	bge.n	8003f4a <BSP_LCD_FillTriangle+0xaa>
 8003f44:	887b      	ldrh	r3, [r7, #2]
 8003f46:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f48:	e006      	b.n	8003f58 <BSP_LCD_FillTriangle+0xb8>
    else if(x2 > b) b = x2;
 8003f4a:	887a      	ldrh	r2, [r7, #2]
 8003f4c:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003f50:	429a      	cmp	r2, r3
 8003f52:	dd01      	ble.n	8003f58 <BSP_LCD_FillTriangle+0xb8>
 8003f54:	887b      	ldrh	r3, [r7, #2]
 8003f56:	86bb      	strh	r3, [r7, #52]	; 0x34
    if(x3 < a)      a = x3;
 8003f58:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f5c:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8003f60:	429a      	cmp	r2, r3
 8003f62:	da03      	bge.n	8003f6c <BSP_LCD_FillTriangle+0xcc>
 8003f64:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f68:	86fb      	strh	r3, [r7, #54]	; 0x36
 8003f6a:	e008      	b.n	8003f7e <BSP_LCD_FillTriangle+0xde>
    else if(x3 > b) b = x3;
 8003f6c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003f70:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8003f74:	429a      	cmp	r2, r3
 8003f76:	dd02      	ble.n	8003f7e <BSP_LCD_FillTriangle+0xde>
 8003f78:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8003f7c:	86bb      	strh	r3, [r7, #52]	; 0x34
    BSP_LCD_DrawHLine(a, y1, b - a + 1);
 8003f7e:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8003f80:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003f82:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3301      	adds	r3, #1
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	88bb      	ldrh	r3, [r7, #4]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	f7ff fbae 	bl	80036f0 <BSP_LCD_DrawHLine>
    return;
 8003f94:	e0c9      	b.n	800412a <BSP_LCD_FillTriangle+0x28a>
  }

  int16_t
  dx12 = x2 - x1,
 8003f96:	887a      	ldrh	r2, [r7, #2]
 8003f98:	88fb      	ldrh	r3, [r7, #6]
 8003f9a:	1ad3      	subs	r3, r2, r3
 8003f9c:	b29b      	uxth	r3, r3
 8003f9e:	837b      	strh	r3, [r7, #26]
  dy12 = y2 - y1,
 8003fa0:	883a      	ldrh	r2, [r7, #0]
 8003fa2:	88bb      	ldrh	r3, [r7, #4]
 8003fa4:	1ad3      	subs	r3, r2, r3
 8003fa6:	b29b      	uxth	r3, r3
 8003fa8:	833b      	strh	r3, [r7, #24]
  dx13 = x3 - x1,
 8003faa:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003fae:	88fb      	ldrh	r3, [r7, #6]
 8003fb0:	1ad3      	subs	r3, r2, r3
 8003fb2:	b29b      	uxth	r3, r3
 8003fb4:	82fb      	strh	r3, [r7, #22]
  dy13 = y3 - y1,
 8003fb6:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003fba:	88bb      	ldrh	r3, [r7, #4]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	82bb      	strh	r3, [r7, #20]
  dx23 = x3 - x2,
 8003fc2:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8003fc6:	887b      	ldrh	r3, [r7, #2]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	b29b      	uxth	r3, r3
 8003fcc:	827b      	strh	r3, [r7, #18]
  dy23 = y3 - y2;
 8003fce:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 8003fd2:	883b      	ldrh	r3, [r7, #0]
 8003fd4:	1ad3      	subs	r3, r2, r3
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	823b      	strh	r3, [r7, #16]
  int32_t
  sa   = 0,
 8003fda:	2300      	movs	r3, #0
 8003fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  sb   = 0;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	62bb      	str	r3, [r7, #40]	; 0x28
  // 1-2 and 1-3.  If y2=y3 (flat-bottomed triangle), the scanline y2
  // is included here (and second loop will be skipped, avoiding a /0
  // error there), otherwise scanline y2 is skipped here and handled
  // in the second loop...which also avoids a /0 error here if y1=y2
  // (flat-topped triangle).
  if(y2 == y3) last = y2;   // Include y2 scanline
 8003fe2:	883a      	ldrh	r2, [r7, #0]
 8003fe4:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d102      	bne.n	8003ff2 <BSP_LCD_FillTriangle+0x152>
 8003fec:	883b      	ldrh	r3, [r7, #0]
 8003fee:	863b      	strh	r3, [r7, #48]	; 0x30
 8003ff0:	e003      	b.n	8003ffa <BSP_LCD_FillTriangle+0x15a>
  else         last = y2 - 1; // Skip it
 8003ff2:	883b      	ldrh	r3, [r7, #0]
 8003ff4:	3b01      	subs	r3, #1
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	863b      	strh	r3, [r7, #48]	; 0x30

  for(y = y1; y <= last; y++)
 8003ffa:	88bb      	ldrh	r3, [r7, #4]
 8003ffc:	867b      	strh	r3, [r7, #50]	; 0x32
 8003ffe:	e03a      	b.n	8004076 <BSP_LCD_FillTriangle+0x1d6>
  {
    a   = x1 + sa / dy12;
 8004000:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8004004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004006:	fb92 f3f3 	sdiv	r3, r2, r3
 800400a:	b29a      	uxth	r2, r3
 800400c:	88fb      	ldrh	r3, [r7, #6]
 800400e:	4413      	add	r3, r2
 8004010:	b29b      	uxth	r3, r3
 8004012:	86fb      	strh	r3, [r7, #54]	; 0x36
    b   = x1 + sb / dy13;
 8004014:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004018:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800401a:	fb92 f3f3 	sdiv	r3, r2, r3
 800401e:	b29a      	uxth	r2, r3
 8004020:	88fb      	ldrh	r3, [r7, #6]
 8004022:	4413      	add	r3, r2
 8004024:	b29b      	uxth	r3, r3
 8004026:	86bb      	strh	r3, [r7, #52]	; 0x34
    sa += dx12;
 8004028:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800402c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800402e:	4413      	add	r3, r2
 8004030:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb += dx13;
 8004032:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004036:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004038:	4413      	add	r3, r2
 800403a:	62bb      	str	r3, [r7, #40]	; 0x28
    /* longhand:
    a = x1 + (x2 - x1) * (y - y1) / (y2 - y1);
    b = x1 + (x3 - x1) * (y - y2) / (y3 - y1);
    */
    if(a > b) SWAP16(a, b);
 800403c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 8004040:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 8004044:	429a      	cmp	r2, r3
 8004046:	dd05      	ble.n	8004054 <BSP_LCD_FillTriangle+0x1b4>
 8004048:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800404a:	81bb      	strh	r3, [r7, #12]
 800404c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 800404e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004050:	89bb      	ldrh	r3, [r7, #12]
 8004052:	86bb      	strh	r3, [r7, #52]	; 0x34
    BSP_LCD_DrawHLine(a, y, b - a + 1);
 8004054:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 8004056:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8004058:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800405a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800405c:	1ad3      	subs	r3, r2, r3
 800405e:	b29b      	uxth	r3, r3
 8004060:	3301      	adds	r3, #1
 8004062:	b29b      	uxth	r3, r3
 8004064:	461a      	mov	r2, r3
 8004066:	f7ff fb43 	bl	80036f0 <BSP_LCD_DrawHLine>
  for(y = y1; y <= last; y++)
 800406a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 800406e:	b29b      	uxth	r3, r3
 8004070:	3301      	adds	r3, #1
 8004072:	b29b      	uxth	r3, r3
 8004074:	867b      	strh	r3, [r7, #50]	; 0x32
 8004076:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 800407a:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 800407e:	429a      	cmp	r2, r3
 8004080:	ddbe      	ble.n	8004000 <BSP_LCD_FillTriangle+0x160>
  }

  // For lower part of triangle, find scanline crossings for segments
  // 1-3 and 2-3.  This loop is skipped if y1=y2.
  sa = (int32_t)dx23 * (y - y2);
 8004082:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004086:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800408a:	883a      	ldrh	r2, [r7, #0]
 800408c:	1a8a      	subs	r2, r1, r2
 800408e:	fb02 f303 	mul.w	r3, r2, r3
 8004092:	62fb      	str	r3, [r7, #44]	; 0x2c
  sb = (int32_t)dx13 * (y - y1);
 8004094:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004098:	f9b7 1032 	ldrsh.w	r1, [r7, #50]	; 0x32
 800409c:	88ba      	ldrh	r2, [r7, #4]
 800409e:	1a8a      	subs	r2, r1, r2
 80040a0:	fb02 f303 	mul.w	r3, r2, r3
 80040a4:	62bb      	str	r3, [r7, #40]	; 0x28
  for(; y <= y3; y++)
 80040a6:	e03a      	b.n	800411e <BSP_LCD_FillTriangle+0x27e>
  {
    a   = x2 + sa / dy23;
 80040a8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80040ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040ae:	fb92 f3f3 	sdiv	r3, r2, r3
 80040b2:	b29a      	uxth	r2, r3
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	4413      	add	r3, r2
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	86fb      	strh	r3, [r7, #54]	; 0x36
    b   = x1 + sb / dy13;
 80040bc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80040c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040c2:	fb92 f3f3 	sdiv	r3, r2, r3
 80040c6:	b29a      	uxth	r2, r3
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	4413      	add	r3, r2
 80040cc:	b29b      	uxth	r3, r3
 80040ce:	86bb      	strh	r3, [r7, #52]	; 0x34
    sa += dx23;
 80040d0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80040d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80040d6:	4413      	add	r3, r2
 80040d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    sb += dx13;
 80040da:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80040de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80040e0:	4413      	add	r3, r2
 80040e2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* longhand:
    a = x2 + (x3 - x2) * (y - y2) / (y3 - y2);
    b = x1 + (x3 - x1) * (y - y1) / (y3 - y1);
    */
    if(a > b) SWAP16(a, b);
 80040e4:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	; 0x36
 80040e8:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80040ec:	429a      	cmp	r2, r3
 80040ee:	dd05      	ble.n	80040fc <BSP_LCD_FillTriangle+0x25c>
 80040f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040f2:	81fb      	strh	r3, [r7, #14]
 80040f4:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80040f6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80040f8:	89fb      	ldrh	r3, [r7, #14]
 80040fa:	86bb      	strh	r3, [r7, #52]	; 0x34
    BSP_LCD_DrawHLine(a, y, b - a + 1);
 80040fc:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80040fe:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 8004100:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8004102:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	b29b      	uxth	r3, r3
 8004108:	3301      	adds	r3, #1
 800410a:	b29b      	uxth	r3, r3
 800410c:	461a      	mov	r2, r3
 800410e:	f7ff faef 	bl	80036f0 <BSP_LCD_DrawHLine>
  for(; y <= y3; y++)
 8004112:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	; 0x32
 8004116:	b29b      	uxth	r3, r3
 8004118:	3301      	adds	r3, #1
 800411a:	b29b      	uxth	r3, r3
 800411c:	867b      	strh	r3, [r7, #50]	; 0x32
 800411e:	f9b7 2032 	ldrsh.w	r2, [r7, #50]	; 0x32
 8004122:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8004126:	429a      	cmp	r2, r3
 8004128:	ddbe      	ble.n	80040a8 <BSP_LCD_FillTriangle+0x208>
  }
}
 800412a:	373c      	adds	r7, #60	; 0x3c
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}

08004130 <SetDisplayWindow>:
  * @param  Width: LCD window width
  * @param  Height: LCD window height  
  * @retval None
  */
static void SetDisplayWindow(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	4604      	mov	r4, r0
 8004138:	4608      	mov	r0, r1
 800413a:	4611      	mov	r1, r2
 800413c:	461a      	mov	r2, r3
 800413e:	4623      	mov	r3, r4
 8004140:	80fb      	strh	r3, [r7, #6]
 8004142:	4603      	mov	r3, r0
 8004144:	80bb      	strh	r3, [r7, #4]
 8004146:	460b      	mov	r3, r1
 8004148:	807b      	strh	r3, [r7, #2]
 800414a:	4613      	mov	r3, r2
 800414c:	803b      	strh	r3, [r7, #0]
  if(lcd_drv->SetDisplayWindow != NULL)
 800414e:	4b08      	ldr	r3, [pc, #32]	; (8004170 <SetDisplayWindow+0x40>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	69db      	ldr	r3, [r3, #28]
 8004154:	2b00      	cmp	r3, #0
 8004156:	d007      	beq.n	8004168 <SetDisplayWindow+0x38>
  {
    lcd_drv->SetDisplayWindow(Xpos, Ypos, Width, Height);
 8004158:	4b05      	ldr	r3, [pc, #20]	; (8004170 <SetDisplayWindow+0x40>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	69dc      	ldr	r4, [r3, #28]
 800415e:	883b      	ldrh	r3, [r7, #0]
 8004160:	887a      	ldrh	r2, [r7, #2]
 8004162:	88b9      	ldrh	r1, [r7, #4]
 8004164:	88f8      	ldrh	r0, [r7, #6]
 8004166:	47a0      	blx	r4
  }  
}
 8004168:	bf00      	nop
 800416a:	370c      	adds	r7, #12
 800416c:	46bd      	mov	sp, r7
 800416e:	bd90      	pop	{r4, r7, pc}
 8004170:	20000048 	.word	0x20000048

08004174 <BSP_LCD_ReadID>:
  * @brief  Get display ID
  * @param  none
  * @retval ID number
  */
uint16_t BSP_LCD_ReadID(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  if(lcd_drv->ReadID)
 8004178:	4b06      	ldr	r3, [pc, #24]	; (8004194 <BSP_LCD_ReadID+0x20>)
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d005      	beq.n	800418e <BSP_LCD_ReadID+0x1a>
    return lcd_drv->ReadID();
 8004182:	4b04      	ldr	r3, [pc, #16]	; (8004194 <BSP_LCD_ReadID+0x20>)
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	4798      	blx	r3
 800418a:	4603      	mov	r3, r0
 800418c:	e000      	b.n	8004190 <BSP_LCD_ReadID+0x1c>
  else
    return 0;
 800418e:	2300      	movs	r3, #0
}
 8004190:	4618      	mov	r0, r3
 8004192:	bd80      	pop	{r7, pc}
 8004194:	20000048 	.word	0x20000048

08004198 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800419c:	4b0e      	ldr	r3, [pc, #56]	; (80041d8 <HAL_Init+0x40>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a0d      	ldr	r2, [pc, #52]	; (80041d8 <HAL_Init+0x40>)
 80041a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80041a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80041a8:	4b0b      	ldr	r3, [pc, #44]	; (80041d8 <HAL_Init+0x40>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <HAL_Init+0x40>)
 80041ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80041b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80041b4:	4b08      	ldr	r3, [pc, #32]	; (80041d8 <HAL_Init+0x40>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a07      	ldr	r2, [pc, #28]	; (80041d8 <HAL_Init+0x40>)
 80041ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041c0:	2003      	movs	r0, #3
 80041c2:	f000 f92f 	bl	8004424 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80041c6:	2000      	movs	r0, #0
 80041c8:	f000 f808 	bl	80041dc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041cc:	f7fe f926 	bl	800241c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041d0:	2300      	movs	r3, #0
}
 80041d2:	4618      	mov	r0, r3
 80041d4:	bd80      	pop	{r7, pc}
 80041d6:	bf00      	nop
 80041d8:	40023c00 	.word	0x40023c00

080041dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b082      	sub	sp, #8
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041e4:	4b12      	ldr	r3, [pc, #72]	; (8004230 <HAL_InitTick+0x54>)
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	4b12      	ldr	r3, [pc, #72]	; (8004234 <HAL_InitTick+0x58>)
 80041ea:	781b      	ldrb	r3, [r3, #0]
 80041ec:	4619      	mov	r1, r3
 80041ee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80041f2:	fbb3 f3f1 	udiv	r3, r3, r1
 80041f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 f939 	bl	8004472 <HAL_SYSTICK_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d001      	beq.n	800420a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004206:	2301      	movs	r3, #1
 8004208:	e00e      	b.n	8004228 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	2b0f      	cmp	r3, #15
 800420e:	d80a      	bhi.n	8004226 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004210:	2200      	movs	r2, #0
 8004212:	6879      	ldr	r1, [r7, #4]
 8004214:	f04f 30ff 	mov.w	r0, #4294967295
 8004218:	f000 f90f 	bl	800443a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800421c:	4a06      	ldr	r2, [pc, #24]	; (8004238 <HAL_InitTick+0x5c>)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	e000      	b.n	8004228 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
}
 8004228:	4618      	mov	r0, r3
 800422a:	3708      	adds	r7, #8
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}
 8004230:	20000000 	.word	0x20000000
 8004234:	20000050 	.word	0x20000050
 8004238:	2000004c 	.word	0x2000004c

0800423c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800423c:	b480      	push	{r7}
 800423e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004240:	4b06      	ldr	r3, [pc, #24]	; (800425c <HAL_IncTick+0x20>)
 8004242:	781b      	ldrb	r3, [r3, #0]
 8004244:	461a      	mov	r2, r3
 8004246:	4b06      	ldr	r3, [pc, #24]	; (8004260 <HAL_IncTick+0x24>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4413      	add	r3, r2
 800424c:	4a04      	ldr	r2, [pc, #16]	; (8004260 <HAL_IncTick+0x24>)
 800424e:	6013      	str	r3, [r2, #0]
}
 8004250:	bf00      	nop
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	20000050 	.word	0x20000050
 8004260:	20000570 	.word	0x20000570

08004264 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004264:	b480      	push	{r7}
 8004266:	af00      	add	r7, sp, #0
  return uwTick;
 8004268:	4b03      	ldr	r3, [pc, #12]	; (8004278 <HAL_GetTick+0x14>)
 800426a:	681b      	ldr	r3, [r3, #0]
}
 800426c:	4618      	mov	r0, r3
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000570 	.word	0x20000570

0800427c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b084      	sub	sp, #16
 8004280:	af00      	add	r7, sp, #0
 8004282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004284:	f7ff ffee 	bl	8004264 <HAL_GetTick>
 8004288:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004294:	d005      	beq.n	80042a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004296:	4b09      	ldr	r3, [pc, #36]	; (80042bc <HAL_Delay+0x40>)
 8004298:	781b      	ldrb	r3, [r3, #0]
 800429a:	461a      	mov	r2, r3
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	4413      	add	r3, r2
 80042a0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80042a2:	bf00      	nop
 80042a4:	f7ff ffde 	bl	8004264 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	429a      	cmp	r2, r3
 80042b2:	d8f7      	bhi.n	80042a4 <HAL_Delay+0x28>
  {
  }
}
 80042b4:	bf00      	nop
 80042b6:	3710      	adds	r7, #16
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	20000050 	.word	0x20000050

080042c0 <__NVIC_SetPriorityGrouping>:
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	f003 0307 	and.w	r3, r3, #7
 80042ce:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d0:	4b0c      	ldr	r3, [pc, #48]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042dc:	4013      	ands	r3, r2
 80042de:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80042ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042f2:	4a04      	ldr	r2, [pc, #16]	; (8004304 <__NVIC_SetPriorityGrouping+0x44>)
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	60d3      	str	r3, [r2, #12]
}
 80042f8:	bf00      	nop
 80042fa:	3714      	adds	r7, #20
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr
 8004304:	e000ed00 	.word	0xe000ed00

08004308 <__NVIC_GetPriorityGrouping>:
{
 8004308:	b480      	push	{r7}
 800430a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800430c:	4b04      	ldr	r3, [pc, #16]	; (8004320 <__NVIC_GetPriorityGrouping+0x18>)
 800430e:	68db      	ldr	r3, [r3, #12]
 8004310:	0a1b      	lsrs	r3, r3, #8
 8004312:	f003 0307 	and.w	r3, r3, #7
}
 8004316:	4618      	mov	r0, r3
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr
 8004320:	e000ed00 	.word	0xe000ed00

08004324 <__NVIC_SetPriority>:
{
 8004324:	b480      	push	{r7}
 8004326:	b083      	sub	sp, #12
 8004328:	af00      	add	r7, sp, #0
 800432a:	4603      	mov	r3, r0
 800432c:	6039      	str	r1, [r7, #0]
 800432e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004330:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004334:	2b00      	cmp	r3, #0
 8004336:	db0a      	blt.n	800434e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	b2da      	uxtb	r2, r3
 800433c:	490c      	ldr	r1, [pc, #48]	; (8004370 <__NVIC_SetPriority+0x4c>)
 800433e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004342:	0112      	lsls	r2, r2, #4
 8004344:	b2d2      	uxtb	r2, r2
 8004346:	440b      	add	r3, r1
 8004348:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800434c:	e00a      	b.n	8004364 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	b2da      	uxtb	r2, r3
 8004352:	4908      	ldr	r1, [pc, #32]	; (8004374 <__NVIC_SetPriority+0x50>)
 8004354:	79fb      	ldrb	r3, [r7, #7]
 8004356:	f003 030f 	and.w	r3, r3, #15
 800435a:	3b04      	subs	r3, #4
 800435c:	0112      	lsls	r2, r2, #4
 800435e:	b2d2      	uxtb	r2, r2
 8004360:	440b      	add	r3, r1
 8004362:	761a      	strb	r2, [r3, #24]
}
 8004364:	bf00      	nop
 8004366:	370c      	adds	r7, #12
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000e100 	.word	0xe000e100
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <NVIC_EncodePriority>:
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f003 0307 	and.w	r3, r3, #7
 800438a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f1c3 0307 	rsb	r3, r3, #7
 8004392:	2b04      	cmp	r3, #4
 8004394:	bf28      	it	cs
 8004396:	2304      	movcs	r3, #4
 8004398:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800439a:	69fb      	ldr	r3, [r7, #28]
 800439c:	3304      	adds	r3, #4
 800439e:	2b06      	cmp	r3, #6
 80043a0:	d902      	bls.n	80043a8 <NVIC_EncodePriority+0x30>
 80043a2:	69fb      	ldr	r3, [r7, #28]
 80043a4:	3b03      	subs	r3, #3
 80043a6:	e000      	b.n	80043aa <NVIC_EncodePriority+0x32>
 80043a8:	2300      	movs	r3, #0
 80043aa:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043ac:	f04f 32ff 	mov.w	r2, #4294967295
 80043b0:	69bb      	ldr	r3, [r7, #24]
 80043b2:	fa02 f303 	lsl.w	r3, r2, r3
 80043b6:	43da      	mvns	r2, r3
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	401a      	ands	r2, r3
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043c0:	f04f 31ff 	mov.w	r1, #4294967295
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	fa01 f303 	lsl.w	r3, r1, r3
 80043ca:	43d9      	mvns	r1, r3
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043d0:	4313      	orrs	r3, r2
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3724      	adds	r7, #36	; 0x24
 80043d6:	46bd      	mov	sp, r7
 80043d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043dc:	4770      	bx	lr
	...

080043e0 <SysTick_Config>:
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b082      	sub	sp, #8
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3b01      	subs	r3, #1
 80043ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80043f0:	d301      	bcc.n	80043f6 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80043f2:	2301      	movs	r3, #1
 80043f4:	e00f      	b.n	8004416 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80043f6:	4a0a      	ldr	r2, [pc, #40]	; (8004420 <SysTick_Config+0x40>)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	3b01      	subs	r3, #1
 80043fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80043fe:	210f      	movs	r1, #15
 8004400:	f04f 30ff 	mov.w	r0, #4294967295
 8004404:	f7ff ff8e 	bl	8004324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004408:	4b05      	ldr	r3, [pc, #20]	; (8004420 <SysTick_Config+0x40>)
 800440a:	2200      	movs	r2, #0
 800440c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800440e:	4b04      	ldr	r3, [pc, #16]	; (8004420 <SysTick_Config+0x40>)
 8004410:	2207      	movs	r2, #7
 8004412:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3708      	adds	r7, #8
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	e000e010 	.word	0xe000e010

08004424 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800442c:	6878      	ldr	r0, [r7, #4]
 800442e:	f7ff ff47 	bl	80042c0 <__NVIC_SetPriorityGrouping>
}
 8004432:	bf00      	nop
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}

0800443a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800443a:	b580      	push	{r7, lr}
 800443c:	b086      	sub	sp, #24
 800443e:	af00      	add	r7, sp, #0
 8004440:	4603      	mov	r3, r0
 8004442:	60b9      	str	r1, [r7, #8]
 8004444:	607a      	str	r2, [r7, #4]
 8004446:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004448:	2300      	movs	r3, #0
 800444a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800444c:	f7ff ff5c 	bl	8004308 <__NVIC_GetPriorityGrouping>
 8004450:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	68b9      	ldr	r1, [r7, #8]
 8004456:	6978      	ldr	r0, [r7, #20]
 8004458:	f7ff ff8e 	bl	8004378 <NVIC_EncodePriority>
 800445c:	4602      	mov	r2, r0
 800445e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004462:	4611      	mov	r1, r2
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff5d 	bl	8004324 <__NVIC_SetPriority>
}
 800446a:	bf00      	nop
 800446c:	3718      	adds	r7, #24
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}

08004472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004472:	b580      	push	{r7, lr}
 8004474:	b082      	sub	sp, #8
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7ff ffb0 	bl	80043e0 <SysTick_Config>
 8004480:	4603      	mov	r3, r0
}
 8004482:	4618      	mov	r0, r3
 8004484:	3708      	adds	r7, #8
 8004486:	46bd      	mov	sp, r7
 8004488:	bd80      	pop	{r7, pc}
	...

0800448c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800448c:	b480      	push	{r7}
 800448e:	b089      	sub	sp, #36	; 0x24
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004496:	2300      	movs	r3, #0
 8004498:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800449a:	2300      	movs	r3, #0
 800449c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800449e:	2300      	movs	r3, #0
 80044a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80044a2:	2300      	movs	r3, #0
 80044a4:	61fb      	str	r3, [r7, #28]
 80044a6:	e16b      	b.n	8004780 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80044a8:	2201      	movs	r2, #1
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	fa02 f303 	lsl.w	r3, r2, r3
 80044b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	697a      	ldr	r2, [r7, #20]
 80044b8:	4013      	ands	r3, r2
 80044ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80044bc:	693a      	ldr	r2, [r7, #16]
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	429a      	cmp	r2, r3
 80044c2:	f040 815a 	bne.w	800477a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d00b      	beq.n	80044e6 <HAL_GPIO_Init+0x5a>
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b02      	cmp	r3, #2
 80044d4:	d007      	beq.n	80044e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044d6:	683b      	ldr	r3, [r7, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80044da:	2b11      	cmp	r3, #17
 80044dc:	d003      	beq.n	80044e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	2b12      	cmp	r3, #18
 80044e4:	d130      	bne.n	8004548 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044ec:	69fb      	ldr	r3, [r7, #28]
 80044ee:	005b      	lsls	r3, r3, #1
 80044f0:	2203      	movs	r2, #3
 80044f2:	fa02 f303 	lsl.w	r3, r2, r3
 80044f6:	43db      	mvns	r3, r3
 80044f8:	69ba      	ldr	r2, [r7, #24]
 80044fa:	4013      	ands	r3, r2
 80044fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	68da      	ldr	r2, [r3, #12]
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	005b      	lsls	r3, r3, #1
 8004506:	fa02 f303 	lsl.w	r3, r2, r3
 800450a:	69ba      	ldr	r2, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	69ba      	ldr	r2, [r7, #24]
 8004514:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800451c:	2201      	movs	r2, #1
 800451e:	69fb      	ldr	r3, [r7, #28]
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	43db      	mvns	r3, r3
 8004526:	69ba      	ldr	r2, [r7, #24]
 8004528:	4013      	ands	r3, r2
 800452a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	685b      	ldr	r3, [r3, #4]
 8004530:	091b      	lsrs	r3, r3, #4
 8004532:	f003 0201 	and.w	r2, r3, #1
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	fa02 f303 	lsl.w	r3, r2, r3
 800453c:	69ba      	ldr	r2, [r7, #24]
 800453e:	4313      	orrs	r3, r2
 8004540:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	69ba      	ldr	r2, [r7, #24]
 8004546:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	005b      	lsls	r3, r3, #1
 8004552:	2203      	movs	r2, #3
 8004554:	fa02 f303 	lsl.w	r3, r2, r3
 8004558:	43db      	mvns	r3, r3
 800455a:	69ba      	ldr	r2, [r7, #24]
 800455c:	4013      	ands	r3, r2
 800455e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	689a      	ldr	r2, [r3, #8]
 8004564:	69fb      	ldr	r3, [r7, #28]
 8004566:	005b      	lsls	r3, r3, #1
 8004568:	fa02 f303 	lsl.w	r3, r2, r3
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	4313      	orrs	r3, r2
 8004570:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	69ba      	ldr	r2, [r7, #24]
 8004576:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004578:	683b      	ldr	r3, [r7, #0]
 800457a:	685b      	ldr	r3, [r3, #4]
 800457c:	2b02      	cmp	r3, #2
 800457e:	d003      	beq.n	8004588 <HAL_GPIO_Init+0xfc>
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	2b12      	cmp	r3, #18
 8004586:	d123      	bne.n	80045d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	08da      	lsrs	r2, r3, #3
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	3208      	adds	r2, #8
 8004590:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004594:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004596:	69fb      	ldr	r3, [r7, #28]
 8004598:	f003 0307 	and.w	r3, r3, #7
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	220f      	movs	r2, #15
 80045a0:	fa02 f303 	lsl.w	r3, r2, r3
 80045a4:	43db      	mvns	r3, r3
 80045a6:	69ba      	ldr	r2, [r7, #24]
 80045a8:	4013      	ands	r3, r2
 80045aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	691a      	ldr	r2, [r3, #16]
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	f003 0307 	and.w	r3, r3, #7
 80045b6:	009b      	lsls	r3, r3, #2
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	08da      	lsrs	r2, r3, #3
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	3208      	adds	r2, #8
 80045ca:	69b9      	ldr	r1, [r7, #24]
 80045cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045d6:	69fb      	ldr	r3, [r7, #28]
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	2203      	movs	r2, #3
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	43db      	mvns	r3, r3
 80045e2:	69ba      	ldr	r2, [r7, #24]
 80045e4:	4013      	ands	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	685b      	ldr	r3, [r3, #4]
 80045ec:	f003 0203 	and.w	r2, r3, #3
 80045f0:	69fb      	ldr	r3, [r7, #28]
 80045f2:	005b      	lsls	r3, r3, #1
 80045f4:	fa02 f303 	lsl.w	r3, r2, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4313      	orrs	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	69ba      	ldr	r2, [r7, #24]
 8004602:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	685b      	ldr	r3, [r3, #4]
 8004608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	f000 80b4 	beq.w	800477a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004612:	2300      	movs	r3, #0
 8004614:	60fb      	str	r3, [r7, #12]
 8004616:	4b5f      	ldr	r3, [pc, #380]	; (8004794 <HAL_GPIO_Init+0x308>)
 8004618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800461a:	4a5e      	ldr	r2, [pc, #376]	; (8004794 <HAL_GPIO_Init+0x308>)
 800461c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004620:	6453      	str	r3, [r2, #68]	; 0x44
 8004622:	4b5c      	ldr	r3, [pc, #368]	; (8004794 <HAL_GPIO_Init+0x308>)
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800462a:	60fb      	str	r3, [r7, #12]
 800462c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800462e:	4a5a      	ldr	r2, [pc, #360]	; (8004798 <HAL_GPIO_Init+0x30c>)
 8004630:	69fb      	ldr	r3, [r7, #28]
 8004632:	089b      	lsrs	r3, r3, #2
 8004634:	3302      	adds	r3, #2
 8004636:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	f003 0303 	and.w	r3, r3, #3
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	220f      	movs	r2, #15
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	43db      	mvns	r3, r3
 800464c:	69ba      	ldr	r2, [r7, #24]
 800464e:	4013      	ands	r3, r2
 8004650:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a51      	ldr	r2, [pc, #324]	; (800479c <HAL_GPIO_Init+0x310>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d02b      	beq.n	80046b2 <HAL_GPIO_Init+0x226>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a50      	ldr	r2, [pc, #320]	; (80047a0 <HAL_GPIO_Init+0x314>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d025      	beq.n	80046ae <HAL_GPIO_Init+0x222>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4f      	ldr	r2, [pc, #316]	; (80047a4 <HAL_GPIO_Init+0x318>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d01f      	beq.n	80046aa <HAL_GPIO_Init+0x21e>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	4a4e      	ldr	r2, [pc, #312]	; (80047a8 <HAL_GPIO_Init+0x31c>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d019      	beq.n	80046a6 <HAL_GPIO_Init+0x21a>
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	4a4d      	ldr	r2, [pc, #308]	; (80047ac <HAL_GPIO_Init+0x320>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d013      	beq.n	80046a2 <HAL_GPIO_Init+0x216>
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	4a4c      	ldr	r2, [pc, #304]	; (80047b0 <HAL_GPIO_Init+0x324>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d00d      	beq.n	800469e <HAL_GPIO_Init+0x212>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	4a4b      	ldr	r2, [pc, #300]	; (80047b4 <HAL_GPIO_Init+0x328>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d007      	beq.n	800469a <HAL_GPIO_Init+0x20e>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	4a4a      	ldr	r2, [pc, #296]	; (80047b8 <HAL_GPIO_Init+0x32c>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d101      	bne.n	8004696 <HAL_GPIO_Init+0x20a>
 8004692:	2307      	movs	r3, #7
 8004694:	e00e      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 8004696:	2308      	movs	r3, #8
 8004698:	e00c      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 800469a:	2306      	movs	r3, #6
 800469c:	e00a      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 800469e:	2305      	movs	r3, #5
 80046a0:	e008      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 80046a2:	2304      	movs	r3, #4
 80046a4:	e006      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 80046a6:	2303      	movs	r3, #3
 80046a8:	e004      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e002      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 80046ae:	2301      	movs	r3, #1
 80046b0:	e000      	b.n	80046b4 <HAL_GPIO_Init+0x228>
 80046b2:	2300      	movs	r3, #0
 80046b4:	69fa      	ldr	r2, [r7, #28]
 80046b6:	f002 0203 	and.w	r2, r2, #3
 80046ba:	0092      	lsls	r2, r2, #2
 80046bc:	4093      	lsls	r3, r2
 80046be:	69ba      	ldr	r2, [r7, #24]
 80046c0:	4313      	orrs	r3, r2
 80046c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80046c4:	4934      	ldr	r1, [pc, #208]	; (8004798 <HAL_GPIO_Init+0x30c>)
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	089b      	lsrs	r3, r3, #2
 80046ca:	3302      	adds	r3, #2
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046d2:	4b3a      	ldr	r3, [pc, #232]	; (80047bc <HAL_GPIO_Init+0x330>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	43db      	mvns	r3, r3
 80046dc:	69ba      	ldr	r2, [r7, #24]
 80046de:	4013      	ands	r3, r2
 80046e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d003      	beq.n	80046f6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046ee:	69ba      	ldr	r2, [r7, #24]
 80046f0:	693b      	ldr	r3, [r7, #16]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046f6:	4a31      	ldr	r2, [pc, #196]	; (80047bc <HAL_GPIO_Init+0x330>)
 80046f8:	69bb      	ldr	r3, [r7, #24]
 80046fa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80046fc:	4b2f      	ldr	r3, [pc, #188]	; (80047bc <HAL_GPIO_Init+0x330>)
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004702:	693b      	ldr	r3, [r7, #16]
 8004704:	43db      	mvns	r3, r3
 8004706:	69ba      	ldr	r2, [r7, #24]
 8004708:	4013      	ands	r3, r2
 800470a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004714:	2b00      	cmp	r3, #0
 8004716:	d003      	beq.n	8004720 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004718:	69ba      	ldr	r2, [r7, #24]
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	4313      	orrs	r3, r2
 800471e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004720:	4a26      	ldr	r2, [pc, #152]	; (80047bc <HAL_GPIO_Init+0x330>)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004726:	4b25      	ldr	r3, [pc, #148]	; (80047bc <HAL_GPIO_Init+0x330>)
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	43db      	mvns	r3, r3
 8004730:	69ba      	ldr	r2, [r7, #24]
 8004732:	4013      	ands	r3, r2
 8004734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800473e:	2b00      	cmp	r3, #0
 8004740:	d003      	beq.n	800474a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004742:	69ba      	ldr	r2, [r7, #24]
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800474a:	4a1c      	ldr	r2, [pc, #112]	; (80047bc <HAL_GPIO_Init+0x330>)
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004750:	4b1a      	ldr	r3, [pc, #104]	; (80047bc <HAL_GPIO_Init+0x330>)
 8004752:	68db      	ldr	r3, [r3, #12]
 8004754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	43db      	mvns	r3, r3
 800475a:	69ba      	ldr	r2, [r7, #24]
 800475c:	4013      	ands	r3, r2
 800475e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004768:	2b00      	cmp	r3, #0
 800476a:	d003      	beq.n	8004774 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800476c:	69ba      	ldr	r2, [r7, #24]
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	4313      	orrs	r3, r2
 8004772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004774:	4a11      	ldr	r2, [pc, #68]	; (80047bc <HAL_GPIO_Init+0x330>)
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	3301      	adds	r3, #1
 800477e:	61fb      	str	r3, [r7, #28]
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	2b0f      	cmp	r3, #15
 8004784:	f67f ae90 	bls.w	80044a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004788:	bf00      	nop
 800478a:	3724      	adds	r7, #36	; 0x24
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr
 8004794:	40023800 	.word	0x40023800
 8004798:	40013800 	.word	0x40013800
 800479c:	40020000 	.word	0x40020000
 80047a0:	40020400 	.word	0x40020400
 80047a4:	40020800 	.word	0x40020800
 80047a8:	40020c00 	.word	0x40020c00
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40021400 	.word	0x40021400
 80047b4:	40021800 	.word	0x40021800
 80047b8:	40021c00 	.word	0x40021c00
 80047bc:	40013c00 	.word	0x40013c00

080047c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	460b      	mov	r3, r1
 80047ca:	807b      	strh	r3, [r7, #2]
 80047cc:	4613      	mov	r3, r2
 80047ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047d0:	787b      	ldrb	r3, [r7, #1]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d003      	beq.n	80047de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047d6:	887a      	ldrh	r2, [r7, #2]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047dc:	e003      	b.n	80047e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047de:	887b      	ldrh	r3, [r7, #2]
 80047e0:	041a      	lsls	r2, r3, #16
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	619a      	str	r2, [r3, #24]
}
 80047e6:	bf00      	nop
 80047e8:	370c      	adds	r7, #12
 80047ea:	46bd      	mov	sp, r7
 80047ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f0:	4770      	bx	lr
	...

080047f4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b086      	sub	sp, #24
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d101      	bne.n	8004806 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004802:	2301      	movs	r3, #1
 8004804:	e25b      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d075      	beq.n	80048fe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004812:	4ba3      	ldr	r3, [pc, #652]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004814:	689b      	ldr	r3, [r3, #8]
 8004816:	f003 030c 	and.w	r3, r3, #12
 800481a:	2b04      	cmp	r3, #4
 800481c:	d00c      	beq.n	8004838 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800481e:	4ba0      	ldr	r3, [pc, #640]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004826:	2b08      	cmp	r3, #8
 8004828:	d112      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800482a:	4b9d      	ldr	r3, [pc, #628]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004832:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004836:	d10b      	bne.n	8004850 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004838:	4b99      	ldr	r3, [pc, #612]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d05b      	beq.n	80048fc <HAL_RCC_OscConfig+0x108>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d157      	bne.n	80048fc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e236      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004858:	d106      	bne.n	8004868 <HAL_RCC_OscConfig+0x74>
 800485a:	4b91      	ldr	r3, [pc, #580]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a90      	ldr	r2, [pc, #576]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004864:	6013      	str	r3, [r2, #0]
 8004866:	e01d      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004870:	d10c      	bne.n	800488c <HAL_RCC_OscConfig+0x98>
 8004872:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4a8a      	ldr	r2, [pc, #552]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004878:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800487c:	6013      	str	r3, [r2, #0]
 800487e:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4a87      	ldr	r2, [pc, #540]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004888:	6013      	str	r3, [r2, #0]
 800488a:	e00b      	b.n	80048a4 <HAL_RCC_OscConfig+0xb0>
 800488c:	4b84      	ldr	r3, [pc, #528]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a83      	ldr	r2, [pc, #524]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004892:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004896:	6013      	str	r3, [r2, #0]
 8004898:	4b81      	ldr	r3, [pc, #516]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4a80      	ldr	r2, [pc, #512]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800489e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048a2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d013      	beq.n	80048d4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048ac:	f7ff fcda 	bl	8004264 <HAL_GetTick>
 80048b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	e008      	b.n	80048c6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048b4:	f7ff fcd6 	bl	8004264 <HAL_GetTick>
 80048b8:	4602      	mov	r2, r0
 80048ba:	693b      	ldr	r3, [r7, #16]
 80048bc:	1ad3      	subs	r3, r2, r3
 80048be:	2b64      	cmp	r3, #100	; 0x64
 80048c0:	d901      	bls.n	80048c6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80048c2:	2303      	movs	r3, #3
 80048c4:	e1fb      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c6:	4b76      	ldr	r3, [pc, #472]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d0f0      	beq.n	80048b4 <HAL_RCC_OscConfig+0xc0>
 80048d2:	e014      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048d4:	f7ff fcc6 	bl	8004264 <HAL_GetTick>
 80048d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048da:	e008      	b.n	80048ee <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80048dc:	f7ff fcc2 	bl	8004264 <HAL_GetTick>
 80048e0:	4602      	mov	r2, r0
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1ad3      	subs	r3, r2, r3
 80048e6:	2b64      	cmp	r3, #100	; 0x64
 80048e8:	d901      	bls.n	80048ee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ea:	2303      	movs	r3, #3
 80048ec:	e1e7      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ee:	4b6c      	ldr	r3, [pc, #432]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d1f0      	bne.n	80048dc <HAL_RCC_OscConfig+0xe8>
 80048fa:	e000      	b.n	80048fe <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f003 0302 	and.w	r3, r3, #2
 8004906:	2b00      	cmp	r3, #0
 8004908:	d063      	beq.n	80049d2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800490a:	4b65      	ldr	r3, [pc, #404]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 800490c:	689b      	ldr	r3, [r3, #8]
 800490e:	f003 030c 	and.w	r3, r3, #12
 8004912:	2b00      	cmp	r3, #0
 8004914:	d00b      	beq.n	800492e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004916:	4b62      	ldr	r3, [pc, #392]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800491e:	2b08      	cmp	r3, #8
 8004920:	d11c      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004922:	4b5f      	ldr	r3, [pc, #380]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492a:	2b00      	cmp	r3, #0
 800492c:	d116      	bne.n	800495c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800492e:	4b5c      	ldr	r3, [pc, #368]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f003 0302 	and.w	r3, r3, #2
 8004936:	2b00      	cmp	r3, #0
 8004938:	d005      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	68db      	ldr	r3, [r3, #12]
 800493e:	2b01      	cmp	r3, #1
 8004940:	d001      	beq.n	8004946 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e1bb      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004946:	4b56      	ldr	r3, [pc, #344]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	00db      	lsls	r3, r3, #3
 8004954:	4952      	ldr	r1, [pc, #328]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004956:	4313      	orrs	r3, r2
 8004958:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800495a:	e03a      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d020      	beq.n	80049a6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004964:	4b4f      	ldr	r3, [pc, #316]	; (8004aa4 <HAL_RCC_OscConfig+0x2b0>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7ff fc7b 	bl	8004264 <HAL_GetTick>
 800496e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004970:	e008      	b.n	8004984 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004972:	f7ff fc77 	bl	8004264 <HAL_GetTick>
 8004976:	4602      	mov	r2, r0
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	1ad3      	subs	r3, r2, r3
 800497c:	2b02      	cmp	r3, #2
 800497e:	d901      	bls.n	8004984 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004980:	2303      	movs	r3, #3
 8004982:	e19c      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004984:	4b46      	ldr	r3, [pc, #280]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	f003 0302 	and.w	r3, r3, #2
 800498c:	2b00      	cmp	r3, #0
 800498e:	d0f0      	beq.n	8004972 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004990:	4b43      	ldr	r3, [pc, #268]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	691b      	ldr	r3, [r3, #16]
 800499c:	00db      	lsls	r3, r3, #3
 800499e:	4940      	ldr	r1, [pc, #256]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80049a0:	4313      	orrs	r3, r2
 80049a2:	600b      	str	r3, [r1, #0]
 80049a4:	e015      	b.n	80049d2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049a6:	4b3f      	ldr	r3, [pc, #252]	; (8004aa4 <HAL_RCC_OscConfig+0x2b0>)
 80049a8:	2200      	movs	r2, #0
 80049aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049ac:	f7ff fc5a 	bl	8004264 <HAL_GetTick>
 80049b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049b2:	e008      	b.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80049b4:	f7ff fc56 	bl	8004264 <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	2b02      	cmp	r3, #2
 80049c0:	d901      	bls.n	80049c6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80049c2:	2303      	movs	r3, #3
 80049c4:	e17b      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f003 0302 	and.w	r3, r3, #2
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d1f0      	bne.n	80049b4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0308 	and.w	r3, r3, #8
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d030      	beq.n	8004a40 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d016      	beq.n	8004a14 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049e6:	4b30      	ldr	r3, [pc, #192]	; (8004aa8 <HAL_RCC_OscConfig+0x2b4>)
 80049e8:	2201      	movs	r2, #1
 80049ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ec:	f7ff fc3a 	bl	8004264 <HAL_GetTick>
 80049f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80049f2:	e008      	b.n	8004a06 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80049f4:	f7ff fc36 	bl	8004264 <HAL_GetTick>
 80049f8:	4602      	mov	r2, r0
 80049fa:	693b      	ldr	r3, [r7, #16]
 80049fc:	1ad3      	subs	r3, r2, r3
 80049fe:	2b02      	cmp	r3, #2
 8004a00:	d901      	bls.n	8004a06 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004a02:	2303      	movs	r3, #3
 8004a04:	e15b      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a06:	4b26      	ldr	r3, [pc, #152]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a0a:	f003 0302 	and.w	r3, r3, #2
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d0f0      	beq.n	80049f4 <HAL_RCC_OscConfig+0x200>
 8004a12:	e015      	b.n	8004a40 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a14:	4b24      	ldr	r3, [pc, #144]	; (8004aa8 <HAL_RCC_OscConfig+0x2b4>)
 8004a16:	2200      	movs	r2, #0
 8004a18:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a1a:	f7ff fc23 	bl	8004264 <HAL_GetTick>
 8004a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a20:	e008      	b.n	8004a34 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004a22:	f7ff fc1f 	bl	8004264 <HAL_GetTick>
 8004a26:	4602      	mov	r2, r0
 8004a28:	693b      	ldr	r3, [r7, #16]
 8004a2a:	1ad3      	subs	r3, r2, r3
 8004a2c:	2b02      	cmp	r3, #2
 8004a2e:	d901      	bls.n	8004a34 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004a30:	2303      	movs	r3, #3
 8004a32:	e144      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a34:	4b1a      	ldr	r3, [pc, #104]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a36:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d1f0      	bne.n	8004a22 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f003 0304 	and.w	r3, r3, #4
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a0 	beq.w	8004b8e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a4e:	2300      	movs	r3, #0
 8004a50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a52:	4b13      	ldr	r3, [pc, #76]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	4b0f      	ldr	r3, [pc, #60]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a66:	4a0e      	ldr	r2, [pc, #56]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a68:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a6c:	6413      	str	r3, [r2, #64]	; 0x40
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <HAL_RCC_OscConfig+0x2ac>)
 8004a70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a76:	60bb      	str	r3, [r7, #8]
 8004a78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a7e:	4b0b      	ldr	r3, [pc, #44]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d121      	bne.n	8004ace <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a8a:	4b08      	ldr	r3, [pc, #32]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a07      	ldr	r2, [pc, #28]	; (8004aac <HAL_RCC_OscConfig+0x2b8>)
 8004a90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004a96:	f7ff fbe5 	bl	8004264 <HAL_GetTick>
 8004a9a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9c:	e011      	b.n	8004ac2 <HAL_RCC_OscConfig+0x2ce>
 8004a9e:	bf00      	nop
 8004aa0:	40023800 	.word	0x40023800
 8004aa4:	42470000 	.word	0x42470000
 8004aa8:	42470e80 	.word	0x42470e80
 8004aac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004ab0:	f7ff fbd8 	bl	8004264 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e0fd      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ac2:	4b81      	ldr	r3, [pc, #516]	; (8004cc8 <HAL_RCC_OscConfig+0x4d4>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d106      	bne.n	8004ae4 <HAL_RCC_OscConfig+0x2f0>
 8004ad6:	4b7d      	ldr	r3, [pc, #500]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ada:	4a7c      	ldr	r2, [pc, #496]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004adc:	f043 0301 	orr.w	r3, r3, #1
 8004ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ae2:	e01c      	b.n	8004b1e <HAL_RCC_OscConfig+0x32a>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	2b05      	cmp	r3, #5
 8004aea:	d10c      	bne.n	8004b06 <HAL_RCC_OscConfig+0x312>
 8004aec:	4b77      	ldr	r3, [pc, #476]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004aee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004af0:	4a76      	ldr	r2, [pc, #472]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004af2:	f043 0304 	orr.w	r3, r3, #4
 8004af6:	6713      	str	r3, [r2, #112]	; 0x70
 8004af8:	4b74      	ldr	r3, [pc, #464]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004afa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afc:	4a73      	ldr	r2, [pc, #460]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004afe:	f043 0301 	orr.w	r3, r3, #1
 8004b02:	6713      	str	r3, [r2, #112]	; 0x70
 8004b04:	e00b      	b.n	8004b1e <HAL_RCC_OscConfig+0x32a>
 8004b06:	4b71      	ldr	r3, [pc, #452]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b0a:	4a70      	ldr	r2, [pc, #448]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b0c:	f023 0301 	bic.w	r3, r3, #1
 8004b10:	6713      	str	r3, [r2, #112]	; 0x70
 8004b12:	4b6e      	ldr	r3, [pc, #440]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b16:	4a6d      	ldr	r2, [pc, #436]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b18:	f023 0304 	bic.w	r3, r3, #4
 8004b1c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	689b      	ldr	r3, [r3, #8]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d015      	beq.n	8004b52 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b26:	f7ff fb9d 	bl	8004264 <HAL_GetTick>
 8004b2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b2c:	e00a      	b.n	8004b44 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b2e:	f7ff fb99 	bl	8004264 <HAL_GetTick>
 8004b32:	4602      	mov	r2, r0
 8004b34:	693b      	ldr	r3, [r7, #16]
 8004b36:	1ad3      	subs	r3, r2, r3
 8004b38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d901      	bls.n	8004b44 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e0bc      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b44:	4b61      	ldr	r3, [pc, #388]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b48:	f003 0302 	and.w	r3, r3, #2
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d0ee      	beq.n	8004b2e <HAL_RCC_OscConfig+0x33a>
 8004b50:	e014      	b.n	8004b7c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b52:	f7ff fb87 	bl	8004264 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7ff fb83 	bl	8004264 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0a6      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b70:	4b56      	ldr	r3, [pc, #344]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d1ee      	bne.n	8004b5a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004b7c:	7dfb      	ldrb	r3, [r7, #23]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d105      	bne.n	8004b8e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004b82:	4b52      	ldr	r3, [pc, #328]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b86:	4a51      	ldr	r2, [pc, #324]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b8c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	699b      	ldr	r3, [r3, #24]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 8092 	beq.w	8004cbc <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004b98:	4b4c      	ldr	r3, [pc, #304]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004b9a:	689b      	ldr	r3, [r3, #8]
 8004b9c:	f003 030c 	and.w	r3, r3, #12
 8004ba0:	2b08      	cmp	r3, #8
 8004ba2:	d05c      	beq.n	8004c5e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d141      	bne.n	8004c30 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b48      	ldr	r3, [pc, #288]	; (8004cd0 <HAL_RCC_OscConfig+0x4dc>)
 8004bae:	2200      	movs	r2, #0
 8004bb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb2:	f7ff fb57 	bl	8004264 <HAL_GetTick>
 8004bb6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bb8:	e008      	b.n	8004bcc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bba:	f7ff fb53 	bl	8004264 <HAL_GetTick>
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	1ad3      	subs	r3, r2, r3
 8004bc4:	2b02      	cmp	r3, #2
 8004bc6:	d901      	bls.n	8004bcc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004bc8:	2303      	movs	r3, #3
 8004bca:	e078      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bcc:	4b3f      	ldr	r3, [pc, #252]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1f0      	bne.n	8004bba <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	6a1b      	ldr	r3, [r3, #32]
 8004be0:	431a      	orrs	r2, r3
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be6:	019b      	lsls	r3, r3, #6
 8004be8:	431a      	orrs	r2, r3
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bee:	085b      	lsrs	r3, r3, #1
 8004bf0:	3b01      	subs	r3, #1
 8004bf2:	041b      	lsls	r3, r3, #16
 8004bf4:	431a      	orrs	r2, r3
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bfa:	061b      	lsls	r3, r3, #24
 8004bfc:	4933      	ldr	r1, [pc, #204]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c02:	4b33      	ldr	r3, [pc, #204]	; (8004cd0 <HAL_RCC_OscConfig+0x4dc>)
 8004c04:	2201      	movs	r2, #1
 8004c06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7ff fb2c 	bl	8004264 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c10:	f7ff fb28 	bl	8004264 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b02      	cmp	r3, #2
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e04d      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c22:	4b2a      	ldr	r3, [pc, #168]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0x41c>
 8004c2e:	e045      	b.n	8004cbc <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c30:	4b27      	ldr	r3, [pc, #156]	; (8004cd0 <HAL_RCC_OscConfig+0x4dc>)
 8004c32:	2200      	movs	r2, #0
 8004c34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c36:	f7ff fb15 	bl	8004264 <HAL_GetTick>
 8004c3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c3c:	e008      	b.n	8004c50 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004c3e:	f7ff fb11 	bl	8004264 <HAL_GetTick>
 8004c42:	4602      	mov	r2, r0
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	1ad3      	subs	r3, r2, r3
 8004c48:	2b02      	cmp	r3, #2
 8004c4a:	d901      	bls.n	8004c50 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004c4c:	2303      	movs	r3, #3
 8004c4e:	e036      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c50:	4b1e      	ldr	r3, [pc, #120]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d1f0      	bne.n	8004c3e <HAL_RCC_OscConfig+0x44a>
 8004c5c:	e02e      	b.n	8004cbc <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	699b      	ldr	r3, [r3, #24]
 8004c62:	2b01      	cmp	r3, #1
 8004c64:	d101      	bne.n	8004c6a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004c66:	2301      	movs	r3, #1
 8004c68:	e029      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004c6a:	4b18      	ldr	r3, [pc, #96]	; (8004ccc <HAL_RCC_OscConfig+0x4d8>)
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	69db      	ldr	r3, [r3, #28]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d115      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004c92:	4013      	ands	r3, r2
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d10d      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004ca6:	429a      	cmp	r2, r3
 8004ca8:	d106      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004cb4:	429a      	cmp	r2, r3
 8004cb6:	d001      	beq.n	8004cbc <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8004cb8:	2301      	movs	r3, #1
 8004cba:	e000      	b.n	8004cbe <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004cbc:	2300      	movs	r3, #0
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3718      	adds	r7, #24
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40007000 	.word	0x40007000
 8004ccc:	40023800 	.word	0x40023800
 8004cd0:	42470060 	.word	0x42470060

08004cd4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2b00      	cmp	r3, #0
 8004ce2:	d101      	bne.n	8004ce8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e0cc      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004ce8:	4b68      	ldr	r3, [pc, #416]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 030f 	and.w	r3, r3, #15
 8004cf0:	683a      	ldr	r2, [r7, #0]
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	d90c      	bls.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cf6:	4b65      	ldr	r3, [pc, #404]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004cf8:	683a      	ldr	r2, [r7, #0]
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cfe:	4b63      	ldr	r3, [pc, #396]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 030f 	and.w	r3, r3, #15
 8004d06:	683a      	ldr	r2, [r7, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d001      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e0b8      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f003 0302 	and.w	r3, r3, #2
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d020      	beq.n	8004d5e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f003 0304 	and.w	r3, r3, #4
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d005      	beq.n	8004d34 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d28:	4b59      	ldr	r3, [pc, #356]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	4a58      	ldr	r2, [pc, #352]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d32:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0308 	and.w	r3, r3, #8
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d40:	4b53      	ldr	r3, [pc, #332]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	4a52      	ldr	r2, [pc, #328]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004d4a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d4c:	4b50      	ldr	r3, [pc, #320]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d4e:	689b      	ldr	r3, [r3, #8]
 8004d50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	494d      	ldr	r1, [pc, #308]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d5a:	4313      	orrs	r3, r2
 8004d5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d044      	beq.n	8004df4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	685b      	ldr	r3, [r3, #4]
 8004d6e:	2b01      	cmp	r3, #1
 8004d70:	d107      	bne.n	8004d82 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d72:	4b47      	ldr	r3, [pc, #284]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d119      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e07f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d003      	beq.n	8004d92 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004d8e:	2b03      	cmp	r3, #3
 8004d90:	d107      	bne.n	8004da2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d92:	4b3f      	ldr	r3, [pc, #252]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d9e:	2301      	movs	r3, #1
 8004da0:	e06f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004da2:	4b3b      	ldr	r3, [pc, #236]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 0302 	and.w	r3, r3, #2
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d101      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e067      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004db2:	4b37      	ldr	r3, [pc, #220]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004db4:	689b      	ldr	r3, [r3, #8]
 8004db6:	f023 0203 	bic.w	r2, r3, #3
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	4934      	ldr	r1, [pc, #208]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dc4:	f7ff fa4e 	bl	8004264 <HAL_GetTick>
 8004dc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dca:	e00a      	b.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004dcc:	f7ff fa4a 	bl	8004264 <HAL_GetTick>
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	1ad3      	subs	r3, r2, r3
 8004dd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e04f      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004de2:	4b2b      	ldr	r3, [pc, #172]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	f003 020c 	and.w	r2, r3, #12
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d1eb      	bne.n	8004dcc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004df4:	4b25      	ldr	r3, [pc, #148]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f003 030f 	and.w	r3, r3, #15
 8004dfc:	683a      	ldr	r2, [r7, #0]
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d20c      	bcs.n	8004e1c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e02:	4b22      	ldr	r3, [pc, #136]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e04:	683a      	ldr	r2, [r7, #0]
 8004e06:	b2d2      	uxtb	r2, r2
 8004e08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e0a:	4b20      	ldr	r3, [pc, #128]	; (8004e8c <HAL_RCC_ClockConfig+0x1b8>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f003 030f 	and.w	r3, r3, #15
 8004e12:	683a      	ldr	r2, [r7, #0]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	d001      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e032      	b.n	8004e82 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0304 	and.w	r3, r3, #4
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e28:	4b19      	ldr	r3, [pc, #100]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	68db      	ldr	r3, [r3, #12]
 8004e34:	4916      	ldr	r1, [pc, #88]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0308 	and.w	r3, r3, #8
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d009      	beq.n	8004e5a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004e46:	4b12      	ldr	r3, [pc, #72]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	00db      	lsls	r3, r3, #3
 8004e54:	490e      	ldr	r1, [pc, #56]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e56:	4313      	orrs	r3, r2
 8004e58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004e5a:	f000 f821 	bl	8004ea0 <HAL_RCC_GetSysClockFreq>
 8004e5e:	4601      	mov	r1, r0
 8004e60:	4b0b      	ldr	r3, [pc, #44]	; (8004e90 <HAL_RCC_ClockConfig+0x1bc>)
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	091b      	lsrs	r3, r3, #4
 8004e66:	f003 030f 	and.w	r3, r3, #15
 8004e6a:	4a0a      	ldr	r2, [pc, #40]	; (8004e94 <HAL_RCC_ClockConfig+0x1c0>)
 8004e6c:	5cd3      	ldrb	r3, [r2, r3]
 8004e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8004e72:	4a09      	ldr	r2, [pc, #36]	; (8004e98 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004e76:	4b09      	ldr	r3, [pc, #36]	; (8004e9c <HAL_RCC_ClockConfig+0x1c8>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7ff f9ae 	bl	80041dc <HAL_InitTick>

  return HAL_OK;
 8004e80:	2300      	movs	r3, #0
}
 8004e82:	4618      	mov	r0, r3
 8004e84:	3710      	adds	r7, #16
 8004e86:	46bd      	mov	sp, r7
 8004e88:	bd80      	pop	{r7, pc}
 8004e8a:	bf00      	nop
 8004e8c:	40023c00 	.word	0x40023c00
 8004e90:	40023800 	.word	0x40023800
 8004e94:	08009ae4 	.word	0x08009ae4
 8004e98:	20000000 	.word	0x20000000
 8004e9c:	2000004c 	.word	0x2000004c

08004ea0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	607b      	str	r3, [r7, #4]
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
 8004eae:	2300      	movs	r3, #0
 8004eb0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004eb6:	4b63      	ldr	r3, [pc, #396]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	f003 030c 	and.w	r3, r3, #12
 8004ebe:	2b04      	cmp	r3, #4
 8004ec0:	d007      	beq.n	8004ed2 <HAL_RCC_GetSysClockFreq+0x32>
 8004ec2:	2b08      	cmp	r3, #8
 8004ec4:	d008      	beq.n	8004ed8 <HAL_RCC_GetSysClockFreq+0x38>
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	f040 80b4 	bne.w	8005034 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004ecc:	4b5e      	ldr	r3, [pc, #376]	; (8005048 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004ece:	60bb      	str	r3, [r7, #8]
       break;
 8004ed0:	e0b3      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004ed2:	4b5e      	ldr	r3, [pc, #376]	; (800504c <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004ed4:	60bb      	str	r3, [r7, #8]
      break;
 8004ed6:	e0b0      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ed8:	4b5a      	ldr	r3, [pc, #360]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004eda:	685b      	ldr	r3, [r3, #4]
 8004edc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ee0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ee2:	4b58      	ldr	r3, [pc, #352]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d04a      	beq.n	8004f84 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004eee:	4b55      	ldr	r3, [pc, #340]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	099b      	lsrs	r3, r3, #6
 8004ef4:	f04f 0400 	mov.w	r4, #0
 8004ef8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	ea03 0501 	and.w	r5, r3, r1
 8004f04:	ea04 0602 	and.w	r6, r4, r2
 8004f08:	4629      	mov	r1, r5
 8004f0a:	4632      	mov	r2, r6
 8004f0c:	f04f 0300 	mov.w	r3, #0
 8004f10:	f04f 0400 	mov.w	r4, #0
 8004f14:	0154      	lsls	r4, r2, #5
 8004f16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004f1a:	014b      	lsls	r3, r1, #5
 8004f1c:	4619      	mov	r1, r3
 8004f1e:	4622      	mov	r2, r4
 8004f20:	1b49      	subs	r1, r1, r5
 8004f22:	eb62 0206 	sbc.w	r2, r2, r6
 8004f26:	f04f 0300 	mov.w	r3, #0
 8004f2a:	f04f 0400 	mov.w	r4, #0
 8004f2e:	0194      	lsls	r4, r2, #6
 8004f30:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004f34:	018b      	lsls	r3, r1, #6
 8004f36:	1a5b      	subs	r3, r3, r1
 8004f38:	eb64 0402 	sbc.w	r4, r4, r2
 8004f3c:	f04f 0100 	mov.w	r1, #0
 8004f40:	f04f 0200 	mov.w	r2, #0
 8004f44:	00e2      	lsls	r2, r4, #3
 8004f46:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004f4a:	00d9      	lsls	r1, r3, #3
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4614      	mov	r4, r2
 8004f50:	195b      	adds	r3, r3, r5
 8004f52:	eb44 0406 	adc.w	r4, r4, r6
 8004f56:	f04f 0100 	mov.w	r1, #0
 8004f5a:	f04f 0200 	mov.w	r2, #0
 8004f5e:	0262      	lsls	r2, r4, #9
 8004f60:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004f64:	0259      	lsls	r1, r3, #9
 8004f66:	460b      	mov	r3, r1
 8004f68:	4614      	mov	r4, r2
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	4621      	mov	r1, r4
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f04f 0400 	mov.w	r4, #0
 8004f74:	461a      	mov	r2, r3
 8004f76:	4623      	mov	r3, r4
 8004f78:	f7fb fe68 	bl	8000c4c <__aeabi_uldivmod>
 8004f7c:	4603      	mov	r3, r0
 8004f7e:	460c      	mov	r4, r1
 8004f80:	60fb      	str	r3, [r7, #12]
 8004f82:	e049      	b.n	8005018 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f84:	4b2f      	ldr	r3, [pc, #188]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004f86:	685b      	ldr	r3, [r3, #4]
 8004f88:	099b      	lsrs	r3, r3, #6
 8004f8a:	f04f 0400 	mov.w	r4, #0
 8004f8e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004f92:	f04f 0200 	mov.w	r2, #0
 8004f96:	ea03 0501 	and.w	r5, r3, r1
 8004f9a:	ea04 0602 	and.w	r6, r4, r2
 8004f9e:	4629      	mov	r1, r5
 8004fa0:	4632      	mov	r2, r6
 8004fa2:	f04f 0300 	mov.w	r3, #0
 8004fa6:	f04f 0400 	mov.w	r4, #0
 8004faa:	0154      	lsls	r4, r2, #5
 8004fac:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004fb0:	014b      	lsls	r3, r1, #5
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4622      	mov	r2, r4
 8004fb6:	1b49      	subs	r1, r1, r5
 8004fb8:	eb62 0206 	sbc.w	r2, r2, r6
 8004fbc:	f04f 0300 	mov.w	r3, #0
 8004fc0:	f04f 0400 	mov.w	r4, #0
 8004fc4:	0194      	lsls	r4, r2, #6
 8004fc6:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004fca:	018b      	lsls	r3, r1, #6
 8004fcc:	1a5b      	subs	r3, r3, r1
 8004fce:	eb64 0402 	sbc.w	r4, r4, r2
 8004fd2:	f04f 0100 	mov.w	r1, #0
 8004fd6:	f04f 0200 	mov.w	r2, #0
 8004fda:	00e2      	lsls	r2, r4, #3
 8004fdc:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004fe0:	00d9      	lsls	r1, r3, #3
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4614      	mov	r4, r2
 8004fe6:	195b      	adds	r3, r3, r5
 8004fe8:	eb44 0406 	adc.w	r4, r4, r6
 8004fec:	f04f 0100 	mov.w	r1, #0
 8004ff0:	f04f 0200 	mov.w	r2, #0
 8004ff4:	02a2      	lsls	r2, r4, #10
 8004ff6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004ffa:	0299      	lsls	r1, r3, #10
 8004ffc:	460b      	mov	r3, r1
 8004ffe:	4614      	mov	r4, r2
 8005000:	4618      	mov	r0, r3
 8005002:	4621      	mov	r1, r4
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f04f 0400 	mov.w	r4, #0
 800500a:	461a      	mov	r2, r3
 800500c:	4623      	mov	r3, r4
 800500e:	f7fb fe1d 	bl	8000c4c <__aeabi_uldivmod>
 8005012:	4603      	mov	r3, r0
 8005014:	460c      	mov	r4, r1
 8005016:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005018:	4b0a      	ldr	r3, [pc, #40]	; (8005044 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800501a:	685b      	ldr	r3, [r3, #4]
 800501c:	0c1b      	lsrs	r3, r3, #16
 800501e:	f003 0303 	and.w	r3, r3, #3
 8005022:	3301      	adds	r3, #1
 8005024:	005b      	lsls	r3, r3, #1
 8005026:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005028:	68fa      	ldr	r2, [r7, #12]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005030:	60bb      	str	r3, [r7, #8]
      break;
 8005032:	e002      	b.n	800503a <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005034:	4b04      	ldr	r3, [pc, #16]	; (8005048 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005036:	60bb      	str	r3, [r7, #8]
      break;
 8005038:	bf00      	nop
    }
  }
  return sysclockfreq;
 800503a:	68bb      	ldr	r3, [r7, #8]
}
 800503c:	4618      	mov	r0, r3
 800503e:	3714      	adds	r7, #20
 8005040:	46bd      	mov	sp, r7
 8005042:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005044:	40023800 	.word	0x40023800
 8005048:	00f42400 	.word	0x00f42400
 800504c:	007a1200 	.word	0x007a1200

08005050 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005058:	2300      	movs	r3, #0
 800505a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800505c:	2300      	movs	r3, #0
 800505e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f003 0301 	and.w	r3, r3, #1
 8005068:	2b00      	cmp	r3, #0
 800506a:	d105      	bne.n	8005078 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005074:	2b00      	cmp	r3, #0
 8005076:	d035      	beq.n	80050e4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005078:	4b62      	ldr	r3, [pc, #392]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800507a:	2200      	movs	r2, #0
 800507c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800507e:	f7ff f8f1 	bl	8004264 <HAL_GetTick>
 8005082:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005084:	e008      	b.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005086:	f7ff f8ed 	bl	8004264 <HAL_GetTick>
 800508a:	4602      	mov	r2, r0
 800508c:	697b      	ldr	r3, [r7, #20]
 800508e:	1ad3      	subs	r3, r2, r3
 8005090:	2b02      	cmp	r3, #2
 8005092:	d901      	bls.n	8005098 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005094:	2303      	movs	r3, #3
 8005096:	e0b0      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005098:	4b5b      	ldr	r3, [pc, #364]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d1f0      	bne.n	8005086 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	019a      	lsls	r2, r3, #6
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	071b      	lsls	r3, r3, #28
 80050b0:	4955      	ldr	r1, [pc, #340]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050b2:	4313      	orrs	r3, r2
 80050b4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80050b8:	4b52      	ldr	r3, [pc, #328]	; (8005204 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80050ba:	2201      	movs	r2, #1
 80050bc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80050be:	f7ff f8d1 	bl	8004264 <HAL_GetTick>
 80050c2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050c4:	e008      	b.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80050c6:	f7ff f8cd 	bl	8004264 <HAL_GetTick>
 80050ca:	4602      	mov	r2, r0
 80050cc:	697b      	ldr	r3, [r7, #20]
 80050ce:	1ad3      	subs	r3, r2, r3
 80050d0:	2b02      	cmp	r3, #2
 80050d2:	d901      	bls.n	80050d8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e090      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80050d8:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d0f0      	beq.n	80050c6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f003 0302 	and.w	r3, r3, #2
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	f000 8083 	beq.w	80051f8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
 80050f6:	4b44      	ldr	r3, [pc, #272]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050fa:	4a43      	ldr	r2, [pc, #268]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80050fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005100:	6413      	str	r3, [r2, #64]	; 0x40
 8005102:	4b41      	ldr	r3, [pc, #260]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800510a:	60fb      	str	r3, [r7, #12]
 800510c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800510e:	4b3f      	ldr	r3, [pc, #252]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	4a3e      	ldr	r2, [pc, #248]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005118:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800511a:	f7ff f8a3 	bl	8004264 <HAL_GetTick>
 800511e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005120:	e008      	b.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005122:	f7ff f89f 	bl	8004264 <HAL_GetTick>
 8005126:	4602      	mov	r2, r0
 8005128:	697b      	ldr	r3, [r7, #20]
 800512a:	1ad3      	subs	r3, r2, r3
 800512c:	2b02      	cmp	r3, #2
 800512e:	d901      	bls.n	8005134 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005130:	2303      	movs	r3, #3
 8005132:	e062      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005134:	4b35      	ldr	r3, [pc, #212]	; (800520c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800513c:	2b00      	cmp	r3, #0
 800513e:	d0f0      	beq.n	8005122 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005140:	4b31      	ldr	r3, [pc, #196]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005144:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005148:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	2b00      	cmp	r3, #0
 800514e:	d02f      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005158:	693a      	ldr	r2, [r7, #16]
 800515a:	429a      	cmp	r2, r3
 800515c:	d028      	beq.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800515e:	4b2a      	ldr	r3, [pc, #168]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005160:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005166:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005168:	4b29      	ldr	r3, [pc, #164]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800516a:	2201      	movs	r2, #1
 800516c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800516e:	4b28      	ldr	r3, [pc, #160]	; (8005210 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005170:	2200      	movs	r2, #0
 8005172:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005174:	4a24      	ldr	r2, [pc, #144]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800517a:	4b23      	ldr	r3, [pc, #140]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800517c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b01      	cmp	r3, #1
 8005184:	d114      	bne.n	80051b0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005186:	f7ff f86d 	bl	8004264 <HAL_GetTick>
 800518a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800518c:	e00a      	b.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800518e:	f7ff f869 	bl	8004264 <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	f241 3288 	movw	r2, #5000	; 0x1388
 800519c:	4293      	cmp	r3, r2
 800519e:	d901      	bls.n	80051a4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80051a0:	2303      	movs	r3, #3
 80051a2:	e02a      	b.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051a4:	4b18      	ldr	r3, [pc, #96]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051a8:	f003 0302 	and.w	r3, r3, #2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d0ee      	beq.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80051bc:	d10d      	bne.n	80051da <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80051be:	4b12      	ldr	r3, [pc, #72]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051c0:	689b      	ldr	r3, [r3, #8]
 80051c2:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	68db      	ldr	r3, [r3, #12]
 80051ca:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80051ce:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d2:	490d      	ldr	r1, [pc, #52]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	608b      	str	r3, [r1, #8]
 80051d8:	e005      	b.n	80051e6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80051da:	4b0b      	ldr	r3, [pc, #44]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051dc:	689b      	ldr	r3, [r3, #8]
 80051de:	4a0a      	ldr	r2, [pc, #40]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e0:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80051e4:	6093      	str	r3, [r2, #8]
 80051e6:	4b08      	ldr	r3, [pc, #32]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051e8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80051f2:	4905      	ldr	r1, [pc, #20]	; (8005208 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80051f4:	4313      	orrs	r3, r2
 80051f6:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3718      	adds	r7, #24
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	42470068 	.word	0x42470068
 8005208:	40023800 	.word	0x40023800
 800520c:	40007000 	.word	0x40007000
 8005210:	42470e40 	.word	0x42470e40

08005214 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2b00      	cmp	r3, #0
 8005220:	d101      	bne.n	8005226 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8005222:	2301      	movs	r3, #1
 8005224:	e083      	b.n	800532e <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	7f5b      	ldrb	r3, [r3, #29]
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b00      	cmp	r3, #0
 800522e:	d105      	bne.n	800523c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	2200      	movs	r2, #0
 8005234:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8005236:	6878      	ldr	r0, [r7, #4]
 8005238:	f7fd f918 	bl	800246c <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2202      	movs	r2, #2
 8005240:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	22ca      	movs	r2, #202	; 0xca
 8005248:	625a      	str	r2, [r3, #36]	; 0x24
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	2253      	movs	r2, #83	; 0x53
 8005250:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8005252:	6878      	ldr	r0, [r7, #4]
 8005254:	f000 f9fb 	bl	800564e <RTC_EnterInitMode>
 8005258:	4603      	mov	r3, r0
 800525a:	2b00      	cmp	r3, #0
 800525c:	d008      	beq.n	8005270 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	22ff      	movs	r2, #255	; 0xff
 8005264:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2204      	movs	r2, #4
 800526a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800526c:	2301      	movs	r3, #1
 800526e:	e05e      	b.n	800532e <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	689b      	ldr	r3, [r3, #8]
 8005276:	687a      	ldr	r2, [r7, #4]
 8005278:	6812      	ldr	r2, [r2, #0]
 800527a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800527e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005282:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	6899      	ldr	r1, [r3, #8]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	431a      	orrs	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	695b      	ldr	r3, [r3, #20]
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	430a      	orrs	r2, r1
 80052a0:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68d2      	ldr	r2, [r2, #12]
 80052aa:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	6919      	ldr	r1, [r3, #16]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	041a      	lsls	r2, r3, #16
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68da      	ldr	r2, [r3, #12]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052ce:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	689b      	ldr	r3, [r3, #8]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d10e      	bne.n	80052fc <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80052de:	6878      	ldr	r0, [r7, #4]
 80052e0:	f000 f98d 	bl	80055fe <HAL_RTC_WaitForSynchro>
 80052e4:	4603      	mov	r3, r0
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d008      	beq.n	80052fc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	22ff      	movs	r2, #255	; 0xff
 80052f0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	2204      	movs	r2, #4
 80052f6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80052f8:	2301      	movs	r3, #1
 80052fa:	e018      	b.n	800532e <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800530a:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	699a      	ldr	r2, [r3, #24]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	430a      	orrs	r2, r1
 800531c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	22ff      	movs	r2, #255	; 0xff
 8005324:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2201      	movs	r2, #1
 800532a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800532c:	2300      	movs	r3, #0
  }
}
 800532e:	4618      	mov	r0, r3
 8005330:	3708      	adds	r7, #8
 8005332:	46bd      	mov	sp, r7
 8005334:	bd80      	pop	{r7, pc}

08005336 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8005336:	b590      	push	{r4, r7, lr}
 8005338:	b087      	sub	sp, #28
 800533a:	af00      	add	r7, sp, #0
 800533c:	60f8      	str	r0, [r7, #12]
 800533e:	60b9      	str	r1, [r7, #8]
 8005340:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	7f1b      	ldrb	r3, [r3, #28]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d101      	bne.n	8005352 <HAL_RTC_SetTime+0x1c>
 800534e:	2302      	movs	r3, #2
 8005350:	e0aa      	b.n	80054a8 <HAL_RTC_SetTime+0x172>
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2201      	movs	r2, #1
 8005356:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2202      	movs	r2, #2
 800535c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d126      	bne.n	80053b2 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536e:	2b00      	cmp	r3, #0
 8005370:	d102      	bne.n	8005378 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2200      	movs	r2, #0
 8005376:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	4618      	mov	r0, r3
 800537e:	f000 f992 	bl	80056a6 <RTC_ByteToBcd2>
 8005382:	4603      	mov	r3, r0
 8005384:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8005386:	68bb      	ldr	r3, [r7, #8]
 8005388:	785b      	ldrb	r3, [r3, #1]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 f98b 	bl	80056a6 <RTC_ByteToBcd2>
 8005390:	4603      	mov	r3, r0
 8005392:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8005394:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	789b      	ldrb	r3, [r3, #2]
 800539a:	4618      	mov	r0, r3
 800539c:	f000 f983 	bl	80056a6 <RTC_ByteToBcd2>
 80053a0:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 80053a2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	78db      	ldrb	r3, [r3, #3]
 80053aa:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
 80053b0:	e018      	b.n	80053e4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d102      	bne.n	80053c6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80053c0:	68bb      	ldr	r3, [r7, #8]
 80053c2:	2200      	movs	r2, #0
 80053c4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80053c6:	68bb      	ldr	r3, [r7, #8]
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	785b      	ldrb	r3, [r3, #1]
 80053d0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80053d2:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80053d4:	68ba      	ldr	r2, [r7, #8]
 80053d6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80053d8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80053e0:	4313      	orrs	r3, r2
 80053e2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	22ca      	movs	r2, #202	; 0xca
 80053ea:	625a      	str	r2, [r3, #36]	; 0x24
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	2253      	movs	r2, #83	; 0x53
 80053f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f92a 	bl	800564e <RTC_EnterInitMode>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	22ff      	movs	r2, #255	; 0xff
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	2204      	movs	r2, #4
 800540c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2200      	movs	r2, #0
 8005412:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e047      	b.n	80054a8 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681a      	ldr	r2, [r3, #0]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8005422:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8005426:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	689a      	ldr	r2, [r3, #8]
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005436:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	6899      	ldr	r1, [r3, #8]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	68da      	ldr	r2, [r3, #12]
 8005442:	68bb      	ldr	r3, [r7, #8]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	431a      	orrs	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68da      	ldr	r2, [r3, #12]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800545e:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	f003 0320 	and.w	r3, r3, #32
 800546a:	2b00      	cmp	r3, #0
 800546c:	d111      	bne.n	8005492 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800546e:	68f8      	ldr	r0, [r7, #12]
 8005470:	f000 f8c5 	bl	80055fe <HAL_RTC_WaitForSynchro>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	d00b      	beq.n	8005492 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	22ff      	movs	r2, #255	; 0xff
 8005480:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	2204      	movs	r2, #4
 8005486:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	2200      	movs	r2, #0
 800548c:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e00a      	b.n	80054a8 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	22ff      	movs	r2, #255	; 0xff
 8005498:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2201      	movs	r2, #1
 800549e:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2200      	movs	r2, #0
 80054a4:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80054a6:	2300      	movs	r3, #0
  }
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	371c      	adds	r7, #28
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd90      	pop	{r4, r7, pc}

080054b0 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80054b0:	b590      	push	{r4, r7, lr}
 80054b2:	b087      	sub	sp, #28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80054bc:	2300      	movs	r3, #0
 80054be:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	7f1b      	ldrb	r3, [r3, #28]
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d101      	bne.n	80054cc <HAL_RTC_SetDate+0x1c>
 80054c8:	2302      	movs	r3, #2
 80054ca:	e094      	b.n	80055f6 <HAL_RTC_SetDate+0x146>
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	2201      	movs	r2, #1
 80054d0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	2202      	movs	r2, #2
 80054d6:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10e      	bne.n	80054fc <HAL_RTC_SetDate+0x4c>
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	785b      	ldrb	r3, [r3, #1]
 80054e2:	f003 0310 	and.w	r3, r3, #16
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d008      	beq.n	80054fc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	785b      	ldrb	r3, [r3, #1]
 80054ee:	f023 0310 	bic.w	r3, r3, #16
 80054f2:	b2db      	uxtb	r3, r3
 80054f4:	330a      	adds	r3, #10
 80054f6:	b2da      	uxtb	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d11c      	bne.n	800553c <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	78db      	ldrb	r3, [r3, #3]
 8005506:	4618      	mov	r0, r3
 8005508:	f000 f8cd 	bl	80056a6 <RTC_ByteToBcd2>
 800550c:	4603      	mov	r3, r0
 800550e:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	785b      	ldrb	r3, [r3, #1]
 8005514:	4618      	mov	r0, r3
 8005516:	f000 f8c6 	bl	80056a6 <RTC_ByteToBcd2>
 800551a:	4603      	mov	r3, r0
 800551c:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 800551e:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8005520:	68bb      	ldr	r3, [r7, #8]
 8005522:	789b      	ldrb	r3, [r3, #2]
 8005524:	4618      	mov	r0, r3
 8005526:	f000 f8be 	bl	80056a6 <RTC_ByteToBcd2>
 800552a:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 800552c:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	781b      	ldrb	r3, [r3, #0]
 8005534:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8005536:	4313      	orrs	r3, r2
 8005538:	617b      	str	r3, [r7, #20]
 800553a:	e00e      	b.n	800555a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	78db      	ldrb	r3, [r3, #3]
 8005540:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	785b      	ldrb	r3, [r3, #1]
 8005546:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005548:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 800554a:	68ba      	ldr	r2, [r7, #8]
 800554c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800554e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	781b      	ldrb	r3, [r3, #0]
 8005554:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	22ca      	movs	r2, #202	; 0xca
 8005560:	625a      	str	r2, [r3, #36]	; 0x24
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	2253      	movs	r2, #83	; 0x53
 8005568:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800556a:	68f8      	ldr	r0, [r7, #12]
 800556c:	f000 f86f 	bl	800564e <RTC_EnterInitMode>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00b      	beq.n	800558e <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	22ff      	movs	r2, #255	; 0xff
 800557c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2204      	movs	r2, #4
 8005582:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2200      	movs	r2, #0
 8005588:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e033      	b.n	80055f6 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005598:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800559c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	68da      	ldr	r2, [r3, #12]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ac:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f003 0320 	and.w	r3, r3, #32
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d111      	bne.n	80055e0 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f81e 	bl	80055fe <HAL_RTC_WaitForSynchro>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00b      	beq.n	80055e0 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	22ff      	movs	r2, #255	; 0xff
 80055ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2204      	movs	r2, #4
 80055d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2200      	movs	r2, #0
 80055da:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e00a      	b.n	80055f6 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	22ff      	movs	r2, #255	; 0xff
 80055e6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2201      	movs	r2, #1
 80055ec:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	2200      	movs	r2, #0
 80055f2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80055f4:	2300      	movs	r3, #0
  }
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	371c      	adds	r7, #28
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd90      	pop	{r4, r7, pc}

080055fe <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80055fe:	b580      	push	{r7, lr}
 8005600:	b084      	sub	sp, #16
 8005602:	af00      	add	r7, sp, #0
 8005604:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005606:	2300      	movs	r3, #0
 8005608:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68da      	ldr	r2, [r3, #12]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005618:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800561a:	f7fe fe23 	bl	8004264 <HAL_GetTick>
 800561e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005620:	e009      	b.n	8005636 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8005622:	f7fe fe1f 	bl	8004264 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005630:	d901      	bls.n	8005636 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8005632:	2303      	movs	r3, #3
 8005634:	e007      	b.n	8005646 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	68db      	ldr	r3, [r3, #12]
 800563c:	f003 0320 	and.w	r3, r3, #32
 8005640:	2b00      	cmp	r3, #0
 8005642:	d0ee      	beq.n	8005622 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3710      	adds	r7, #16
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800564e:	b580      	push	{r7, lr}
 8005650:	b084      	sub	sp, #16
 8005652:	af00      	add	r7, sp, #0
 8005654:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005656:	2300      	movs	r3, #0
 8005658:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68db      	ldr	r3, [r3, #12]
 8005660:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005664:	2b00      	cmp	r3, #0
 8005666:	d119      	bne.n	800569c <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f04f 32ff 	mov.w	r2, #4294967295
 8005670:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005672:	f7fe fdf7 	bl	8004264 <HAL_GetTick>
 8005676:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8005678:	e009      	b.n	800568e <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800567a:	f7fe fdf3 	bl	8004264 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005688:	d901      	bls.n	800568e <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e007      	b.n	800569e <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	68db      	ldr	r3, [r3, #12]
 8005694:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005698:	2b00      	cmp	r3, #0
 800569a:	d0ee      	beq.n	800567a <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800569c:	2300      	movs	r3, #0
}
 800569e:	4618      	mov	r0, r3
 80056a0:	3710      	adds	r7, #16
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bd80      	pop	{r7, pc}

080056a6 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	4603      	mov	r3, r0
 80056ae:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80056b0:	2300      	movs	r3, #0
 80056b2:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80056b4:	e005      	b.n	80056c2 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	3301      	adds	r3, #1
 80056ba:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80056bc:	79fb      	ldrb	r3, [r7, #7]
 80056be:	3b0a      	subs	r3, #10
 80056c0:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80056c2:	79fb      	ldrb	r3, [r7, #7]
 80056c4:	2b09      	cmp	r3, #9
 80056c6:	d8f6      	bhi.n	80056b6 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	b2db      	uxtb	r3, r3
 80056cc:	011b      	lsls	r3, r3, #4
 80056ce:	b2da      	uxtb	r2, r3
 80056d0:	79fb      	ldrb	r3, [r7, #7]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	b2db      	uxtb	r3, r3
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	3714      	adds	r7, #20
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr

080056e2 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d101      	bne.n	80056f4 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	e022      	b.n	800573a <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fc fec6 	bl	8002498 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2203      	movs	r2, #3
 8005710:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8005714:	6878      	ldr	r0, [r7, #4]
 8005716:	f000 f815 	bl	8005744 <HAL_SD_InitCard>
 800571a:	4603      	mov	r3, r0
 800571c:	2b00      	cmp	r3, #0
 800571e:	d001      	beq.n	8005724 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8005720:	2301      	movs	r3, #1
 8005722:	e00a      	b.n	800573a <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	2201      	movs	r2, #1
 8005734:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}
	...

08005744 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8005744:	b5b0      	push	{r4, r5, r7, lr}
 8005746:	b08e      	sub	sp, #56	; 0x38
 8005748:	af04      	add	r7, sp, #16
 800574a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800574c:	2300      	movs	r3, #0
 800574e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8005750:	2300      	movs	r3, #0
 8005752:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8005754:	2300      	movs	r3, #0
 8005756:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8005758:	2300      	movs	r3, #0
 800575a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800575c:	2300      	movs	r3, #0
 800575e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8005760:	2376      	movs	r3, #118	; 0x76
 8005762:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681d      	ldr	r5, [r3, #0]
 8005768:	466c      	mov	r4, sp
 800576a:	f107 0314 	add.w	r3, r7, #20
 800576e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005772:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005776:	f107 0308 	add.w	r3, r7, #8
 800577a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800577c:	4628      	mov	r0, r5
 800577e:	f001 fa41 	bl	8006c04 <SDIO_Init>
 8005782:	4603      	mov	r3, r0
 8005784:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8005788:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800578c:	2b00      	cmp	r3, #0
 800578e:	d001      	beq.n	8005794 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8005790:	2301      	movs	r3, #1
 8005792:	e031      	b.n	80057f8 <HAL_SD_InitCard+0xb4>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 8005794:	4b1a      	ldr	r3, [pc, #104]	; (8005800 <HAL_SD_InitCard+0xbc>)
 8005796:	2200      	movs	r2, #0
 8005798:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	4618      	mov	r0, r3
 80057a0:	f001 fa79 	bl	8006c96 <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <HAL_SD_InitCard+0xbc>)
 80057a6:	2201      	movs	r2, #1
 80057a8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f000 ff00 	bl	80065b0 <SD_PowerON>
 80057b0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d00b      	beq.n	80057d0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2201      	movs	r2, #1
 80057bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	431a      	orrs	r2, r3
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e013      	b.n	80057f8 <HAL_SD_InitCard+0xb4>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f000 fe1f 	bl	8006414 <SD_InitCard>
 80057d6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80057d8:	6a3b      	ldr	r3, [r7, #32]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00b      	beq.n	80057f6 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2201      	movs	r2, #1
 80057e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	431a      	orrs	r2, r3
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e000      	b.n	80057f8 <HAL_SD_InitCard+0xb4>
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3728      	adds	r7, #40	; 0x28
 80057fc:	46bd      	mov	sp, r7
 80057fe:	bdb0      	pop	{r4, r5, r7, pc}
 8005800:	422580a0 	.word	0x422580a0

08005804 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b092      	sub	sp, #72	; 0x48
 8005808:	af00      	add	r7, sp, #0
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	60b9      	str	r1, [r7, #8]
 800580e:	607a      	str	r2, [r7, #4]
 8005810:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005812:	f7fe fd27 	bl	8004264 <HAL_GetTick>
 8005816:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005820:	68bb      	ldr	r3, [r7, #8]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d107      	bne.n	8005836 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005832:	2301      	movs	r3, #1
 8005834:	e1d9      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800583c:	b2db      	uxtb	r3, r3
 800583e:	2b01      	cmp	r3, #1
 8005840:	f040 81cc 	bne.w	8005bdc <HAL_SD_ReadBlocks+0x3d8>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2200      	movs	r2, #0
 8005848:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 800584a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	441a      	add	r2, r3
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	429a      	cmp	r2, r3
 8005856:	d907      	bls.n	8005868 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800585c:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e1c0      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	2203      	movs	r2, #3
 800586c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800587c:	2b01      	cmp	r3, #1
 800587e:	d002      	beq.n	8005886 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 8005880:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005882:	025b      	lsls	r3, r3, #9
 8005884:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800588e:	4618      	mov	r0, r3
 8005890:	f001 fa94 	bl	8006dbc <SDMMC_CmdBlockLength>
 8005894:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005896:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005898:	2b00      	cmp	r3, #0
 800589a:	d00f      	beq.n	80058bc <HAL_SD_ReadBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	4a9b      	ldr	r2, [pc, #620]	; (8005b10 <HAL_SD_ReadBlocks+0x30c>)
 80058a2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80058a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80058aa:	431a      	orrs	r2, r3
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 80058b8:	2301      	movs	r3, #1
 80058ba:	e196      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80058bc:	f04f 33ff 	mov.w	r3, #4294967295
 80058c0:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	025b      	lsls	r3, r3, #9
 80058c6:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80058c8:	2390      	movs	r3, #144	; 0x90
 80058ca:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80058cc:	2302      	movs	r3, #2
 80058ce:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80058d0:	2300      	movs	r3, #0
 80058d2:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80058d4:	2301      	movs	r3, #1
 80058d6:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f107 0214 	add.w	r2, r7, #20
 80058e0:	4611      	mov	r1, r2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 fa3e 	bl	8006d64 <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	2b01      	cmp	r3, #1
 80058ec:	d90a      	bls.n	8005904 <HAL_SD_ReadBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2202      	movs	r2, #2
 80058f2:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80058fa:	4618      	mov	r0, r3
 80058fc:	f001 faa2 	bl	8006e44 <SDMMC_CmdReadMultiBlock>
 8005900:	6478      	str	r0, [r7, #68]	; 0x44
 8005902:	e009      	b.n	8005918 <HAL_SD_ReadBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	2201      	movs	r2, #1
 8005908:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005910:	4618      	mov	r0, r3
 8005912:	f001 fa75 	bl	8006e00 <SDMMC_CmdReadSingleBlock>
 8005916:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800591a:	2b00      	cmp	r3, #0
 800591c:	d012      	beq.n	8005944 <HAL_SD_ReadBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	4a7b      	ldr	r2, [pc, #492]	; (8005b10 <HAL_SD_ReadBlocks+0x30c>)
 8005924:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800592a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800592c:	431a      	orrs	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2201      	movs	r2, #1
 8005936:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005940:	2301      	movs	r3, #1
 8005942:	e152      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 8005944:	69bb      	ldr	r3, [r7, #24]
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005948:	e061      	b.n	8005a0e <HAL_SD_ReadBlocks+0x20a>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005950:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005954:	2b00      	cmp	r3, #0
 8005956:	d03c      	beq.n	80059d2 <HAL_SD_ReadBlocks+0x1ce>
 8005958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800595a:	2b00      	cmp	r3, #0
 800595c:	d039      	beq.n	80059d2 <HAL_SD_ReadBlocks+0x1ce>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 800595e:	2300      	movs	r3, #0
 8005960:	643b      	str	r3, [r7, #64]	; 0x40
 8005962:	e033      	b.n	80059cc <HAL_SD_ReadBlocks+0x1c8>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	4618      	mov	r0, r3
 800596a:	f001 f976 	bl	8006c5a <SDIO_ReadFIFO>
 800596e:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8005970:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005972:	b2da      	uxtb	r2, r3
 8005974:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005976:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 8005978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597a:	3301      	adds	r3, #1
 800597c:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 800597e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005980:	3b01      	subs	r3, #1
 8005982:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005986:	0a1b      	lsrs	r3, r3, #8
 8005988:	b2da      	uxtb	r2, r3
 800598a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800598c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800598e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005990:	3301      	adds	r3, #1
 8005992:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005994:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005996:	3b01      	subs	r3, #1
 8005998:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	0c1b      	lsrs	r3, r3, #16
 800599e:	b2da      	uxtb	r2, r3
 80059a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	3301      	adds	r3, #1
 80059a8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80059aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059ac:	3b01      	subs	r3, #1
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80059b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80059b2:	0e1b      	lsrs	r3, r3, #24
 80059b4:	b2da      	uxtb	r2, r3
 80059b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059b8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80059ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059bc:	3301      	adds	r3, #1
 80059be:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80059c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c2:	3b01      	subs	r3, #1
 80059c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80059c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059c8:	3301      	adds	r3, #1
 80059ca:	643b      	str	r3, [r7, #64]	; 0x40
 80059cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059ce:	2b07      	cmp	r3, #7
 80059d0:	d9c8      	bls.n	8005964 <HAL_SD_ReadBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80059d2:	f7fe fc47 	bl	8004264 <HAL_GetTick>
 80059d6:	4602      	mov	r2, r0
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	1ad3      	subs	r3, r2, r3
 80059dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80059de:	429a      	cmp	r2, r3
 80059e0:	d902      	bls.n	80059e8 <HAL_SD_ReadBlocks+0x1e4>
 80059e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d112      	bne.n	8005a0e <HAL_SD_ReadBlocks+0x20a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4a48      	ldr	r2, [pc, #288]	; (8005b10 <HAL_SD_ReadBlocks+0x30c>)
 80059ee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059f4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2200      	movs	r2, #0
 8005a08:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005a0a:	2303      	movs	r3, #3
 8005a0c:	e0ed      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a14:	f240 332a 	movw	r3, #810	; 0x32a
 8005a18:	4013      	ands	r3, r2
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d095      	beq.n	800594a <HAL_SD_ReadBlocks+0x146>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d022      	beq.n	8005a72 <HAL_SD_ReadBlocks+0x26e>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b01      	cmp	r3, #1
 8005a30:	d91f      	bls.n	8005a72 <HAL_SD_ReadBlocks+0x26e>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	2b03      	cmp	r3, #3
 8005a38:	d01b      	beq.n	8005a72 <HAL_SD_ReadBlocks+0x26e>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	4618      	mov	r0, r3
 8005a40:	f001 fa66 	bl	8006f10 <SDMMC_CmdStopTransfer>
 8005a44:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005a46:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d012      	beq.n	8005a72 <HAL_SD_ReadBlocks+0x26e>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	4a2f      	ldr	r2, [pc, #188]	; (8005b10 <HAL_SD_ReadBlocks+0x30c>)
 8005a52:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005a5a:	431a      	orrs	r2, r3
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2201      	movs	r2, #1
 8005a64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e0bb      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a78:	f003 0308 	and.w	r3, r3, #8
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d012      	beq.n	8005aa6 <HAL_SD_ReadBlocks+0x2a2>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	4a22      	ldr	r2, [pc, #136]	; (8005b10 <HAL_SD_ReadBlocks+0x30c>)
 8005a86:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a8c:	f043 0208 	orr.w	r2, r3, #8
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2201      	movs	r2, #1
 8005a98:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005aa2:	2301      	movs	r3, #1
 8005aa4:	e0a1      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aac:	f003 0302 	and.w	r3, r3, #2
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <HAL_SD_ReadBlocks+0x2d6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <HAL_SD_ReadBlocks+0x30c>)
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	f043 0202 	orr.w	r2, r3, #2
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ad6:	2301      	movs	r3, #1
 8005ad8:	e087      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ae0:	f003 0320 	and.w	r3, r3, #32
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d064      	beq.n	8005bb2 <HAL_SD_ReadBlocks+0x3ae>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	4a08      	ldr	r2, [pc, #32]	; (8005b10 <HAL_SD_ReadBlocks+0x30c>)
 8005aee:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	f043 0220 	orr.w	r2, r3, #32
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2200      	movs	r2, #0
 8005b08:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	e06d      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
 8005b0e:	bf00      	nop
 8005b10:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4618      	mov	r0, r3
 8005b1a:	f001 f89e 	bl	8006c5a <SDIO_ReadFIFO>
 8005b1e:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	b2da      	uxtb	r2, r3
 8005b24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b26:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005b28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b2a:	3301      	adds	r3, #1
 8005b2c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005b2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b30:	3b01      	subs	r3, #1
 8005b32:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8005b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b36:	0a1b      	lsrs	r3, r3, #8
 8005b38:	b2da      	uxtb	r2, r3
 8005b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b3c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b40:	3301      	adds	r3, #1
 8005b42:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b46:	3b01      	subs	r3, #1
 8005b48:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8005b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4c:	0c1b      	lsrs	r3, r3, #16
 8005b4e:	b2da      	uxtb	r2, r3
 8005b50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b52:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005b54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b56:	3301      	adds	r3, #1
 8005b58:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005b5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8005b60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b62:	0e1b      	lsrs	r3, r3, #24
 8005b64:	b2da      	uxtb	r2, r3
 8005b66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b68:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b6c:	3301      	adds	r3, #1
 8005b6e:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8005b70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b72:	3b01      	subs	r3, #1
 8005b74:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005b76:	f7fe fb75 	bl	8004264 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005b82:	429a      	cmp	r2, r3
 8005b84:	d902      	bls.n	8005b8c <HAL_SD_ReadBlocks+0x388>
 8005b86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d112      	bne.n	8005bb2 <HAL_SD_ReadBlocks+0x3ae>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	4a18      	ldr	r2, [pc, #96]	; (8005bf4 <HAL_SD_ReadBlocks+0x3f0>)
 8005b92:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b98:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8005bae:	2301      	movs	r3, #1
 8005bb0:	e01b      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d002      	beq.n	8005bc6 <HAL_SD_ReadBlocks+0x3c2>
 8005bc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1a6      	bne.n	8005b14 <HAL_SD_ReadBlocks+0x310>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f240 523a 	movw	r2, #1338	; 0x53a
 8005bce:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2201      	movs	r2, #1
 8005bd4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	e006      	b.n	8005bea <HAL_SD_ReadBlocks+0x3e6>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
  }
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	3748      	adds	r7, #72	; 0x48
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	bd80      	pop	{r7, pc}
 8005bf2:	bf00      	nop
 8005bf4:	004005ff 	.word	0x004005ff

08005bf8 <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b092      	sub	sp, #72	; 0x48
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
 8005c04:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8005c06:	f7fe fb2d 	bl	8004264 <HAL_GetTick>
 8005c0a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8005c14:	68bb      	ldr	r3, [r7, #8]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d107      	bne.n	8005c2a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c1e:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e184      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	f040 8177 	bne.w	8005f26 <HAL_SD_WriteBlocks+0x32e>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2200      	movs	r2, #0
 8005c3c:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8005c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	441a      	add	r2, r3
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d907      	bls.n	8005c5c <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c50:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e16b      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	2203      	movs	r2, #3
 8005c60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	d002      	beq.n	8005c7a <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8005c74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c76:	025b      	lsls	r3, r3, #9
 8005c78:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Set Block Size for Card */
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005c82:	4618      	mov	r0, r3
 8005c84:	f001 f89a 	bl	8006dbc <SDMMC_CmdBlockLength>
 8005c88:	6478      	str	r0, [r7, #68]	; 0x44
    if(errorstate != HAL_SD_ERROR_NONE)
 8005c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00f      	beq.n	8005cb0 <HAL_SD_WriteBlocks+0xb8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a9d      	ldr	r2, [pc, #628]	; (8005f0c <HAL_SD_WriteBlocks+0x314>)
 8005c96:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c9e:	431a      	orrs	r2, r3
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8005cac:	2301      	movs	r3, #1
 8005cae:	e141      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8005cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb4:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	025b      	lsls	r3, r3, #9
 8005cba:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8005cbc:	2390      	movs	r3, #144	; 0x90
 8005cbe:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8005cc8:	2301      	movs	r3, #1
 8005cca:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f107 0218 	add.w	r2, r7, #24
 8005cd4:	4611      	mov	r1, r2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 f844 	bl	8006d64 <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	2b01      	cmp	r3, #1
 8005ce0:	d90a      	bls.n	8005cf8 <HAL_SD_WriteBlocks+0x100>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	2220      	movs	r2, #32
 8005ce6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005cee:	4618      	mov	r0, r3
 8005cf0:	f001 f8ec 	bl	8006ecc <SDMMC_CmdWriteMultiBlock>
 8005cf4:	6478      	str	r0, [r7, #68]	; 0x44
 8005cf6:	e009      	b.n	8005d0c <HAL_SD_WriteBlocks+0x114>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2210      	movs	r2, #16
 8005cfc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005d04:	4618      	mov	r0, r3
 8005d06:	f001 f8bf 	bl	8006e88 <SDMMC_CmdWriteSingleBlock>
 8005d0a:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8005d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d012      	beq.n	8005d38 <HAL_SD_WriteBlocks+0x140>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a7d      	ldr	r2, [pc, #500]	; (8005f0c <HAL_SD_WriteBlocks+0x314>)
 8005d18:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d20:	431a      	orrs	r2, r3
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2201      	movs	r2, #1
 8005d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e0fd      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005d3c:	e065      	b.n	8005e0a <HAL_SD_WriteBlocks+0x212>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d040      	beq.n	8005dce <HAL_SD_WriteBlocks+0x1d6>
 8005d4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d03d      	beq.n	8005dce <HAL_SD_WriteBlocks+0x1d6>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8005d52:	2300      	movs	r3, #0
 8005d54:	643b      	str	r3, [r7, #64]	; 0x40
 8005d56:	e037      	b.n	8005dc8 <HAL_SD_WriteBlocks+0x1d0>
        {
          data = (uint32_t)(*tempbuff);
 8005d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d5a:	781b      	ldrb	r3, [r3, #0]
 8005d5c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d60:	3301      	adds	r3, #1
 8005d62:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d66:	3b01      	subs	r3, #1
 8005d68:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8005d6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d6c:	781b      	ldrb	r3, [r3, #0]
 8005d6e:	021a      	lsls	r2, r3, #8
 8005d70:	697b      	ldr	r3, [r7, #20]
 8005d72:	4313      	orrs	r3, r2
 8005d74:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d78:	3301      	adds	r3, #1
 8005d7a:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d7e:	3b01      	subs	r3, #1
 8005d80:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8005d82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d84:	781b      	ldrb	r3, [r3, #0]
 8005d86:	041a      	lsls	r2, r3, #16
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005d8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d90:	3301      	adds	r3, #1
 8005d92:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005d94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d96:	3b01      	subs	r3, #1
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8005d9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	061a      	lsls	r2, r3, #24
 8005da0:	697b      	ldr	r3, [r7, #20]
 8005da2:	4313      	orrs	r3, r2
 8005da4:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8005da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005da8:	3301      	adds	r3, #1
 8005daa:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8005dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005dae:	3b01      	subs	r3, #1
 8005db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f107 0214 	add.w	r2, r7, #20
 8005dba:	4611      	mov	r1, r2
 8005dbc:	4618      	mov	r0, r3
 8005dbe:	f000 ff59 	bl	8006c74 <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8005dc2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	643b      	str	r3, [r7, #64]	; 0x40
 8005dc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005dca:	2b07      	cmp	r3, #7
 8005dcc:	d9c4      	bls.n	8005d58 <HAL_SD_WriteBlocks+0x160>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8005dce:	f7fe fa49 	bl	8004264 <HAL_GetTick>
 8005dd2:	4602      	mov	r2, r0
 8005dd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dd6:	1ad3      	subs	r3, r2, r3
 8005dd8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d902      	bls.n	8005de4 <HAL_SD_WriteBlocks+0x1ec>
 8005dde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d112      	bne.n	8005e0a <HAL_SD_WriteBlocks+0x212>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a48      	ldr	r2, [pc, #288]	; (8005f0c <HAL_SD_WriteBlocks+0x314>)
 8005dea:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005df0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005df2:	431a      	orrs	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e094      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005e10:	f240 331a 	movw	r3, #794	; 0x31a
 8005e14:	4013      	ands	r3, r2
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d091      	beq.n	8005d3e <HAL_SD_WriteBlocks+0x146>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d022      	beq.n	8005e6e <HAL_SD_WriteBlocks+0x276>
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d91f      	bls.n	8005e6e <HAL_SD_WriteBlocks+0x276>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e32:	2b03      	cmp	r3, #3
 8005e34:	d01b      	beq.n	8005e6e <HAL_SD_WriteBlocks+0x276>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4618      	mov	r0, r3
 8005e3c:	f001 f868 	bl	8006f10 <SDMMC_CmdStopTransfer>
 8005e40:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8005e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d012      	beq.n	8005e6e <HAL_SD_WriteBlocks+0x276>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a2f      	ldr	r2, [pc, #188]	; (8005f0c <HAL_SD_WriteBlocks+0x314>)
 8005e4e:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005e54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005e56:	431a      	orrs	r2, r3
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	2201      	movs	r2, #1
 8005e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2200      	movs	r2, #0
 8005e68:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8005e6a:	2301      	movs	r3, #1
 8005e6c:	e062      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e74:	f003 0308 	and.w	r3, r3, #8
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d012      	beq.n	8005ea2 <HAL_SD_WriteBlocks+0x2aa>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a22      	ldr	r2, [pc, #136]	; (8005f0c <HAL_SD_WriteBlocks+0x314>)
 8005e82:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e88:	f043 0208 	orr.w	r2, r3, #8
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2200      	movs	r2, #0
 8005e9c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005e9e:	2301      	movs	r3, #1
 8005ea0:	e048      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ea8:	f003 0302 	and.w	r3, r3, #2
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d012      	beq.n	8005ed6 <HAL_SD_WriteBlocks+0x2de>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	4a15      	ldr	r2, [pc, #84]	; (8005f0c <HAL_SD_WriteBlocks+0x314>)
 8005eb6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebc:	f043 0202 	orr.w	r2, r3, #2
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2201      	movs	r2, #1
 8005ec8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e02e      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005edc:	f003 0310 	and.w	r3, r3, #16
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d015      	beq.n	8005f10 <HAL_SD_WriteBlocks+0x318>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a08      	ldr	r2, [pc, #32]	; (8005f0c <HAL_SD_WriteBlocks+0x314>)
 8005eea:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	f043 0210 	orr.w	r2, r3, #16
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e014      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
 8005f0a:	bf00      	nop
 8005f0c:	004005ff 	.word	0x004005ff
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f240 523a 	movw	r2, #1338	; 0x53a
 8005f18:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2201      	movs	r2, #1
 8005f1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8005f22:	2300      	movs	r3, #0
 8005f24:	e006      	b.n	8005f34 <HAL_SD_WriteBlocks+0x33c>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f2a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
  }
}
 8005f34:	4618      	mov	r0, r3
 8005f36:	3748      	adds	r7, #72	; 0x48
 8005f38:	46bd      	mov	sp, r7
 8005f3a:	bd80      	pop	{r7, pc}

08005f3c <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b083      	sub	sp, #12
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
 8005f44:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f4a:	0f9b      	lsrs	r3, r3, #30
 8005f4c:	b2da      	uxtb	r2, r3
 8005f4e:	683b      	ldr	r3, [r7, #0]
 8005f50:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f56:	0e9b      	lsrs	r3, r3, #26
 8005f58:	b2db      	uxtb	r3, r3
 8005f5a:	f003 030f 	and.w	r3, r3, #15
 8005f5e:	b2da      	uxtb	r2, r3
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f68:	0e1b      	lsrs	r3, r3, #24
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	f003 0303 	and.w	r3, r3, #3
 8005f70:	b2da      	uxtb	r2, r3
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f7a:	0c1b      	lsrs	r3, r3, #16
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	683b      	ldr	r3, [r7, #0]
 8005f80:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f86:	0a1b      	lsrs	r3, r3, #8
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f92:	b2da      	uxtb	r2, r3
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005f9c:	0d1b      	lsrs	r3, r3, #20
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fa8:	0c1b      	lsrs	r3, r3, #16
 8005faa:	b2db      	uxtb	r3, r3
 8005fac:	f003 030f 	and.w	r3, r3, #15
 8005fb0:	b2da      	uxtb	r2, r3
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fba:	0bdb      	lsrs	r3, r3, #15
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	f003 0301 	and.w	r3, r3, #1
 8005fc2:	b2da      	uxtb	r2, r3
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fcc:	0b9b      	lsrs	r3, r3, #14
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	f003 0301 	and.w	r3, r3, #1
 8005fd4:	b2da      	uxtb	r2, r3
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005fde:	0b5b      	lsrs	r3, r3, #13
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	b2da      	uxtb	r2, r3
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005ff0:	0b1b      	lsrs	r3, r3, #12
 8005ff2:	b2db      	uxtb	r3, r3
 8005ff4:	f003 0301 	and.w	r3, r3, #1
 8005ff8:	b2da      	uxtb	r2, r3
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	2200      	movs	r2, #0
 8006002:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006008:	2b00      	cmp	r3, #0
 800600a:	d163      	bne.n	80060d4 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006010:	009a      	lsls	r2, r3, #2
 8006012:	f640 73fc 	movw	r3, #4092	; 0xffc
 8006016:	4013      	ands	r3, r2
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800601c:	0f92      	lsrs	r2, r2, #30
 800601e:	431a      	orrs	r2, r3
 8006020:	683b      	ldr	r3, [r7, #0]
 8006022:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006028:	0edb      	lsrs	r3, r3, #27
 800602a:	b2db      	uxtb	r3, r3
 800602c:	f003 0307 	and.w	r3, r3, #7
 8006030:	b2da      	uxtb	r2, r3
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800603a:	0e1b      	lsrs	r3, r3, #24
 800603c:	b2db      	uxtb	r3, r3
 800603e:	f003 0307 	and.w	r3, r3, #7
 8006042:	b2da      	uxtb	r2, r3
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800604c:	0d5b      	lsrs	r3, r3, #21
 800604e:	b2db      	uxtb	r3, r3
 8006050:	f003 0307 	and.w	r3, r3, #7
 8006054:	b2da      	uxtb	r2, r3
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800605e:	0c9b      	lsrs	r3, r3, #18
 8006060:	b2db      	uxtb	r3, r3
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	b2da      	uxtb	r2, r3
 8006068:	683b      	ldr	r3, [r7, #0]
 800606a:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006070:	0bdb      	lsrs	r3, r3, #15
 8006072:	b2db      	uxtb	r3, r3
 8006074:	f003 0307 	and.w	r3, r3, #7
 8006078:	b2da      	uxtb	r2, r3
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	1c5a      	adds	r2, r3, #1
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8006088:	683b      	ldr	r3, [r7, #0]
 800608a:	7e1b      	ldrb	r3, [r3, #24]
 800608c:	b2db      	uxtb	r3, r3
 800608e:	f003 0307 	and.w	r3, r3, #7
 8006092:	3302      	adds	r3, #2
 8006094:	2201      	movs	r2, #1
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	687a      	ldr	r2, [r7, #4]
 800609c:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800609e:	fb02 f203 	mul.w	r2, r2, r3
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	7a1b      	ldrb	r3, [r3, #8]
 80060aa:	b2db      	uxtb	r3, r3
 80060ac:	f003 030f 	and.w	r3, r3, #15
 80060b0:	2201      	movs	r2, #1
 80060b2:	409a      	lsls	r2, r3
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80060c0:	0a52      	lsrs	r2, r2, #9
 80060c2:	fb02 f203 	mul.w	r2, r2, r3
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d0:	661a      	str	r2, [r3, #96]	; 0x60
 80060d2:	e031      	b.n	8006138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060d8:	2b01      	cmp	r3, #1
 80060da:	d11d      	bne.n	8006118 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80060e0:	041b      	lsls	r3, r3, #16
 80060e2:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80060ea:	0c1b      	lsrs	r3, r3, #16
 80060ec:	431a      	orrs	r2, r3
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	3301      	adds	r3, #1
 80060f8:	029a      	lsls	r2, r3, #10
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f44f 7200 	mov.w	r2, #512	; 0x200
 800610c:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	661a      	str	r2, [r3, #96]	; 0x60
 8006116:	e00f      	b.n	8006138 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a58      	ldr	r2, [pc, #352]	; (8006280 <HAL_SD_GetCardCSD+0x344>)
 800611e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006124:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006134:	2301      	movs	r3, #1
 8006136:	e09d      	b.n	8006274 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800613c:	0b9b      	lsrs	r3, r3, #14
 800613e:	b2db      	uxtb	r3, r3
 8006140:	f003 0301 	and.w	r3, r3, #1
 8006144:	b2da      	uxtb	r2, r3
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800614e:	09db      	lsrs	r3, r3, #7
 8006150:	b2db      	uxtb	r3, r3
 8006152:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006156:	b2da      	uxtb	r2, r3
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006160:	b2db      	uxtb	r3, r3
 8006162:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006166:	b2da      	uxtb	r2, r3
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006170:	0fdb      	lsrs	r3, r3, #31
 8006172:	b2da      	uxtb	r2, r3
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800617c:	0f5b      	lsrs	r3, r3, #29
 800617e:	b2db      	uxtb	r3, r3
 8006180:	f003 0303 	and.w	r3, r3, #3
 8006184:	b2da      	uxtb	r2, r3
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800618e:	0e9b      	lsrs	r3, r3, #26
 8006190:	b2db      	uxtb	r3, r3
 8006192:	f003 0307 	and.w	r3, r3, #7
 8006196:	b2da      	uxtb	r2, r3
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a0:	0d9b      	lsrs	r3, r3, #22
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	f003 030f 	and.w	r3, r3, #15
 80061a8:	b2da      	uxtb	r2, r3
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061b2:	0d5b      	lsrs	r3, r3, #21
 80061b4:	b2db      	uxtb	r3, r3
 80061b6:	f003 0301 	and.w	r3, r3, #1
 80061ba:	b2da      	uxtb	r2, r3
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80061c2:	683b      	ldr	r3, [r7, #0]
 80061c4:	2200      	movs	r2, #0
 80061c6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061ce:	0c1b      	lsrs	r3, r3, #16
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	f003 0301 	and.w	r3, r3, #1
 80061d6:	b2da      	uxtb	r2, r3
 80061d8:	683b      	ldr	r3, [r7, #0]
 80061da:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061e2:	0bdb      	lsrs	r3, r3, #15
 80061e4:	b2db      	uxtb	r3, r3
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	b2da      	uxtb	r2, r3
 80061ec:	683b      	ldr	r3, [r7, #0]
 80061ee:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061f6:	0b9b      	lsrs	r3, r3, #14
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	f003 0301 	and.w	r3, r3, #1
 80061fe:	b2da      	uxtb	r2, r3
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800620a:	0b5b      	lsrs	r3, r3, #13
 800620c:	b2db      	uxtb	r3, r3
 800620e:	f003 0301 	and.w	r3, r3, #1
 8006212:	b2da      	uxtb	r2, r3
 8006214:	683b      	ldr	r3, [r7, #0]
 8006216:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800621e:	0b1b      	lsrs	r3, r3, #12
 8006220:	b2db      	uxtb	r3, r3
 8006222:	f003 0301 	and.w	r3, r3, #1
 8006226:	b2da      	uxtb	r2, r3
 8006228:	683b      	ldr	r3, [r7, #0]
 800622a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006232:	0a9b      	lsrs	r3, r3, #10
 8006234:	b2db      	uxtb	r3, r3
 8006236:	f003 0303 	and.w	r3, r3, #3
 800623a:	b2da      	uxtb	r2, r3
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006246:	0a1b      	lsrs	r3, r3, #8
 8006248:	b2db      	uxtb	r3, r3
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	b2da      	uxtb	r2, r3
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800625a:	085b      	lsrs	r3, r3, #1
 800625c:	b2db      	uxtb	r3, r3
 800625e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006262:	b2da      	uxtb	r2, r3
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2201      	movs	r2, #1
 800626e:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8006272:	2300      	movs	r3, #0
}
 8006274:	4618      	mov	r0, r3
 8006276:	370c      	adds	r7, #12
 8006278:	46bd      	mov	sp, r7
 800627a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627e:	4770      	bx	lr
 8006280:	004005ff 	.word	0x004005ff

08006284 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80062ce:	2300      	movs	r3, #0
}
 80062d0:	4618      	mov	r0, r3
 80062d2:	370c      	adds	r7, #12
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr

080062dc <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDIO_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDIO_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 80062dc:	b5b0      	push	{r4, r5, r7, lr}
 80062de:	b08e      	sub	sp, #56	; 0x38
 80062e0:	af04      	add	r7, sp, #16
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2203      	movs	r2, #3
 80062ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062f2:	2b03      	cmp	r3, #3
 80062f4:	d02e      	beq.n	8006354 <HAL_SD_ConfigWideBusOperation+0x78>
  {
    if(WideMode == SDIO_BUS_WIDE_8B)
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062fc:	d106      	bne.n	800630c <HAL_SD_ConfigWideBusOperation+0x30>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006302:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	639a      	str	r2, [r3, #56]	; 0x38
 800630a:	e029      	b.n	8006360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_4B)
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006312:	d10a      	bne.n	800632a <HAL_SD_ConfigWideBusOperation+0x4e>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 fa01 	bl	800671c <SD_WideBus_Enable>
 800631a:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006322:	431a      	orrs	r2, r3
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	639a      	str	r2, [r3, #56]	; 0x38
 8006328:	e01a      	b.n	8006360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else if(WideMode == SDIO_BUS_WIDE_1B)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d10a      	bne.n	8006346 <HAL_SD_ConfigWideBusOperation+0x6a>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8006330:	6878      	ldr	r0, [r7, #4]
 8006332:	f000 fa3e 	bl	80067b2 <SD_WideBus_Disable>
 8006336:	6278      	str	r0, [r7, #36]	; 0x24

      hsd->ErrorCode |= errorstate;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800633c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800633e:	431a      	orrs	r2, r3
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	639a      	str	r2, [r3, #56]	; 0x38
 8006344:	e00c      	b.n	8006360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800634a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	639a      	str	r2, [r3, #56]	; 0x38
 8006352:	e005      	b.n	8006360 <HAL_SD_ConfigWideBusOperation+0x84>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	2b00      	cmp	r3, #0
 8006366:	d009      	beq.n	800637c <HAL_SD_ConfigWideBusOperation+0xa0>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a18      	ldr	r2, [pc, #96]	; (80063d0 <HAL_SD_ConfigWideBusOperation+0xf4>)
 800636e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8006378:	2301      	movs	r3, #1
 800637a:	e024      	b.n	80063c6 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDIO peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	60fb      	str	r3, [r7, #12]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	613b      	str	r3, [r7, #16]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	68db      	ldr	r3, [r3, #12]
 800638c:	617b      	str	r3, [r7, #20]
    Init.BusWide             = WideMode;
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	61bb      	str	r3, [r7, #24]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	61fb      	str	r3, [r7, #28]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	699b      	ldr	r3, [r3, #24]
 800639c:	623b      	str	r3, [r7, #32]
    (void)SDIO_Init(hsd->Instance, Init);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681d      	ldr	r5, [r3, #0]
 80063a2:	466c      	mov	r4, sp
 80063a4:	f107 0318 	add.w	r3, r7, #24
 80063a8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80063ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80063b0:	f107 030c 	add.w	r3, r7, #12
 80063b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fc24 	bl	8006c04 <SDIO_Init>
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	2201      	movs	r2, #1
 80063c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80063c4:	2300      	movs	r3, #0
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3728      	adds	r7, #40	; 0x28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bdb0      	pop	{r4, r5, r7, pc}
 80063ce:	bf00      	nop
 80063d0:	004005ff 	.word	0x004005ff

080063d4 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80063dc:	2300      	movs	r3, #0
 80063de:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80063e0:	f107 030c 	add.w	r3, r7, #12
 80063e4:	4619      	mov	r1, r3
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 f970 	bl	80066cc <SD_SendStatus>
 80063ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d005      	beq.n	8006400 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80063f8:	697b      	ldr	r3, [r7, #20]
 80063fa:	431a      	orrs	r2, r3
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	0a5b      	lsrs	r3, r3, #9
 8006404:	f003 030f 	and.w	r3, r3, #15
 8006408:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 800640a:	693b      	ldr	r3, [r7, #16]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8006414:	b5b0      	push	{r4, r5, r7, lr}
 8006416:	b094      	sub	sp, #80	; 0x50
 8006418:	af04      	add	r7, sp, #16
 800641a:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 800641c:	2301      	movs	r3, #1
 800641e:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	4618      	mov	r0, r3
 8006426:	f000 fc45 	bl	8006cb4 <SDIO_GetPowerState>
 800642a:	4603      	mov	r3, r0
 800642c:	2b00      	cmp	r3, #0
 800642e:	d102      	bne.n	8006436 <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8006430:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8006434:	e0b7      	b.n	80065a6 <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800643a:	2b03      	cmp	r3, #3
 800643c:	d02f      	beq.n	800649e <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4618      	mov	r0, r3
 8006444:	f000 fe6e 	bl	8007124 <SDMMC_CmdSendCID>
 8006448:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800644a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800644c:	2b00      	cmp	r3, #0
 800644e:	d001      	beq.n	8006454 <SD_InitCard+0x40>
    {
      return errorstate;
 8006450:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006452:	e0a8      	b.n	80065a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	2100      	movs	r1, #0
 800645a:	4618      	mov	r0, r3
 800645c:	f000 fc6f 	bl	8006d3e <SDIO_GetResponse>
 8006460:	4602      	mov	r2, r0
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	2104      	movs	r1, #4
 800646c:	4618      	mov	r0, r3
 800646e:	f000 fc66 	bl	8006d3e <SDIO_GetResponse>
 8006472:	4602      	mov	r2, r0
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2108      	movs	r1, #8
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fc5d 	bl	8006d3e <SDIO_GetResponse>
 8006484:	4602      	mov	r2, r0
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	210c      	movs	r1, #12
 8006490:	4618      	mov	r0, r3
 8006492:	f000 fc54 	bl	8006d3e <SDIO_GetResponse>
 8006496:	4602      	mov	r2, r0
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064a2:	2b03      	cmp	r3, #3
 80064a4:	d00d      	beq.n	80064c2 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f107 020e 	add.w	r2, r7, #14
 80064ae:	4611      	mov	r1, r2
 80064b0:	4618      	mov	r0, r3
 80064b2:	f000 fe74 	bl	800719e <SDMMC_CmdSetRelAdd>
 80064b6:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80064b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d001      	beq.n	80064c2 <SD_InitCard+0xae>
    {
      return errorstate;
 80064be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064c0:	e071      	b.n	80065a6 <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d036      	beq.n	8006538 <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80064ca:	89fb      	ldrh	r3, [r7, #14]
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681a      	ldr	r2, [r3, #0]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80064da:	041b      	lsls	r3, r3, #16
 80064dc:	4619      	mov	r1, r3
 80064de:	4610      	mov	r0, r2
 80064e0:	f000 fe3e 	bl	8007160 <SDMMC_CmdSendCSD>
 80064e4:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80064e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d001      	beq.n	80064f0 <SD_InitCard+0xdc>
    {
      return errorstate;
 80064ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80064ee:	e05a      	b.n	80065a6 <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	2100      	movs	r1, #0
 80064f6:	4618      	mov	r0, r3
 80064f8:	f000 fc21 	bl	8006d3e <SDIO_GetResponse>
 80064fc:	4602      	mov	r2, r0
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	2104      	movs	r1, #4
 8006508:	4618      	mov	r0, r3
 800650a:	f000 fc18 	bl	8006d3e <SDIO_GetResponse>
 800650e:	4602      	mov	r2, r0
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2108      	movs	r1, #8
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fc0f 	bl	8006d3e <SDIO_GetResponse>
 8006520:	4602      	mov	r2, r0
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	210c      	movs	r1, #12
 800652c:	4618      	mov	r0, r3
 800652e:	f000 fc06 	bl	8006d3e <SDIO_GetResponse>
 8006532:	4602      	mov	r2, r0
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	2104      	movs	r1, #4
 800653e:	4618      	mov	r0, r3
 8006540:	f000 fbfd 	bl	8006d3e <SDIO_GetResponse>
 8006544:	4603      	mov	r3, r0
 8006546:	0d1a      	lsrs	r2, r3, #20
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 800654c:	f107 0310 	add.w	r3, r7, #16
 8006550:	4619      	mov	r1, r3
 8006552:	6878      	ldr	r0, [r7, #4]
 8006554:	f7ff fcf2 	bl	8005f3c <HAL_SD_GetCardCSD>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d002      	beq.n	8006564 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800655e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006562:	e020      	b.n	80065a6 <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6819      	ldr	r1, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800656c:	041b      	lsls	r3, r3, #16
 800656e:	f04f 0400 	mov.w	r4, #0
 8006572:	461a      	mov	r2, r3
 8006574:	4623      	mov	r3, r4
 8006576:	4608      	mov	r0, r1
 8006578:	f000 fcec 	bl	8006f54 <SDMMC_CmdSelDesel>
 800657c:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 800657e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006580:	2b00      	cmp	r3, #0
 8006582:	d001      	beq.n	8006588 <SD_InitCard+0x174>
  {
    return errorstate;
 8006584:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006586:	e00e      	b.n	80065a6 <SD_InitCard+0x192>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681d      	ldr	r5, [r3, #0]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	466c      	mov	r4, sp
 8006590:	f103 0210 	add.w	r2, r3, #16
 8006594:	ca07      	ldmia	r2, {r0, r1, r2}
 8006596:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800659a:	3304      	adds	r3, #4
 800659c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800659e:	4628      	mov	r0, r5
 80065a0:	f000 fb30 	bl	8006c04 <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80065a4:	2300      	movs	r3, #0
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3740      	adds	r7, #64	; 0x40
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bdb0      	pop	{r4, r5, r7, pc}
	...

080065b0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b086      	sub	sp, #24
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065b8:	2300      	movs	r3, #0
 80065ba:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80065bc:	2300      	movs	r3, #0
 80065be:	617b      	str	r3, [r7, #20]
 80065c0:	2300      	movs	r3, #0
 80065c2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4618      	mov	r0, r3
 80065ca:	f000 fce6 	bl	8006f9a <SDMMC_CmdGoIdleState>
 80065ce:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d001      	beq.n	80065da <SD_PowerON+0x2a>
  {
    return errorstate;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	e072      	b.n	80066c0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fcf9 	bl	8006fd6 <SDMMC_CmdOperCond>
 80065e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d00d      	beq.n	8006608 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f000 fccf 	bl	8006f9a <SDMMC_CmdGoIdleState>
 80065fc:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2b00      	cmp	r3, #0
 8006602:	d004      	beq.n	800660e <SD_PowerON+0x5e>
    {
      return errorstate;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	e05b      	b.n	80066c0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	2201      	movs	r2, #1
 800660c:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006612:	2b01      	cmp	r3, #1
 8006614:	d137      	bne.n	8006686 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2100      	movs	r1, #0
 800661c:	4618      	mov	r0, r3
 800661e:	f000 fcf9 	bl	8007014 <SDMMC_CmdAppCommand>
 8006622:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d02d      	beq.n	8006686 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800662a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800662e:	e047      	b.n	80066c0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	2100      	movs	r1, #0
 8006636:	4618      	mov	r0, r3
 8006638:	f000 fcec 	bl	8007014 <SDMMC_CmdAppCommand>
 800663c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d001      	beq.n	8006648 <SD_PowerON+0x98>
    {
      return errorstate;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	e03b      	b.n	80066c0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	491e      	ldr	r1, [pc, #120]	; (80066c8 <SD_PowerON+0x118>)
 800664e:	4618      	mov	r0, r3
 8006650:	f000 fd02 	bl	8007058 <SDMMC_CmdAppOperCommand>
 8006654:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d002      	beq.n	8006662 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800665c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8006660:	e02e      	b.n	80066c0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	2100      	movs	r1, #0
 8006668:	4618      	mov	r0, r3
 800666a:	f000 fb68 	bl	8006d3e <SDIO_GetResponse>
 800666e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	0fdb      	lsrs	r3, r3, #31
 8006674:	2b01      	cmp	r3, #1
 8006676:	d101      	bne.n	800667c <SD_PowerON+0xcc>
 8006678:	2301      	movs	r3, #1
 800667a:	e000      	b.n	800667e <SD_PowerON+0xce>
 800667c:	2300      	movs	r3, #0
 800667e:	613b      	str	r3, [r7, #16]

    count++;
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	3301      	adds	r3, #1
 8006684:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800668c:	4293      	cmp	r3, r2
 800668e:	d802      	bhi.n	8006696 <SD_PowerON+0xe6>
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	2b00      	cmp	r3, #0
 8006694:	d0cc      	beq.n	8006630 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800669c:	4293      	cmp	r3, r2
 800669e:	d902      	bls.n	80066a6 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80066a0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066a4:	e00c      	b.n	80066c0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d003      	beq.n	80066b8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	645a      	str	r2, [r3, #68]	; 0x44
 80066b6:	e002      	b.n	80066be <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80066be:	2300      	movs	r3, #0
}
 80066c0:	4618      	mov	r0, r3
 80066c2:	3718      	adds	r7, #24
 80066c4:	46bd      	mov	sp, r7
 80066c6:	bd80      	pop	{r7, pc}
 80066c8:	c1100000 	.word	0xc1100000

080066cc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b084      	sub	sp, #16
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
 80066d4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d102      	bne.n	80066e2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80066dc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80066e0:	e018      	b.n	8006714 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066ea:	041b      	lsls	r3, r3, #16
 80066ec:	4619      	mov	r1, r3
 80066ee:	4610      	mov	r0, r2
 80066f0:	f000 fd76 	bl	80071e0 <SDMMC_CmdSendStatus>
 80066f4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d001      	beq.n	8006700 <SD_SendStatus+0x34>
  {
    return errorstate;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	e009      	b.n	8006714 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	2100      	movs	r1, #0
 8006706:	4618      	mov	r0, r3
 8006708:	f000 fb19 	bl	8006d3e <SDIO_GetResponse>
 800670c:	4602      	mov	r2, r0
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8006712:	2300      	movs	r3, #0
}
 8006714:	4618      	mov	r0, r3
 8006716:	3710      	adds	r7, #16
 8006718:	46bd      	mov	sp, r7
 800671a:	bd80      	pop	{r7, pc}

0800671c <SD_WideBus_Enable>:
  * @brief  Enables the SDIO wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b086      	sub	sp, #24
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	2300      	movs	r3, #0
 800672a:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2100      	movs	r1, #0
 8006732:	4618      	mov	r0, r3
 8006734:	f000 fb03 	bl	8006d3e <SDIO_GetResponse>
 8006738:	4603      	mov	r3, r0
 800673a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800673e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006742:	d102      	bne.n	800674a <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8006744:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006748:	e02f      	b.n	80067aa <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 800674a:	f107 030c 	add.w	r3, r7, #12
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 f879 	bl	8006848 <SD_FindSCR>
 8006756:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d001      	beq.n	8006762 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 800675e:	697b      	ldr	r3, [r7, #20]
 8006760:	e023      	b.n	80067aa <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8006762:	693b      	ldr	r3, [r7, #16]
 8006764:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006768:	2b00      	cmp	r3, #0
 800676a:	d01c      	beq.n	80067a6 <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006774:	041b      	lsls	r3, r3, #16
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f000 fc4b 	bl	8007014 <SDMMC_CmdAppCommand>
 800677e:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d001      	beq.n	800678a <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	e00f      	b.n	80067aa <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	2102      	movs	r1, #2
 8006790:	4618      	mov	r0, r3
 8006792:	f000 fc84 	bl	800709e <SDMMC_CmdBusWidth>
 8006796:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d001      	beq.n	80067a2 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	e003      	b.n	80067aa <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80067a2:	2300      	movs	r3, #0
 80067a4:	e001      	b.n	80067aa <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80067a6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3718      	adds	r7, #24
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <SD_WideBus_Disable>:
  * @brief  Disables the SDIO wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 80067b2:	b580      	push	{r7, lr}
 80067b4:	b086      	sub	sp, #24
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 80067ba:	2300      	movs	r3, #0
 80067bc:	60fb      	str	r3, [r7, #12]
 80067be:	2300      	movs	r3, #0
 80067c0:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDIO_GetResponse(hsd->Instance, SDIO_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2100      	movs	r1, #0
 80067c8:	4618      	mov	r0, r3
 80067ca:	f000 fab8 	bl	8006d3e <SDIO_GetResponse>
 80067ce:	4603      	mov	r3, r0
 80067d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80067d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80067d8:	d102      	bne.n	80067e0 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80067da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80067de:	e02f      	b.n	8006840 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80067e0:	f107 030c 	add.w	r3, r7, #12
 80067e4:	4619      	mov	r1, r3
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 f82e 	bl	8006848 <SD_FindSCR>
 80067ec:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d001      	beq.n	80067f8 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 80067f4:	697b      	ldr	r3, [r7, #20]
 80067f6:	e023      	b.n	8006840 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80067f8:	693b      	ldr	r3, [r7, #16]
 80067fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d01c      	beq.n	800683c <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681a      	ldr	r2, [r3, #0]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	4619      	mov	r1, r3
 800680e:	4610      	mov	r0, r2
 8006810:	f000 fc00 	bl	8007014 <SDMMC_CmdAppCommand>
 8006814:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	2b00      	cmp	r3, #0
 800681a:	d001      	beq.n	8006820 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	e00f      	b.n	8006840 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	2100      	movs	r1, #0
 8006826:	4618      	mov	r0, r3
 8006828:	f000 fc39 	bl	800709e <SDMMC_CmdBusWidth>
 800682c:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d001      	beq.n	8006838 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	e003      	b.n	8006840 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8006838:	2300      	movs	r3, #0
 800683a:	e001      	b.n	8006840 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 800683c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8006840:	4618      	mov	r0, r3
 8006842:	3718      	adds	r7, #24
 8006844:	46bd      	mov	sp, r7
 8006846:	bd80      	pop	{r7, pc}

08006848 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8006848:	b590      	push	{r4, r7, lr}
 800684a:	b08f      	sub	sp, #60	; 0x3c
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	6039      	str	r1, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8006852:	f7fd fd07 	bl	8004264 <HAL_GetTick>
 8006856:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8006858:	2300      	movs	r3, #0
 800685a:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 800685c:	2300      	movs	r3, #0
 800685e:	60bb      	str	r3, [r7, #8]
 8006860:	2300      	movs	r3, #0
 8006862:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	2108      	movs	r1, #8
 800686e:	4618      	mov	r0, r3
 8006870:	f000 faa4 	bl	8006dbc <SDMMC_CmdBlockLength>
 8006874:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <SD_FindSCR+0x38>
  {
    return errorstate;
 800687c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800687e:	e0a9      	b.n	80069d4 <SD_FindSCR+0x18c>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	681a      	ldr	r2, [r3, #0]
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006888:	041b      	lsls	r3, r3, #16
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f000 fbc1 	bl	8007014 <SDMMC_CmdAppCommand>
 8006892:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8006894:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006896:	2b00      	cmp	r3, #0
 8006898:	d001      	beq.n	800689e <SD_FindSCR+0x56>
  {
    return errorstate;
 800689a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800689c:	e09a      	b.n	80069d4 <SD_FindSCR+0x18c>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 800689e:	f04f 33ff 	mov.w	r3, #4294967295
 80068a2:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 80068a4:	2308      	movs	r3, #8
 80068a6:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDIO_DATABLOCK_SIZE_8B;
 80068a8:	2330      	movs	r3, #48	; 0x30
 80068aa:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80068ac:	2302      	movs	r3, #2
 80068ae:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80068b0:	2300      	movs	r3, #0
 80068b2:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDIO_DPSM_ENABLE;
 80068b4:	2301      	movs	r3, #1
 80068b6:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDIO_ConfigData(hsd->Instance, &config);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	f107 0210 	add.w	r2, r7, #16
 80068c0:	4611      	mov	r1, r2
 80068c2:	4618      	mov	r0, r3
 80068c4:	f000 fa4e 	bl	8006d64 <SDIO_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4618      	mov	r0, r3
 80068ce:	f000 fc08 	bl	80070e2 <SDMMC_CmdSendSCR>
 80068d2:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 80068d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d022      	beq.n	8006920 <SD_FindSCR+0xd8>
  {
    return errorstate;
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	e07a      	b.n	80069d4 <SD_FindSCR+0x18c>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL))
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068e4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00e      	beq.n	800690a <SD_FindSCR+0xc2>
    {
      *(tempscr + index) = SDIO_ReadFIFO(hsd->Instance);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6819      	ldr	r1, [r3, #0]
 80068f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	f107 0208 	add.w	r2, r7, #8
 80068f8:	18d4      	adds	r4, r2, r3
 80068fa:	4608      	mov	r0, r1
 80068fc:	f000 f9ad 	bl	8006c5a <SDIO_ReadFIFO>
 8006900:	4603      	mov	r3, r0
 8006902:	6023      	str	r3, [r4, #0]
      index++;
 8006904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006906:	3301      	adds	r3, #1
 8006908:	637b      	str	r3, [r7, #52]	; 0x34
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800690a:	f7fd fcab 	bl	8004264 <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006918:	d102      	bne.n	8006920 <SD_FindSCR+0xd8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800691a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800691e:	e059      	b.n	80069d4 <SD_FindSCR+0x18c>
  while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DBCKEND))
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006926:	f240 432a 	movw	r3, #1066	; 0x42a
 800692a:	4013      	ands	r3, r2
 800692c:	2b00      	cmp	r3, #0
 800692e:	d0d6      	beq.n	80068de <SD_FindSCR+0x96>
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006936:	f003 0308 	and.w	r3, r3, #8
 800693a:	2b00      	cmp	r3, #0
 800693c:	d005      	beq.n	800694a <SD_FindSCR+0x102>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DTIMEOUT);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	2208      	movs	r2, #8
 8006944:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8006946:	2308      	movs	r3, #8
 8006948:	e044      	b.n	80069d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006950:	f003 0302 	and.w	r3, r3, #2
 8006954:	2b00      	cmp	r3, #0
 8006956:	d005      	beq.n	8006964 <SD_FindSCR+0x11c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_DCRCFAIL);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	2202      	movs	r2, #2
 800695e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8006960:	2302      	movs	r3, #2
 8006962:	e037      	b.n	80069d4 <SD_FindSCR+0x18c>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	f003 0320 	and.w	r3, r3, #32
 800696e:	2b00      	cmp	r3, #0
 8006970:	d005      	beq.n	800697e <SD_FindSCR+0x136>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_FLAG_RXOVERR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	2220      	movs	r2, #32
 8006978:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 800697a:	2320      	movs	r3, #32
 800697c:	e02a      	b.n	80069d4 <SD_FindSCR+0x18c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f240 523a 	movw	r2, #1338	; 0x53a
 8006986:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	061a      	lsls	r2, r3, #24
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	021b      	lsls	r3, r3, #8
 8006990:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006994:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	0a1b      	lsrs	r3, r3, #8
 800699a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800699e:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	0e1b      	lsrs	r3, r3, #24
 80069a4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80069a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069a8:	601a      	str	r2, [r3, #0]
    scr++;
 80069aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ac:	3304      	adds	r3, #4
 80069ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	061a      	lsls	r2, r3, #24
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	021b      	lsls	r3, r3, #8
 80069b8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80069bc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80069be:	68bb      	ldr	r3, [r7, #8]
 80069c0:	0a1b      	lsrs	r3, r3, #8
 80069c2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80069c6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	0e1b      	lsrs	r3, r3, #24
 80069cc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80069ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069d0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80069d2:	2300      	movs	r3, #0
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	373c      	adds	r7, #60	; 0x3c
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd90      	pop	{r4, r7, pc}

080069dc <HAL_SRAM_Init>:
  * @param  Timing Pointer to SRAM control timing structure 
  * @param  ExtTiming Pointer to SRAM extended mode timing structure  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing, FMC_NORSRAM_TimingTypeDef *ExtTiming)
{ 
 80069dc:	b580      	push	{r7, lr}
 80069de:	b084      	sub	sp, #16
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	60f8      	str	r0, [r7, #12]
 80069e4:	60b9      	str	r1, [r7, #8]
 80069e6:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if(hsram == NULL)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d101      	bne.n	80069f2 <HAL_SRAM_Init+0x16>
  {
     return HAL_ERROR;
 80069ee:	2301      	movs	r3, #1
 80069f0:	e034      	b.n	8006a5c <HAL_SRAM_Init+0x80>
  }
  
  if(hsram->State == HAL_SRAM_STATE_RESET)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	f893 3049 	ldrb.w	r3, [r3, #73]	; 0x49
 80069f8:	b2db      	uxtb	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d106      	bne.n	8006a0c <HAL_SRAM_Init+0x30>
  {  
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f7fb fdfa 	bl	8002600 <HAL_SRAM_MspInit>
#endif
  }
  
  /* Initialize SRAM control Interface */
  FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	681a      	ldr	r2, [r3, #0]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	3308      	adds	r3, #8
 8006a14:	4619      	mov	r1, r3
 8006a16:	4610      	mov	r0, r2
 8006a18:	f000 f824 	bl	8006a64 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank); 
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	6818      	ldr	r0, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	461a      	mov	r2, r3
 8006a26:	68b9      	ldr	r1, [r7, #8]
 8006a28:	f000 f86e 	bl	8006b08 <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,  hsram->Init.ExtendedMode);  
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6858      	ldr	r0, [r3, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	689a      	ldr	r2, [r3, #8]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a38:	6879      	ldr	r1, [r7, #4]
 8006a3a:	f000 f8a3 	bl	8006b84 <FSMC_NORSRAM_Extended_Timing_Init>
  
  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank); 
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	68fa      	ldr	r2, [r7, #12]
 8006a44:	6892      	ldr	r2, [r2, #8]
 8006a46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	6892      	ldr	r2, [r2, #8]
 8006a52:	f041 0101 	orr.w	r1, r1, #1
 8006a56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  
  return HAL_OK;
 8006a5a:	2300      	movs	r3, #0
}
 8006a5c:	4618      	mov	r0, r3
 8006a5e:	3710      	adds	r7, #16
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}

08006a64 <FSMC_NORSRAM_Init>:
  * @param  Device Pointer to NORSRAM device instance
  * @param  Init Pointer to NORSRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_InitTypeDef* Init)
{ 
 8006a64:	b480      	push	{r7}
 8006a66:	b085      	sub	sp, #20
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr = 0U;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FSMC_CONTINOUS_CLOCK(Init->ContinuousClock));
#endif /* STM32F412Zx || STM32F412Vx || STM32F413xx || STM32F423xx */
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Init->NSBank];
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	681a      	ldr	r2, [r3, #0]
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a7c:	60fb      	str	r3, [r7, #12]

#if defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
  /* Clear MBKEN, MUXEN, MTYP, MWID, FACCEN, BURSTEN, WAITPOL, WRAPMOD, WAITCFG, WREN,
           WAITEN, EXTMOD, ASYNCWAIT, CPSIZE and CBURSTRW bits */
  tmpr &= ((uint32_t)~(FSMC_BCR1_MBKEN     | FSMC_BCR1_MUXEN    | FSMC_BCR1_MTYP     | \
 8006a7e:	68fa      	ldr	r2, [r7, #12]
 8006a80:	4b20      	ldr	r3, [pc, #128]	; (8006b04 <FSMC_NORSRAM_Init+0xa0>)
 8006a82:	4013      	ands	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]
                       FSMC_BCR1_MWID      | FSMC_BCR1_FACCEN   | FSMC_BCR1_BURSTEN  | \
                       FSMC_BCR1_WAITPOL   | FSMC_BCR1_WRAPMOD  | FSMC_BCR1_WAITCFG  | \
                       FSMC_BCR1_WREN      | FSMC_BCR1_WAITEN   | FSMC_BCR1_EXTMOD   | \
                       FSMC_BCR1_ASYNCWAIT | FSMC_BCR1_CPSIZE   | FSMC_BCR1_CBURSTRW));
  /* Set NORSRAM device control parameters */
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006a86:	683b      	ldr	r3, [r7, #0]
 8006a88:	685a      	ldr	r2, [r3, #4]
                     Init->MemoryType           |\
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	689b      	ldr	r3, [r3, #8]
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006a8e:	431a      	orrs	r2, r3
                     Init->MemoryDataWidth      |\
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
                     Init->MemoryType           |\
 8006a94:	431a      	orrs	r2, r3
                     Init->BurstAccessMode      |\
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	691b      	ldr	r3, [r3, #16]
                     Init->MemoryDataWidth      |\
 8006a9a:	431a      	orrs	r2, r3
                     Init->WaitSignalPolarity   |\
 8006a9c:	683b      	ldr	r3, [r7, #0]
 8006a9e:	695b      	ldr	r3, [r3, #20]
                     Init->BurstAccessMode      |\
 8006aa0:	431a      	orrs	r2, r3
                     Init->WrapMode             |\
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	699b      	ldr	r3, [r3, #24]
                     Init->WaitSignalPolarity   |\
 8006aa6:	431a      	orrs	r2, r3
                     Init->WaitSignalActive     |\
 8006aa8:	683b      	ldr	r3, [r7, #0]
 8006aaa:	69db      	ldr	r3, [r3, #28]
                     Init->WrapMode             |\
 8006aac:	431a      	orrs	r2, r3
                     Init->WriteOperation       |\
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	6a1b      	ldr	r3, [r3, #32]
                     Init->WaitSignalActive     |\
 8006ab2:	431a      	orrs	r2, r3
                     Init->WaitSignal           |\
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                     Init->WriteOperation       |\
 8006ab8:	431a      	orrs	r2, r3
                     Init->ExtendedMode         |\
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                     Init->WaitSignal           |\
 8006abe:	431a      	orrs	r2, r3
                     Init->AsynchronousWait     |\
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                     Init->ExtendedMode         |\
 8006ac4:	431a      	orrs	r2, r3
                     Init->PageSize             |\
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                     Init->AsynchronousWait     |\
 8006aca:	431a      	orrs	r2, r3
                     Init->WriteBurst
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
                     Init->PageSize             |\
 8006ad0:	4313      	orrs	r3, r2
  tmpr |= (uint32_t)(Init->DataAddressMux       |\
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	4313      	orrs	r3, r2
 8006ad6:	60fb      	str	r3, [r7, #12]
                     Init->ContinuousClock      |\
                     Init->PageSize             |\
                     Init->WriteFifo);
#endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx */ 
            
  if(Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	689b      	ldr	r3, [r3, #8]
 8006adc:	2b08      	cmp	r3, #8
 8006ade:	d103      	bne.n	8006ae8 <FSMC_NORSRAM_Init+0x84>
  {
    tmpr |= (uint32_t)FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ae6:	60fb      	str	r3, [r7, #12]
  }

  Device->BTCR[Init->NSBank] = tmpr;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	681a      	ldr	r2, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	68f9      	ldr	r1, [r7, #12]
 8006af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  {
    Device->BTCR[FSMC_NORSRAM_BANK1] |= (uint32_t)(Init->WriteFifo);
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3714      	adds	r7, #20
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	fff00080 	.word	0xfff00080

08006b08 <FSMC_NORSRAM_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b087      	sub	sp, #28
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  uint32_t tmpr = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	617b      	str	r3, [r7, #20]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
  /* Get the BTCR register value */
  tmpr = Device->BTCR[Bank + 1U];
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b22:	617b      	str	r3, [r7, #20]

  /* Clear ADDSET, ADDHLD, DATAST, BUSTURN, CLKDIV, DATLAT and ACCMOD bits */
  tmpr &= ((uint32_t)~(FSMC_BTR1_ADDSET  | FSMC_BTR1_ADDHLD | FSMC_BTR1_DATAST | \
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f003 4340 	and.w	r3, r3, #3221225472	; 0xc0000000
 8006b2a:	617b      	str	r3, [r7, #20]
                       FSMC_BTR1_BUSTURN | FSMC_BTR1_CLKDIV | FSMC_BTR1_DATLAT | \
                       FSMC_BTR1_ACCMOD));
  
  /* Set FSMC_NORSRAM device timing parameters */  
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	681a      	ldr	r2, [r3, #0]
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006b30:	68bb      	ldr	r3, [r7, #8]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	011b      	lsls	r3, r3, #4
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006b36:	431a      	orrs	r2, r3
                    ((Timing->DataSetupTime) << 8U)            |\
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	021b      	lsls	r3, r3, #8
                    ((Timing->AddressHoldTime) << 4U)          |\
 8006b3e:	431a      	orrs	r2, r3
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006b40:	68bb      	ldr	r3, [r7, #8]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	041b      	lsls	r3, r3, #16
                    ((Timing->DataSetupTime) << 8U)            |\
 8006b46:	431a      	orrs	r2, r3
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	3b01      	subs	r3, #1
 8006b4e:	051b      	lsls	r3, r3, #20
                    ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006b50:	431a      	orrs	r2, r3
                    (((Timing->DataLatency)-2U) << 24U)        |\
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	695b      	ldr	r3, [r3, #20]
 8006b56:	3b02      	subs	r3, #2
 8006b58:	061b      	lsls	r3, r3, #24
                    (((Timing->CLKDivision)-1U) << 20U)        |\
 8006b5a:	431a      	orrs	r2, r3
                    (Timing->AccessMode));
 8006b5c:	68bb      	ldr	r3, [r7, #8]
 8006b5e:	699b      	ldr	r3, [r3, #24]
  tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006b60:	4313      	orrs	r3, r2
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
  
  Device->BTCR[Bank + 1] = tmpr; 
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	1c5a      	adds	r2, r3, #1
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	6979      	ldr	r1, [r7, #20]
 8006b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision)-1U) << 20U);
    Device->BTCR[FSMC_NORSRAM_BANK1 + 1U] = tmpr;
  }
#endif /* STM32F412Zx || STM32F412Vx || STM32F412Rx || STM32F413xx || STM32F423xx */

  return HAL_OK;
 8006b74:	2300      	movs	r3, #0
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	371c      	adds	r7, #28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @param  Timing Pointer to NORSRAM Timing structure
  * @param  Bank NORSRAM bank number  
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device, FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank, uint32_t ExtendedMode)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b087      	sub	sp, #28
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	60f8      	str	r0, [r7, #12]
 8006b8c:	60b9      	str	r1, [r7, #8]
 8006b8e:	607a      	str	r2, [r7, #4]
 8006b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpr = 0U;
 8006b92:	2300      	movs	r3, #0
 8006b94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if(ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006b9c:	d122      	bne.n	8006be4 <FSMC_NORSRAM_Extended_Timing_Init+0x60>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));
  
    /* Get the BWTR register value */
    tmpr = Device->BWTR[Bank];
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	687a      	ldr	r2, [r7, #4]
 8006ba2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba6:	617b      	str	r3, [r7, #20]
    
    /* Clear ADDSET, ADDHLD, DATAST, BUSTURN and ACCMOD bits */
    tmpr &= ((uint32_t)~(FSMC_BWTR1_ADDSET  | FSMC_BWTR1_ADDHLD | FSMC_BWTR1_DATAST | \
 8006ba8:	697a      	ldr	r2, [r7, #20]
 8006baa:	4b15      	ldr	r3, [pc, #84]	; (8006c00 <FSMC_NORSRAM_Extended_Timing_Init+0x7c>)
 8006bac:	4013      	ands	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
                         FSMC_BWTR1_BUSTURN | FSMC_BWTR1_ACCMOD));

    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	681a      	ldr	r2, [r3, #0]
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006bb4:	68bb      	ldr	r3, [r7, #8]
 8006bb6:	685b      	ldr	r3, [r3, #4]
 8006bb8:	011b      	lsls	r3, r3, #4
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006bba:	431a      	orrs	r2, r3
                      ((Timing->DataSetupTime) << 8U)            |\
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	689b      	ldr	r3, [r3, #8]
 8006bc0:	021b      	lsls	r3, r3, #8
                      ((Timing->AddressHoldTime) << 4U)          |\
 8006bc2:	431a      	orrs	r2, r3
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006bc4:	68bb      	ldr	r3, [r7, #8]
 8006bc6:	68db      	ldr	r3, [r3, #12]
 8006bc8:	041b      	lsls	r3, r3, #16
                      ((Timing->DataSetupTime) << 8U)            |\
 8006bca:	431a      	orrs	r2, r3
                      (Timing->AccessMode));
 8006bcc:	68bb      	ldr	r3, [r7, #8]
 8006bce:	699b      	ldr	r3, [r3, #24]
                      ((Timing->BusTurnAroundDuration) << 16U)   |\
 8006bd0:	4313      	orrs	r3, r2
    tmpr |= (uint32_t)(Timing->AddressSetupTime                  |\
 8006bd2:	697a      	ldr	r2, [r7, #20]
 8006bd4:	4313      	orrs	r3, r2
 8006bd6:	617b      	str	r3, [r7, #20]
    
    Device->BWTR[Bank] = tmpr;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	687a      	ldr	r2, [r7, #4]
 8006bdc:	6979      	ldr	r1, [r7, #20]
 8006bde:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8006be2:	e005      	b.n	8006bf0 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>
  }
  else                                        
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8006bec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }   
  
  return HAL_OK;  
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	371c      	adds	r7, #28
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	cff00000 	.word	0xcff00000

08006c04 <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 8006c04:	b084      	sub	sp, #16
 8006c06:	b480      	push	{r7}
 8006c08:	b085      	sub	sp, #20
 8006c0a:	af00      	add	r7, sp, #0
 8006c0c:	6078      	str	r0, [r7, #4]
 8006c0e:	f107 001c 	add.w	r0, r7, #28
 8006c12:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 8006c16:	2300      	movs	r3, #0
 8006c18:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8006c1a:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8006c1e:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8006c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 8006c22:	431a      	orrs	r2, r3
             Init.BusWide             |\
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 8006c26:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8006c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8006c2a:	431a      	orrs	r2, r3
             Init.ClockDiv
 8006c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8006c2e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	4313      	orrs	r3, r2
 8006c34:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	685b      	ldr	r3, [r3, #4]
 8006c3a:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8006c3e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	431a      	orrs	r2, r3
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	b004      	add	sp, #16
 8006c58:	4770      	bx	lr

08006c5a <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8006c5a:	b480      	push	{r7}
 8006c5c:	b083      	sub	sp, #12
 8006c5e:	af00      	add	r7, sp, #0
 8006c60:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 8006c74:	b480      	push	{r7}
 8006c76:	b083      	sub	sp, #12
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	6078      	str	r0, [r7, #4]
 8006c7c:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	681a      	ldr	r2, [r3, #0]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006c88:	2300      	movs	r3, #0
}
 8006c8a:	4618      	mov	r0, r3
 8006c8c:	370c      	adds	r7, #12
 8006c8e:	46bd      	mov	sp, r7
 8006c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c94:	4770      	bx	lr

08006c96 <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 8006c96:	b580      	push	{r7, lr}
 8006c98:	b082      	sub	sp, #8
 8006c9a:	af00      	add	r7, sp, #0
 8006c9c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 8006ca4:	2002      	movs	r0, #2
 8006ca6:	f7fd fae9 	bl	800427c <HAL_Delay>
  
  return HAL_OK;
 8006caa:	2300      	movs	r3, #0
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3708      	adds	r7, #8
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	f003 0303 	and.w	r3, r3, #3
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	370c      	adds	r7, #12
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cce:	4770      	bx	lr

08006cd0 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 8006cd0:	b480      	push	{r7}
 8006cd2:	b085      	sub	sp, #20
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]
 8006cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006cda:	2300      	movs	r3, #0
 8006cdc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 8006cde:	683b      	ldr	r3, [r7, #0]
 8006ce0:	681a      	ldr	r2, [r3, #0]
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cee:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 8006cf4:	431a      	orrs	r2, r3
                       Command->CPSM);
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8006cfa:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8006cfc:	68fa      	ldr	r2, [r7, #12]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8006d0a:	f023 030f 	bic.w	r3, r3, #15
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	431a      	orrs	r2, r3
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3714      	adds	r7, #20
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d22:	4770      	bx	lr

08006d24 <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	691b      	ldr	r3, [r3, #16]
 8006d30:	b2db      	uxtb	r3, r3
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8006d3e:	b480      	push	{r7}
 8006d40:	b085      	sub	sp, #20
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	3314      	adds	r3, #20
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	683b      	ldr	r3, [r7, #0]
 8006d50:	4413      	add	r3, r2
 8006d52:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
}  
 8006d58:	4618      	mov	r0, r3
 8006d5a:	3714      	adds	r7, #20
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr

08006d64 <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b085      	sub	sp, #20
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 8006d72:	683b      	ldr	r3, [r7, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d82:	683b      	ldr	r3, [r7, #0]
 8006d84:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d8a:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8006d90:	431a      	orrs	r2, r3
                       Data->DPSM);
 8006d92:	683b      	ldr	r3, [r7, #0]
 8006d94:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 8006d96:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006da2:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	431a      	orrs	r2, r3
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8006dae:	2300      	movs	r3, #0

}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3714      	adds	r7, #20
 8006db4:	46bd      	mov	sp, r7
 8006db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dba:	4770      	bx	lr

08006dbc <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Lenght command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b088      	sub	sp, #32
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8006dca:	2310      	movs	r3, #16
 8006dcc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006dce:	2340      	movs	r3, #64	; 0x40
 8006dd0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006dd2:	2300      	movs	r3, #0
 8006dd4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006dd6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006dda:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ddc:	f107 0308 	add.w	r3, r7, #8
 8006de0:	4619      	mov	r1, r3
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f7ff ff74 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 8006de8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006dec:	2110      	movs	r1, #16
 8006dee:	6878      	ldr	r0, [r7, #4]
 8006df0:	f000 fa40 	bl	8007274 <SDMMC_GetCmdResp1>
 8006df4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006df6:	69fb      	ldr	r3, [r7, #28]
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3720      	adds	r7, #32
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b088      	sub	sp, #32
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8006e0e:	2311      	movs	r3, #17
 8006e10:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e12:	2340      	movs	r3, #64	; 0x40
 8006e14:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e16:	2300      	movs	r3, #0
 8006e18:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e1e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e20:	f107 0308 	add.w	r3, r7, #8
 8006e24:	4619      	mov	r1, r3
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f7ff ff52 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006e2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e30:	2111      	movs	r1, #17
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa1e 	bl	8007274 <SDMMC_GetCmdResp1>
 8006e38:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e3a:	69fb      	ldr	r3, [r7, #28]
}
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	3720      	adds	r7, #32
 8006e40:	46bd      	mov	sp, r7
 8006e42:	bd80      	pop	{r7, pc}

08006e44 <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b088      	sub	sp, #32
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
 8006e4c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8006e52:	2312      	movs	r3, #18
 8006e54:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e56:	2340      	movs	r3, #64	; 0x40
 8006e58:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006e5e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006e62:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006e64:	f107 0308 	add.w	r3, r7, #8
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f7ff ff30 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006e70:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e74:	2112      	movs	r1, #18
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f9fc 	bl	8007274 <SDMMC_GetCmdResp1>
 8006e7c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006e7e:	69fb      	ldr	r3, [r7, #28]
}
 8006e80:	4618      	mov	r0, r3
 8006e82:	3720      	adds	r7, #32
 8006e84:	46bd      	mov	sp, r7
 8006e86:	bd80      	pop	{r7, pc}

08006e88 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b088      	sub	sp, #32
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	6078      	str	r0, [r7, #4]
 8006e90:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8006e96:	2318      	movs	r3, #24
 8006e98:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006e9a:	2340      	movs	r3, #64	; 0x40
 8006e9c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ea2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ea6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ea8:	f107 0308 	add.w	r3, r7, #8
 8006eac:	4619      	mov	r1, r3
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f7ff ff0e 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8006eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb8:	2118      	movs	r1, #24
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 f9da 	bl	8007274 <SDMMC_GetCmdResp1>
 8006ec0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006ec2:	69fb      	ldr	r3, [r7, #28]
}
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	3720      	adds	r7, #32
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	bd80      	pop	{r7, pc}

08006ecc <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b088      	sub	sp, #32
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8006ed6:	683b      	ldr	r3, [r7, #0]
 8006ed8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8006eda:	2319      	movs	r3, #25
 8006edc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006ede:	2340      	movs	r3, #64	; 0x40
 8006ee0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ee6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006eea:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006eec:	f107 0308 	add.w	r3, r7, #8
 8006ef0:	4619      	mov	r1, r3
 8006ef2:	6878      	ldr	r0, [r7, #4]
 8006ef4:	f7ff feec 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8006ef8:	f241 3288 	movw	r2, #5000	; 0x1388
 8006efc:	2119      	movs	r1, #25
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 f9b8 	bl	8007274 <SDMMC_GetCmdResp1>
 8006f04:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f06:	69fb      	ldr	r3, [r7, #28]
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3720      	adds	r7, #32
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b088      	sub	sp, #32
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8006f1c:	230c      	movs	r3, #12
 8006f1e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f20:	2340      	movs	r3, #64	; 0x40
 8006f22:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f24:	2300      	movs	r3, #0
 8006f26:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f28:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f2c:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f2e:	f107 0308 	add.w	r3, r7, #8
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fecb 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8006f3a:	4a05      	ldr	r2, [pc, #20]	; (8006f50 <SDMMC_CmdStopTransfer+0x40>)
 8006f3c:	210c      	movs	r1, #12
 8006f3e:	6878      	ldr	r0, [r7, #4]
 8006f40:	f000 f998 	bl	8007274 <SDMMC_GetCmdResp1>
 8006f44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006f46:	69fb      	ldr	r3, [r7, #28]
}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	3720      	adds	r7, #32
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}
 8006f50:	05f5e100 	.word	0x05f5e100

08006f54 <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	b08a      	sub	sp, #40	; 0x28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8006f60:	683b      	ldr	r3, [r7, #0]
 8006f62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8006f64:	2307      	movs	r3, #7
 8006f66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006f68:	2340      	movs	r3, #64	; 0x40
 8006f6a:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006f6c:	2300      	movs	r3, #0
 8006f6e:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006f70:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f74:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006f76:	f107 0310 	add.w	r3, r7, #16
 8006f7a:	4619      	mov	r1, r3
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f7ff fea7 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 8006f82:	f241 3288 	movw	r2, #5000	; 0x1388
 8006f86:	2107      	movs	r1, #7
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f973 	bl	8007274 <SDMMC_GetCmdResp1>
 8006f8e:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8006f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f92:	4618      	mov	r0, r3
 8006f94:	3728      	adds	r7, #40	; 0x28
 8006f96:	46bd      	mov	sp, r7
 8006f98:	bd80      	pop	{r7, pc}

08006f9a <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 8006f9a:	b580      	push	{r7, lr}
 8006f9c:	b088      	sub	sp, #32
 8006f9e:	af00      	add	r7, sp, #0
 8006fa0:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 8006faa:	2300      	movs	r3, #0
 8006fac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006fb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006fb6:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006fb8:	f107 0308 	add.w	r3, r7, #8
 8006fbc:	4619      	mov	r1, r3
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f7ff fe86 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f000 f92d 	bl	8007224 <SDMMC_GetCmdError>
 8006fca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8006fcc:	69fb      	ldr	r3, [r7, #28]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3720      	adds	r7, #32
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}

08006fd6 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b088      	sub	sp, #32
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8006fde:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8006fe2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8006fe4:	2308      	movs	r3, #8
 8006fe6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8006fe8:	2340      	movs	r3, #64	; 0x40
 8006fea:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8006fec:	2300      	movs	r3, #0
 8006fee:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8006ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ff4:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8006ff6:	f107 0308 	add.w	r3, r7, #8
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f7ff fe67 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8007002:	6878      	ldr	r0, [r7, #4]
 8007004:	f000 fb16 	bl	8007634 <SDMMC_GetCmdResp7>
 8007008:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800700a:	69fb      	ldr	r3, [r7, #28]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3720      	adds	r7, #32
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b088      	sub	sp, #32
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 800701e:	683b      	ldr	r3, [r7, #0]
 8007020:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8007022:	2337      	movs	r3, #55	; 0x37
 8007024:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007026:	2340      	movs	r3, #64	; 0x40
 8007028:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800702a:	2300      	movs	r3, #0
 800702c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800702e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007032:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007034:	f107 0308 	add.w	r3, r7, #8
 8007038:	4619      	mov	r1, r3
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f7ff fe48 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8007040:	f241 3288 	movw	r2, #5000	; 0x1388
 8007044:	2137      	movs	r1, #55	; 0x37
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f000 f914 	bl	8007274 <SDMMC_GetCmdResp1>
 800704c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800704e:	69fb      	ldr	r3, [r7, #28]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3720      	adds	r7, #32
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}

08007058 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b088      	sub	sp, #32
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007068:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800706c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 800706e:	2329      	movs	r3, #41	; 0x29
 8007070:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8007072:	2340      	movs	r3, #64	; 0x40
 8007074:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007076:	2300      	movs	r3, #0
 8007078:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800707a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800707e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007080:	f107 0308 	add.w	r3, r7, #8
 8007084:	4619      	mov	r1, r3
 8007086:	6878      	ldr	r0, [r7, #4]
 8007088:	f7ff fe22 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fa23 	bl	80074d8 <SDMMC_GetCmdResp3>
 8007092:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007094:	69fb      	ldr	r3, [r7, #28]
}
 8007096:	4618      	mov	r0, r3
 8007098:	3720      	adds	r7, #32
 800709a:	46bd      	mov	sp, r7
 800709c:	bd80      	pop	{r7, pc}

0800709e <SDMMC_CmdBusWidth>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDIO_TypeDef *SDIOx, uint32_t BusWidth)
{
 800709e:	b580      	push	{r7, lr}
 80070a0:	b088      	sub	sp, #32
 80070a2:	af00      	add	r7, sp, #0
 80070a4:	6078      	str	r0, [r7, #4]
 80070a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 80070ac:	2306      	movs	r3, #6
 80070ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070b0:	2340      	movs	r3, #64	; 0x40
 80070b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070b4:	2300      	movs	r3, #0
 80070b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80070be:	f107 0308 	add.w	r3, r7, #8
 80070c2:	4619      	mov	r1, r3
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f7ff fe03 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDIO_CMDTIMEOUT);
 80070ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80070ce:	2106      	movs	r1, #6
 80070d0:	6878      	ldr	r0, [r7, #4]
 80070d2:	f000 f8cf 	bl	8007274 <SDMMC_GetCmdResp1>
 80070d6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80070d8:	69fb      	ldr	r3, [r7, #28]
}
 80070da:	4618      	mov	r0, r3
 80070dc:	3720      	adds	r7, #32
 80070de:	46bd      	mov	sp, r7
 80070e0:	bd80      	pop	{r7, pc}

080070e2 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDIO_TypeDef *SDIOx)
{
 80070e2:	b580      	push	{r7, lr}
 80070e4:	b088      	sub	sp, #32
 80070e6:	af00      	add	r7, sp, #0
 80070e8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 80070ea:	2300      	movs	r3, #0
 80070ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 80070ee:	2333      	movs	r3, #51	; 0x33
 80070f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80070f2:	2340      	movs	r3, #64	; 0x40
 80070f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80070f6:	2300      	movs	r3, #0
 80070f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80070fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80070fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007100:	f107 0308 	add.w	r3, r7, #8
 8007104:	4619      	mov	r1, r3
 8007106:	6878      	ldr	r0, [r7, #4]
 8007108:	f7ff fde2 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SD_APP_SEND_SCR, SDIO_CMDTIMEOUT);
 800710c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007110:	2133      	movs	r1, #51	; 0x33
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f000 f8ae 	bl	8007274 <SDMMC_GetCmdResp1>
 8007118:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800711a:	69fb      	ldr	r3, [r7, #28]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b088      	sub	sp, #32
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 800712c:	2300      	movs	r3, #0
 800712e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8007130:	2302      	movs	r3, #2
 8007132:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007134:	23c0      	movs	r3, #192	; 0xc0
 8007136:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007138:	2300      	movs	r3, #0
 800713a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800713c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007140:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007142:	f107 0308 	add.w	r3, r7, #8
 8007146:	4619      	mov	r1, r3
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f7ff fdc1 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f000 f97c 	bl	800744c <SDMMC_GetCmdResp2>
 8007154:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007156:	69fb      	ldr	r3, [r7, #28]
}
 8007158:	4618      	mov	r0, r3
 800715a:	3720      	adds	r7, #32
 800715c:	46bd      	mov	sp, r7
 800715e:	bd80      	pop	{r7, pc}

08007160 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	b088      	sub	sp, #32
 8007164:	af00      	add	r7, sp, #0
 8007166:	6078      	str	r0, [r7, #4]
 8007168:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 800716e:	2309      	movs	r3, #9
 8007170:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8007172:	23c0      	movs	r3, #192	; 0xc0
 8007174:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 800717a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800717e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007180:	f107 0308 	add.w	r3, r7, #8
 8007184:	4619      	mov	r1, r3
 8007186:	6878      	ldr	r0, [r7, #4]
 8007188:	f7ff fda2 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 f95d 	bl	800744c <SDMMC_GetCmdResp2>
 8007192:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8007194:	69fb      	ldr	r3, [r7, #28]
}
 8007196:	4618      	mov	r0, r3
 8007198:	3720      	adds	r7, #32
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b088      	sub	sp, #32
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
 80071a6:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 80071ac:	2303      	movs	r3, #3
 80071ae:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071b0:	2340      	movs	r3, #64	; 0x40
 80071b2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071b4:	2300      	movs	r3, #0
 80071b6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071bc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80071be:	f107 0308 	add.w	r3, r7, #8
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff fd83 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 80071ca:	683a      	ldr	r2, [r7, #0]
 80071cc:	2103      	movs	r1, #3
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 f9bc 	bl	800754c <SDMMC_GetCmdResp6>
 80071d4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80071d6:	69fb      	ldr	r3, [r7, #28]
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3720      	adds	r7, #32
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b088      	sub	sp, #32
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	6078      	str	r0, [r7, #4]
 80071e8:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 80071ee:	230d      	movs	r3, #13
 80071f0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80071f2:	2340      	movs	r3, #64	; 0x40
 80071f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80071f6:	2300      	movs	r3, #0
 80071f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80071fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80071fe:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8007200:	f107 0308 	add.w	r3, r7, #8
 8007204:	4619      	mov	r1, r3
 8007206:	6878      	ldr	r0, [r7, #4]
 8007208:	f7ff fd62 	bl	8006cd0 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 800720c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007210:	210d      	movs	r1, #13
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 f82e 	bl	8007274 <SDMMC_GetCmdResp1>
 8007218:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800721a:	69fb      	ldr	r3, [r7, #28]
}
 800721c:	4618      	mov	r0, r3
 800721e:	3720      	adds	r7, #32
 8007220:	46bd      	mov	sp, r7
 8007222:	bd80      	pop	{r7, pc}

08007224 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8007224:	b490      	push	{r4, r7}
 8007226:	b082      	sub	sp, #8
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800722c:	4b0f      	ldr	r3, [pc, #60]	; (800726c <SDMMC_GetCmdError+0x48>)
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	4a0f      	ldr	r2, [pc, #60]	; (8007270 <SDMMC_GetCmdError+0x4c>)
 8007232:	fba2 2303 	umull	r2, r3, r2, r3
 8007236:	0a5b      	lsrs	r3, r3, #9
 8007238:	f241 3288 	movw	r2, #5000	; 0x1388
 800723c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007240:	4623      	mov	r3, r4
 8007242:	1e5c      	subs	r4, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d102      	bne.n	800724e <SDMMC_GetCmdError+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007248:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800724c:	e009      	b.n	8007262 <SDMMC_GetCmdError+0x3e>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007252:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007256:	2b00      	cmp	r3, #0
 8007258:	d0f2      	beq.n	8007240 <SDMMC_GetCmdError+0x1c>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	22c5      	movs	r2, #197	; 0xc5
 800725e:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8007260:	2300      	movs	r3, #0
}
 8007262:	4618      	mov	r0, r3
 8007264:	3708      	adds	r7, #8
 8007266:	46bd      	mov	sp, r7
 8007268:	bc90      	pop	{r4, r7}
 800726a:	4770      	bx	lr
 800726c:	20000000 	.word	0x20000000
 8007270:	10624dd3 	.word	0x10624dd3

08007274 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8007274:	b590      	push	{r4, r7, lr}
 8007276:	b087      	sub	sp, #28
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	460b      	mov	r3, r1
 800727e:	607a      	str	r2, [r7, #4]
 8007280:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  register uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8007282:	4b6f      	ldr	r3, [pc, #444]	; (8007440 <SDMMC_GetCmdResp1+0x1cc>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a6f      	ldr	r2, [pc, #444]	; (8007444 <SDMMC_GetCmdResp1+0x1d0>)
 8007288:	fba2 2303 	umull	r2, r3, r2, r3
 800728c:	0a5b      	lsrs	r3, r3, #9
 800728e:	687a      	ldr	r2, [r7, #4]
 8007290:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007294:	4623      	mov	r3, r4
 8007296:	1e5c      	subs	r4, r3, #1
 8007298:	2b00      	cmp	r3, #0
 800729a:	d102      	bne.n	80072a2 <SDMMC_GetCmdResp1+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800729c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80072a0:	e0c9      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
    }
    sta_reg = SDIOx->STA;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072a6:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072a8:	697b      	ldr	r3, [r7, #20]
 80072aa:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 80072ae:	2b00      	cmp	r3, #0
 80072b0:	d0f0      	beq.n	8007294 <SDMMC_GetCmdResp1+0x20>
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d1eb      	bne.n	8007294 <SDMMC_GetCmdResp1+0x20>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072c0:	f003 0304 	and.w	r3, r3, #4
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d004      	beq.n	80072d2 <SDMMC_GetCmdResp1+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	2204      	movs	r2, #4
 80072cc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80072ce:	2304      	movs	r3, #4
 80072d0:	e0b1      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80072d6:	f003 0301 	and.w	r3, r3, #1
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d004      	beq.n	80072e8 <SDMMC_GetCmdResp1+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072e4:	2301      	movs	r3, #1
 80072e6:	e0a6      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	22c5      	movs	r2, #197	; 0xc5
 80072ec:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80072ee:	68f8      	ldr	r0, [r7, #12]
 80072f0:	f7ff fd18 	bl	8006d24 <SDIO_GetCommandResponse>
 80072f4:	4603      	mov	r3, r0
 80072f6:	461a      	mov	r2, r3
 80072f8:	7afb      	ldrb	r3, [r7, #11]
 80072fa:	4293      	cmp	r3, r2
 80072fc:	d001      	beq.n	8007302 <SDMMC_GetCmdResp1+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80072fe:	2301      	movs	r3, #1
 8007300:	e099      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8007302:	2100      	movs	r1, #0
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f7ff fd1a 	bl	8006d3e <SDIO_GetResponse>
 800730a:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 800730c:	693a      	ldr	r2, [r7, #16]
 800730e:	4b4e      	ldr	r3, [pc, #312]	; (8007448 <SDMMC_GetCmdResp1+0x1d4>)
 8007310:	4013      	ands	r3, r2
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <SDMMC_GetCmdResp1+0xa6>
  {
    return SDMMC_ERROR_NONE;
 8007316:	2300      	movs	r3, #0
 8007318:	e08d      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 800731a:	693b      	ldr	r3, [r7, #16]
 800731c:	2b00      	cmp	r3, #0
 800731e:	da02      	bge.n	8007326 <SDMMC_GetCmdResp1+0xb2>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8007320:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007324:	e087      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8007326:	693b      	ldr	r3, [r7, #16]
 8007328:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800732c:	2b00      	cmp	r3, #0
 800732e:	d001      	beq.n	8007334 <SDMMC_GetCmdResp1+0xc0>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8007330:	2340      	movs	r3, #64	; 0x40
 8007332:	e080      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8007334:	693b      	ldr	r3, [r7, #16]
 8007336:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800733a:	2b00      	cmp	r3, #0
 800733c:	d001      	beq.n	8007342 <SDMMC_GetCmdResp1+0xce>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	e079      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007348:	2b00      	cmp	r3, #0
 800734a:	d002      	beq.n	8007352 <SDMMC_GetCmdResp1+0xde>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 800734c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007350:	e071      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8007352:	693b      	ldr	r3, [r7, #16]
 8007354:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007358:	2b00      	cmp	r3, #0
 800735a:	d002      	beq.n	8007362 <SDMMC_GetCmdResp1+0xee>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 800735c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007360:	e069      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <SDMMC_GetCmdResp1+0xfe>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 800736c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007370:	e061      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007378:	2b00      	cmp	r3, #0
 800737a:	d002      	beq.n	8007382 <SDMMC_GetCmdResp1+0x10e>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 800737c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8007380:	e059      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8007382:	693b      	ldr	r3, [r7, #16]
 8007384:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007388:	2b00      	cmp	r3, #0
 800738a:	d002      	beq.n	8007392 <SDMMC_GetCmdResp1+0x11e>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 800738c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007390:	e051      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8007392:	693b      	ldr	r3, [r7, #16]
 8007394:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <SDMMC_GetCmdResp1+0x12e>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 800739c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80073a0:	e049      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80073a2:	693b      	ldr	r3, [r7, #16]
 80073a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d002      	beq.n	80073b2 <SDMMC_GetCmdResp1+0x13e>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 80073ac:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80073b0:	e041      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d002      	beq.n	80073c2 <SDMMC_GetCmdResp1+0x14e>
  {
    return SDMMC_ERROR_CC_ERR;
 80073bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073c0:	e039      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <SDMMC_GetCmdResp1+0x15e>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 80073cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80073d0:	e031      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d002      	beq.n	80073e2 <SDMMC_GetCmdResp1+0x16e>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 80073dc:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80073e0:	e029      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d002      	beq.n	80073f2 <SDMMC_GetCmdResp1+0x17e>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 80073ec:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80073f0:	e021      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 80073f2:	693b      	ldr	r3, [r7, #16]
 80073f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d002      	beq.n	8007402 <SDMMC_GetCmdResp1+0x18e>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 80073fc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8007400:	e019      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007408:	2b00      	cmp	r3, #0
 800740a:	d002      	beq.n	8007412 <SDMMC_GetCmdResp1+0x19e>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 800740c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007410:	e011      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d002      	beq.n	8007422 <SDMMC_GetCmdResp1+0x1ae>
  {
    return SDMMC_ERROR_ERASE_RESET;
 800741c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007420:	e009      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8007422:	693b      	ldr	r3, [r7, #16]
 8007424:	f003 0308 	and.w	r3, r3, #8
 8007428:	2b00      	cmp	r3, #0
 800742a:	d002      	beq.n	8007432 <SDMMC_GetCmdResp1+0x1be>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 800742c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007430:	e001      	b.n	8007436 <SDMMC_GetCmdResp1+0x1c2>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8007432:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007436:	4618      	mov	r0, r3
 8007438:	371c      	adds	r7, #28
 800743a:	46bd      	mov	sp, r7
 800743c:	bd90      	pop	{r4, r7, pc}
 800743e:	bf00      	nop
 8007440:	20000000 	.word	0x20000000
 8007444:	10624dd3 	.word	0x10624dd3
 8007448:	fdffe008 	.word	0xfdffe008

0800744c <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 800744c:	b490      	push	{r4, r7}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8007454:	4b1e      	ldr	r3, [pc, #120]	; (80074d0 <SDMMC_GetCmdResp2+0x84>)
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	4a1e      	ldr	r2, [pc, #120]	; (80074d4 <SDMMC_GetCmdResp2+0x88>)
 800745a:	fba2 2303 	umull	r2, r3, r2, r3
 800745e:	0a5b      	lsrs	r3, r3, #9
 8007460:	f241 3288 	movw	r2, #5000	; 0x1388
 8007464:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007468:	4623      	mov	r3, r4
 800746a:	1e5c      	subs	r4, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d102      	bne.n	8007476 <SDMMC_GetCmdResp2+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007470:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007474:	e026      	b.n	80074c4 <SDMMC_GetCmdResp2+0x78>
    }
    sta_reg = SDIOx->STA;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800747a:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007482:	2b00      	cmp	r3, #0
 8007484:	d0f0      	beq.n	8007468 <SDMMC_GetCmdResp2+0x1c>
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 800748c:	2b00      	cmp	r3, #0
 800748e:	d1eb      	bne.n	8007468 <SDMMC_GetCmdResp2+0x1c>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d004      	beq.n	80074a6 <SDMMC_GetCmdResp2+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2204      	movs	r2, #4
 80074a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80074a2:	2304      	movs	r3, #4
 80074a4:	e00e      	b.n	80074c4 <SDMMC_GetCmdResp2+0x78>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074aa:	f003 0301 	and.w	r3, r3, #1
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d004      	beq.n	80074bc <SDMMC_GetCmdResp2+0x70>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	2201      	movs	r2, #1
 80074b6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80074b8:	2301      	movs	r3, #1
 80074ba:	e003      	b.n	80074c4 <SDMMC_GetCmdResp2+0x78>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	22c5      	movs	r2, #197	; 0xc5
 80074c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3710      	adds	r7, #16
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bc90      	pop	{r4, r7}
 80074cc:	4770      	bx	lr
 80074ce:	bf00      	nop
 80074d0:	20000000 	.word	0x20000000
 80074d4:	10624dd3 	.word	0x10624dd3

080074d8 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 80074d8:	b490      	push	{r4, r7}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80074e0:	4b18      	ldr	r3, [pc, #96]	; (8007544 <SDMMC_GetCmdResp3+0x6c>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	4a18      	ldr	r2, [pc, #96]	; (8007548 <SDMMC_GetCmdResp3+0x70>)
 80074e6:	fba2 2303 	umull	r2, r3, r2, r3
 80074ea:	0a5b      	lsrs	r3, r3, #9
 80074ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80074f0:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 80074f4:	4623      	mov	r3, r4
 80074f6:	1e5c      	subs	r4, r3, #1
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d102      	bne.n	8007502 <SDMMC_GetCmdResp3+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 80074fc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8007500:	e01b      	b.n	800753a <SDMMC_GetCmdResp3+0x62>
    }
    sta_reg = SDIOx->STA;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007506:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800750e:	2b00      	cmp	r3, #0
 8007510:	d0f0      	beq.n	80074f4 <SDMMC_GetCmdResp3+0x1c>
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007518:	2b00      	cmp	r3, #0
 800751a:	d1eb      	bne.n	80074f4 <SDMMC_GetCmdResp3+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007520:	f003 0304 	and.w	r3, r3, #4
 8007524:	2b00      	cmp	r3, #0
 8007526:	d004      	beq.n	8007532 <SDMMC_GetCmdResp3+0x5a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	2204      	movs	r2, #4
 800752c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800752e:	2304      	movs	r3, #4
 8007530:	e003      	b.n	800753a <SDMMC_GetCmdResp3+0x62>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	22c5      	movs	r2, #197	; 0xc5
 8007536:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8007538:	2300      	movs	r3, #0
}
 800753a:	4618      	mov	r0, r3
 800753c:	3710      	adds	r7, #16
 800753e:	46bd      	mov	sp, r7
 8007540:	bc90      	pop	{r4, r7}
 8007542:	4770      	bx	lr
 8007544:	20000000 	.word	0x20000000
 8007548:	10624dd3 	.word	0x10624dd3

0800754c <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 800754c:	b590      	push	{r4, r7, lr}
 800754e:	b087      	sub	sp, #28
 8007550:	af00      	add	r7, sp, #0
 8007552:	60f8      	str	r0, [r7, #12]
 8007554:	460b      	mov	r3, r1
 8007556:	607a      	str	r2, [r7, #4]
 8007558:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800755a:	4b34      	ldr	r3, [pc, #208]	; (800762c <SDMMC_GetCmdResp6+0xe0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a34      	ldr	r2, [pc, #208]	; (8007630 <SDMMC_GetCmdResp6+0xe4>)
 8007560:	fba2 2303 	umull	r2, r3, r2, r3
 8007564:	0a5b      	lsrs	r3, r3, #9
 8007566:	f241 3288 	movw	r2, #5000	; 0x1388
 800756a:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 800756e:	4623      	mov	r3, r4
 8007570:	1e5c      	subs	r4, r3, #1
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <SDMMC_GetCmdResp6+0x30>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007576:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800757a:	e052      	b.n	8007622 <SDMMC_GetCmdResp6+0xd6>
    }
    sta_reg = SDIOx->STA;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007580:	617b      	str	r3, [r7, #20]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8007588:	2b00      	cmp	r3, #0
 800758a:	d0f0      	beq.n	800756e <SDMMC_GetCmdResp6+0x22>
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1eb      	bne.n	800756e <SDMMC_GetCmdResp6+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800759a:	f003 0304 	and.w	r3, r3, #4
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d004      	beq.n	80075ac <SDMMC_GetCmdResp6+0x60>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2204      	movs	r2, #4
 80075a6:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80075a8:	2304      	movs	r3, #4
 80075aa:	e03a      	b.n	8007622 <SDMMC_GetCmdResp6+0xd6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80075b0:	f003 0301 	and.w	r3, r3, #1
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d004      	beq.n	80075c2 <SDMMC_GetCmdResp6+0x76>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	2201      	movs	r2, #1
 80075bc:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075be:	2301      	movs	r3, #1
 80075c0:	e02f      	b.n	8007622 <SDMMC_GetCmdResp6+0xd6>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 80075c2:	68f8      	ldr	r0, [r7, #12]
 80075c4:	f7ff fbae 	bl	8006d24 <SDIO_GetCommandResponse>
 80075c8:	4603      	mov	r3, r0
 80075ca:	461a      	mov	r2, r3
 80075cc:	7afb      	ldrb	r3, [r7, #11]
 80075ce:	4293      	cmp	r3, r2
 80075d0:	d001      	beq.n	80075d6 <SDMMC_GetCmdResp6+0x8a>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80075d2:	2301      	movs	r3, #1
 80075d4:	e025      	b.n	8007622 <SDMMC_GetCmdResp6+0xd6>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	22c5      	movs	r2, #197	; 0xc5
 80075da:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 80075dc:	2100      	movs	r1, #0
 80075de:	68f8      	ldr	r0, [r7, #12]
 80075e0:	f7ff fbad 	bl	8006d3e <SDIO_GetResponse>
 80075e4:	6138      	str	r0, [r7, #16]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d106      	bne.n	80075fe <SDMMC_GetCmdResp6+0xb2>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	0c1b      	lsrs	r3, r3, #16
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	e011      	b.n	8007622 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80075fe:	693b      	ldr	r3, [r7, #16]
 8007600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007604:	2b00      	cmp	r3, #0
 8007606:	d002      	beq.n	800760e <SDMMC_GetCmdResp6+0xc2>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8007608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800760c:	e009      	b.n	8007622 <SDMMC_GetCmdResp6+0xd6>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <SDMMC_GetCmdResp6+0xd2>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8007618:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800761c:	e001      	b.n	8007622 <SDMMC_GetCmdResp6+0xd6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 800761e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8007622:	4618      	mov	r0, r3
 8007624:	371c      	adds	r7, #28
 8007626:	46bd      	mov	sp, r7
 8007628:	bd90      	pop	{r4, r7, pc}
 800762a:	bf00      	nop
 800762c:	20000000 	.word	0x20000000
 8007630:	10624dd3 	.word	0x10624dd3

08007634 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8007634:	b490      	push	{r4, r7}
 8007636:	b084      	sub	sp, #16
 8007638:	af00      	add	r7, sp, #0
 800763a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  register uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 800763c:	4b21      	ldr	r3, [pc, #132]	; (80076c4 <SDMMC_GetCmdResp7+0x90>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	4a21      	ldr	r2, [pc, #132]	; (80076c8 <SDMMC_GetCmdResp7+0x94>)
 8007642:	fba2 2303 	umull	r2, r3, r2, r3
 8007646:	0a5b      	lsrs	r3, r3, #9
 8007648:	f241 3288 	movw	r2, #5000	; 0x1388
 800764c:	fb02 f403 	mul.w	r4, r2, r3
  
  do
  {
    if (count-- == 0U)
 8007650:	4623      	mov	r3, r4
 8007652:	1e5c      	subs	r4, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d102      	bne.n	800765e <SDMMC_GetCmdResp7+0x2a>
    {
      return SDMMC_ERROR_TIMEOUT;
 8007658:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800765c:	e02c      	b.n	80076b8 <SDMMC_GetCmdResp7+0x84>
    }
    sta_reg = SDIOx->STA;
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007662:	60fb      	str	r3, [r7, #12]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007664:	68fb      	ldr	r3, [r7, #12]
 8007666:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800766a:	2b00      	cmp	r3, #0
 800766c:	d0f0      	beq.n	8007650 <SDMMC_GetCmdResp7+0x1c>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8007674:	2b00      	cmp	r3, #0
 8007676:	d1eb      	bne.n	8007650 <SDMMC_GetCmdResp7+0x1c>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800767c:	f003 0304 	and.w	r3, r3, #4
 8007680:	2b00      	cmp	r3, #0
 8007682:	d004      	beq.n	800768e <SDMMC_GetCmdResp7+0x5a>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	2204      	movs	r2, #4
 8007688:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800768a:	2304      	movs	r3, #4
 800768c:	e014      	b.n	80076b8 <SDMMC_GetCmdResp7+0x84>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007692:	f003 0301 	and.w	r3, r3, #1
 8007696:	2b00      	cmp	r3, #0
 8007698:	d004      	beq.n	80076a4 <SDMMC_GetCmdResp7+0x70>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2201      	movs	r2, #1
 800769e:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 80076a0:	2301      	movs	r3, #1
 80076a2:	e009      	b.n	80076b8 <SDMMC_GetCmdResp7+0x84>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d002      	beq.n	80076b6 <SDMMC_GetCmdResp7+0x82>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	2240      	movs	r2, #64	; 0x40
 80076b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80076b6:	2300      	movs	r3, #0
  
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bc90      	pop	{r4, r7}
 80076c0:	4770      	bx	lr
 80076c2:	bf00      	nop
 80076c4:	20000000 	.word	0x20000000
 80076c8:	10624dd3 	.word	0x10624dd3

080076cc <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80076d0:	4904      	ldr	r1, [pc, #16]	; (80076e4 <MX_FATFS_Init+0x18>)
 80076d2:	4805      	ldr	r0, [pc, #20]	; (80076e8 <MX_FATFS_Init+0x1c>)
 80076d4:	f000 f9d2 	bl	8007a7c <FATFS_LinkDriver>
 80076d8:	4603      	mov	r3, r0
 80076da:	461a      	mov	r2, r3
 80076dc:	4b03      	ldr	r3, [pc, #12]	; (80076ec <MX_FATFS_Init+0x20>)
 80076de:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80076e0:	bf00      	nop
 80076e2:	bd80      	pop	{r7, pc}
 80076e4:	20000578 	.word	0x20000578
 80076e8:	08009af4 	.word	0x08009af4
 80076ec:	20000574 	.word	0x20000574

080076f0 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80076f6:	2300      	movs	r3, #0
 80076f8:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80076fa:	f000 f879 	bl	80077f0 <BSP_SD_IsDetected>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b01      	cmp	r3, #1
 8007702:	d001      	beq.n	8007708 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 8007704:	2301      	movs	r3, #1
 8007706:	e012      	b.n	800772e <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 8007708:	480b      	ldr	r0, [pc, #44]	; (8007738 <BSP_SD_Init+0x48>)
 800770a:	f7fd ffea 	bl	80056e2 <HAL_SD_Init>
 800770e:	4603      	mov	r3, r0
 8007710:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 8007712:	79fb      	ldrb	r3, [r7, #7]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d109      	bne.n	800772c <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd, SDIO_BUS_WIDE_4B) != HAL_OK)
 8007718:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800771c:	4806      	ldr	r0, [pc, #24]	; (8007738 <BSP_SD_Init+0x48>)
 800771e:	f7fe fddd 	bl	80062dc <HAL_SD_ConfigWideBusOperation>
 8007722:	4603      	mov	r3, r0
 8007724:	2b00      	cmp	r3, #0
 8007726:	d001      	beq.n	800772c <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 800772c:	79fb      	ldrb	r3, [r7, #7]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3708      	adds	r7, #8
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	200004e0 	.word	0x200004e0

0800773c <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b088      	sub	sp, #32
 8007740:	af02      	add	r7, sp, #8
 8007742:	60f8      	str	r0, [r7, #12]
 8007744:	60b9      	str	r1, [r7, #8]
 8007746:	607a      	str	r2, [r7, #4]
 8007748:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800774a:	2300      	movs	r3, #0
 800774c:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	9300      	str	r3, [sp, #0]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	68ba      	ldr	r2, [r7, #8]
 8007756:	68f9      	ldr	r1, [r7, #12]
 8007758:	4806      	ldr	r0, [pc, #24]	; (8007774 <BSP_SD_ReadBlocks+0x38>)
 800775a:	f7fe f853 	bl	8005804 <HAL_SD_ReadBlocks>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8007768:	7dfb      	ldrb	r3, [r7, #23]
}
 800776a:	4618      	mov	r0, r3
 800776c:	3718      	adds	r7, #24
 800776e:	46bd      	mov	sp, r7
 8007770:	bd80      	pop	{r7, pc}
 8007772:	bf00      	nop
 8007774:	200004e0 	.word	0x200004e0

08007778 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af02      	add	r7, sp, #8
 800777e:	60f8      	str	r0, [r7, #12]
 8007780:	60b9      	str	r1, [r7, #8]
 8007782:	607a      	str	r2, [r7, #4]
 8007784:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	9300      	str	r3, [sp, #0]
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	68f9      	ldr	r1, [r7, #12]
 8007794:	4806      	ldr	r0, [pc, #24]	; (80077b0 <BSP_SD_WriteBlocks+0x38>)
 8007796:	f7fe fa2f 	bl	8005bf8 <HAL_SD_WriteBlocks>
 800779a:	4603      	mov	r3, r0
 800779c:	2b00      	cmp	r3, #0
 800779e:	d001      	beq.n	80077a4 <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80077a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3718      	adds	r7, #24
 80077aa:	46bd      	mov	sp, r7
 80077ac:	bd80      	pop	{r7, pc}
 80077ae:	bf00      	nop
 80077b0:	200004e0 	.word	0x200004e0

080077b4 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80077b8:	4805      	ldr	r0, [pc, #20]	; (80077d0 <BSP_SD_GetCardState+0x1c>)
 80077ba:	f7fe fe0b 	bl	80063d4 <HAL_SD_GetCardState>
 80077be:	4603      	mov	r3, r0
 80077c0:	2b04      	cmp	r3, #4
 80077c2:	bf14      	ite	ne
 80077c4:	2301      	movne	r3, #1
 80077c6:	2300      	moveq	r3, #0
 80077c8:	b2db      	uxtb	r3, r3
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	bd80      	pop	{r7, pc}
 80077ce:	bf00      	nop
 80077d0:	200004e0 	.word	0x200004e0

080077d4 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b082      	sub	sp, #8
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 80077dc:	6879      	ldr	r1, [r7, #4]
 80077de:	4803      	ldr	r0, [pc, #12]	; (80077ec <BSP_SD_GetCardInfo+0x18>)
 80077e0:	f7fe fd50 	bl	8006284 <HAL_SD_GetCardInfo>
}
 80077e4:	bf00      	nop
 80077e6:	3708      	adds	r7, #8
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	200004e0 	.word	0x200004e0

080077f0 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 80077f0:	b480      	push	{r7}
 80077f2:	b083      	sub	sp, #12
 80077f4:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 80077f6:	2301      	movs	r3, #1
 80077f8:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 80077fa:	79fb      	ldrb	r3, [r7, #7]
 80077fc:	b2db      	uxtb	r3, r3
}
 80077fe:	4618      	mov	r0, r3
 8007800:	370c      	adds	r7, #12
 8007802:	46bd      	mov	sp, r7
 8007804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007808:	4770      	bx	lr
	...

0800780c <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	4603      	mov	r3, r0
 8007814:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 8007816:	4b0b      	ldr	r3, [pc, #44]	; (8007844 <SD_CheckStatus+0x38>)
 8007818:	2201      	movs	r2, #1
 800781a:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 800781c:	f7ff ffca 	bl	80077b4 <BSP_SD_GetCardState>
 8007820:	4603      	mov	r3, r0
 8007822:	2b00      	cmp	r3, #0
 8007824:	d107      	bne.n	8007836 <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 8007826:	4b07      	ldr	r3, [pc, #28]	; (8007844 <SD_CheckStatus+0x38>)
 8007828:	781b      	ldrb	r3, [r3, #0]
 800782a:	b2db      	uxtb	r3, r3
 800782c:	f023 0301 	bic.w	r3, r3, #1
 8007830:	b2da      	uxtb	r2, r3
 8007832:	4b04      	ldr	r3, [pc, #16]	; (8007844 <SD_CheckStatus+0x38>)
 8007834:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 8007836:	4b03      	ldr	r3, [pc, #12]	; (8007844 <SD_CheckStatus+0x38>)
 8007838:	781b      	ldrb	r3, [r3, #0]
 800783a:	b2db      	uxtb	r3, r3
}
 800783c:	4618      	mov	r0, r3
 800783e:	3708      	adds	r7, #8
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}
 8007844:	20000051 	.word	0x20000051

08007848 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b082      	sub	sp, #8
 800784c:	af00      	add	r7, sp, #0
 800784e:	4603      	mov	r3, r0
 8007850:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 8007852:	4b0b      	ldr	r3, [pc, #44]	; (8007880 <SD_initialize+0x38>)
 8007854:	2201      	movs	r2, #1
 8007856:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 8007858:	f7ff ff4a 	bl	80076f0 <BSP_SD_Init>
 800785c:	4603      	mov	r3, r0
 800785e:	2b00      	cmp	r3, #0
 8007860:	d107      	bne.n	8007872 <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 8007862:	79fb      	ldrb	r3, [r7, #7]
 8007864:	4618      	mov	r0, r3
 8007866:	f7ff ffd1 	bl	800780c <SD_CheckStatus>
 800786a:	4603      	mov	r3, r0
 800786c:	461a      	mov	r2, r3
 800786e:	4b04      	ldr	r3, [pc, #16]	; (8007880 <SD_initialize+0x38>)
 8007870:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8007872:	4b03      	ldr	r3, [pc, #12]	; (8007880 <SD_initialize+0x38>)
 8007874:	781b      	ldrb	r3, [r3, #0]
 8007876:	b2db      	uxtb	r3, r3
}
 8007878:	4618      	mov	r0, r3
 800787a:	3708      	adds	r7, #8
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}
 8007880:	20000051 	.word	0x20000051

08007884 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b082      	sub	sp, #8
 8007888:	af00      	add	r7, sp, #0
 800788a:	4603      	mov	r3, r0
 800788c:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 800788e:	79fb      	ldrb	r3, [r7, #7]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff ffbb 	bl	800780c <SD_CheckStatus>
 8007896:	4603      	mov	r3, r0
}
 8007898:	4618      	mov	r0, r3
 800789a:	3708      	adds	r7, #8
 800789c:	46bd      	mov	sp, r7
 800789e:	bd80      	pop	{r7, pc}

080078a0 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 80078a0:	b580      	push	{r7, lr}
 80078a2:	b086      	sub	sp, #24
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	60b9      	str	r1, [r7, #8]
 80078a8:	607a      	str	r2, [r7, #4]
 80078aa:	603b      	str	r3, [r7, #0]
 80078ac:	4603      	mov	r3, r0
 80078ae:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80078b0:	2301      	movs	r3, #1
 80078b2:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 80078b4:	f04f 33ff 	mov.w	r3, #4294967295
 80078b8:	683a      	ldr	r2, [r7, #0]
 80078ba:	6879      	ldr	r1, [r7, #4]
 80078bc:	68b8      	ldr	r0, [r7, #8]
 80078be:	f7ff ff3d 	bl	800773c <BSP_SD_ReadBlocks>
 80078c2:	4603      	mov	r3, r0
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d107      	bne.n	80078d8 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 80078c8:	bf00      	nop
 80078ca:	f7ff ff73 	bl	80077b4 <BSP_SD_GetCardState>
 80078ce:	4603      	mov	r3, r0
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1fa      	bne.n	80078ca <SD_read+0x2a>
    {
    }
    res = RES_OK;
 80078d4:	2300      	movs	r3, #0
 80078d6:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80078d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80078da:	4618      	mov	r0, r3
 80078dc:	3718      	adds	r7, #24
 80078de:	46bd      	mov	sp, r7
 80078e0:	bd80      	pop	{r7, pc}

080078e2 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 80078e2:	b580      	push	{r7, lr}
 80078e4:	b086      	sub	sp, #24
 80078e6:	af00      	add	r7, sp, #0
 80078e8:	60b9      	str	r1, [r7, #8]
 80078ea:	607a      	str	r2, [r7, #4]
 80078ec:	603b      	str	r3, [r7, #0]
 80078ee:	4603      	mov	r3, r0
 80078f0:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 80078f6:	f04f 33ff 	mov.w	r3, #4294967295
 80078fa:	683a      	ldr	r2, [r7, #0]
 80078fc:	6879      	ldr	r1, [r7, #4]
 80078fe:	68b8      	ldr	r0, [r7, #8]
 8007900:	f7ff ff3a 	bl	8007778 <BSP_SD_WriteBlocks>
 8007904:	4603      	mov	r3, r0
 8007906:	2b00      	cmp	r3, #0
 8007908:	d107      	bne.n	800791a <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 800790a:	bf00      	nop
 800790c:	f7ff ff52 	bl	80077b4 <BSP_SD_GetCardState>
 8007910:	4603      	mov	r3, r0
 8007912:	2b00      	cmp	r3, #0
 8007914:	d1fa      	bne.n	800790c <SD_write+0x2a>
    {
    }
    res = RES_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 800791a:	7dfb      	ldrb	r3, [r7, #23]
}
 800791c:	4618      	mov	r0, r3
 800791e:	3718      	adds	r7, #24
 8007920:	46bd      	mov	sp, r7
 8007922:	bd80      	pop	{r7, pc}

08007924 <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b08c      	sub	sp, #48	; 0x30
 8007928:	af00      	add	r7, sp, #0
 800792a:	4603      	mov	r3, r0
 800792c:	603a      	str	r2, [r7, #0]
 800792e:	71fb      	strb	r3, [r7, #7]
 8007930:	460b      	mov	r3, r1
 8007932:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 800793a:	4b25      	ldr	r3, [pc, #148]	; (80079d0 <SD_ioctl+0xac>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	b2db      	uxtb	r3, r3
 8007940:	f003 0301 	and.w	r3, r3, #1
 8007944:	2b00      	cmp	r3, #0
 8007946:	d001      	beq.n	800794c <SD_ioctl+0x28>
 8007948:	2303      	movs	r3, #3
 800794a:	e03c      	b.n	80079c6 <SD_ioctl+0xa2>

  switch (cmd)
 800794c:	79bb      	ldrb	r3, [r7, #6]
 800794e:	2b03      	cmp	r3, #3
 8007950:	d834      	bhi.n	80079bc <SD_ioctl+0x98>
 8007952:	a201      	add	r2, pc, #4	; (adr r2, 8007958 <SD_ioctl+0x34>)
 8007954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007958:	08007969 	.word	0x08007969
 800795c:	08007971 	.word	0x08007971
 8007960:	08007989 	.word	0x08007989
 8007964:	080079a3 	.word	0x080079a3
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800796e:	e028      	b.n	80079c2 <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8007970:	f107 030c 	add.w	r3, r7, #12
 8007974:	4618      	mov	r0, r3
 8007976:	f7ff ff2d 	bl	80077d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 800797a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8007980:	2300      	movs	r3, #0
 8007982:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8007986:	e01c      	b.n	80079c2 <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8007988:	f107 030c 	add.w	r3, r7, #12
 800798c:	4618      	mov	r0, r3
 800798e:	f7ff ff21 	bl	80077d4 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 8007992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007994:	b29a      	uxth	r2, r3
 8007996:	683b      	ldr	r3, [r7, #0]
 8007998:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 800799a:	2300      	movs	r3, #0
 800799c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80079a0:	e00f      	b.n	80079c2 <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 80079a2:	f107 030c 	add.w	r3, r7, #12
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7ff ff14 	bl	80077d4 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 80079ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079ae:	0a5a      	lsrs	r2, r3, #9
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 80079b4:	2300      	movs	r3, #0
 80079b6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 80079ba:	e002      	b.n	80079c2 <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 80079bc:	2304      	movs	r3, #4
 80079be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 80079c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80079c6:	4618      	mov	r0, r3
 80079c8:	3730      	adds	r7, #48	; 0x30
 80079ca:	46bd      	mov	sp, r7
 80079cc:	bd80      	pop	{r7, pc}
 80079ce:	bf00      	nop
 80079d0:	20000051 	.word	0x20000051

080079d4 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 80079d4:	b480      	push	{r7}
 80079d6:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 80079d8:	bf00      	nop
 80079da:	46bd      	mov	sp, r7
 80079dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e0:	4770      	bx	lr
	...

080079e4 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 80079e4:	b480      	push	{r7}
 80079e6:	b087      	sub	sp, #28
 80079e8:	af00      	add	r7, sp, #0
 80079ea:	60f8      	str	r0, [r7, #12]
 80079ec:	60b9      	str	r1, [r7, #8]
 80079ee:	4613      	mov	r3, r2
 80079f0:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 80079f2:	2301      	movs	r3, #1
 80079f4:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 80079f6:	2300      	movs	r3, #0
 80079f8:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 80079fa:	4b1f      	ldr	r3, [pc, #124]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 80079fc:	7a5b      	ldrb	r3, [r3, #9]
 80079fe:	b2db      	uxtb	r3, r3
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d131      	bne.n	8007a68 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007a04:	4b1c      	ldr	r3, [pc, #112]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a06:	7a5b      	ldrb	r3, [r3, #9]
 8007a08:	b2db      	uxtb	r3, r3
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	4b1a      	ldr	r3, [pc, #104]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a0e:	2100      	movs	r1, #0
 8007a10:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007a12:	4b19      	ldr	r3, [pc, #100]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a14:	7a5b      	ldrb	r3, [r3, #9]
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	4a17      	ldr	r2, [pc, #92]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a1a:	009b      	lsls	r3, r3, #2
 8007a1c:	4413      	add	r3, r2
 8007a1e:	68fa      	ldr	r2, [r7, #12]
 8007a20:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007a22:	4b15      	ldr	r3, [pc, #84]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a24:	7a5b      	ldrb	r3, [r3, #9]
 8007a26:	b2db      	uxtb	r3, r3
 8007a28:	461a      	mov	r2, r3
 8007a2a:	4b13      	ldr	r3, [pc, #76]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a2c:	4413      	add	r3, r2
 8007a2e:	79fa      	ldrb	r2, [r7, #7]
 8007a30:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007a32:	4b11      	ldr	r3, [pc, #68]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a34:	7a5b      	ldrb	r3, [r3, #9]
 8007a36:	b2db      	uxtb	r3, r3
 8007a38:	1c5a      	adds	r2, r3, #1
 8007a3a:	b2d1      	uxtb	r1, r2
 8007a3c:	4a0e      	ldr	r2, [pc, #56]	; (8007a78 <FATFS_LinkDriverEx+0x94>)
 8007a3e:	7251      	strb	r1, [r2, #9]
 8007a40:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007a42:	7dbb      	ldrb	r3, [r7, #22]
 8007a44:	3330      	adds	r3, #48	; 0x30
 8007a46:	b2da      	uxtb	r2, r3
 8007a48:	68bb      	ldr	r3, [r7, #8]
 8007a4a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	223a      	movs	r2, #58	; 0x3a
 8007a52:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007a54:	68bb      	ldr	r3, [r7, #8]
 8007a56:	3302      	adds	r3, #2
 8007a58:	222f      	movs	r2, #47	; 0x2f
 8007a5a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007a5c:	68bb      	ldr	r3, [r7, #8]
 8007a5e:	3303      	adds	r3, #3
 8007a60:	2200      	movs	r2, #0
 8007a62:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007a64:	2300      	movs	r3, #0
 8007a66:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007a68:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	371c      	adds	r7, #28
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr
 8007a76:	bf00      	nop
 8007a78:	2000045c 	.word	0x2000045c

08007a7c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	6078      	str	r0, [r7, #4]
 8007a84:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007a86:	2200      	movs	r2, #0
 8007a88:	6839      	ldr	r1, [r7, #0]
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f7ff ffaa 	bl	80079e4 <FATFS_LinkDriverEx>
 8007a90:	4603      	mov	r3, r0
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3708      	adds	r7, #8
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}
	...

08007a9c <__errno>:
 8007a9c:	4b01      	ldr	r3, [pc, #4]	; (8007aa4 <__errno+0x8>)
 8007a9e:	6818      	ldr	r0, [r3, #0]
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	2000005c 	.word	0x2000005c

08007aa8 <__libc_init_array>:
 8007aa8:	b570      	push	{r4, r5, r6, lr}
 8007aaa:	4e0d      	ldr	r6, [pc, #52]	; (8007ae0 <__libc_init_array+0x38>)
 8007aac:	4c0d      	ldr	r4, [pc, #52]	; (8007ae4 <__libc_init_array+0x3c>)
 8007aae:	1ba4      	subs	r4, r4, r6
 8007ab0:	10a4      	asrs	r4, r4, #2
 8007ab2:	2500      	movs	r5, #0
 8007ab4:	42a5      	cmp	r5, r4
 8007ab6:	d109      	bne.n	8007acc <__libc_init_array+0x24>
 8007ab8:	4e0b      	ldr	r6, [pc, #44]	; (8007ae8 <__libc_init_array+0x40>)
 8007aba:	4c0c      	ldr	r4, [pc, #48]	; (8007aec <__libc_init_array+0x44>)
 8007abc:	f001 ffbe 	bl	8009a3c <_init>
 8007ac0:	1ba4      	subs	r4, r4, r6
 8007ac2:	10a4      	asrs	r4, r4, #2
 8007ac4:	2500      	movs	r5, #0
 8007ac6:	42a5      	cmp	r5, r4
 8007ac8:	d105      	bne.n	8007ad6 <__libc_init_array+0x2e>
 8007aca:	bd70      	pop	{r4, r5, r6, pc}
 8007acc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ad0:	4798      	blx	r3
 8007ad2:	3501      	adds	r5, #1
 8007ad4:	e7ee      	b.n	8007ab4 <__libc_init_array+0xc>
 8007ad6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007ada:	4798      	blx	r3
 8007adc:	3501      	adds	r5, #1
 8007ade:	e7f2      	b.n	8007ac6 <__libc_init_array+0x1e>
 8007ae0:	0800a078 	.word	0x0800a078
 8007ae4:	0800a078 	.word	0x0800a078
 8007ae8:	0800a078 	.word	0x0800a078
 8007aec:	0800a07c 	.word	0x0800a07c

08007af0 <memset>:
 8007af0:	4402      	add	r2, r0
 8007af2:	4603      	mov	r3, r0
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d100      	bne.n	8007afa <memset+0xa>
 8007af8:	4770      	bx	lr
 8007afa:	f803 1b01 	strb.w	r1, [r3], #1
 8007afe:	e7f9      	b.n	8007af4 <memset+0x4>

08007b00 <_free_r>:
 8007b00:	b538      	push	{r3, r4, r5, lr}
 8007b02:	4605      	mov	r5, r0
 8007b04:	2900      	cmp	r1, #0
 8007b06:	d045      	beq.n	8007b94 <_free_r+0x94>
 8007b08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b0c:	1f0c      	subs	r4, r1, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	bfb8      	it	lt
 8007b12:	18e4      	addlt	r4, r4, r3
 8007b14:	f000 fbc6 	bl	80082a4 <__malloc_lock>
 8007b18:	4a1f      	ldr	r2, [pc, #124]	; (8007b98 <_free_r+0x98>)
 8007b1a:	6813      	ldr	r3, [r2, #0]
 8007b1c:	4610      	mov	r0, r2
 8007b1e:	b933      	cbnz	r3, 8007b2e <_free_r+0x2e>
 8007b20:	6063      	str	r3, [r4, #4]
 8007b22:	6014      	str	r4, [r2, #0]
 8007b24:	4628      	mov	r0, r5
 8007b26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b2a:	f000 bbbc 	b.w	80082a6 <__malloc_unlock>
 8007b2e:	42a3      	cmp	r3, r4
 8007b30:	d90c      	bls.n	8007b4c <_free_r+0x4c>
 8007b32:	6821      	ldr	r1, [r4, #0]
 8007b34:	1862      	adds	r2, r4, r1
 8007b36:	4293      	cmp	r3, r2
 8007b38:	bf04      	itt	eq
 8007b3a:	681a      	ldreq	r2, [r3, #0]
 8007b3c:	685b      	ldreq	r3, [r3, #4]
 8007b3e:	6063      	str	r3, [r4, #4]
 8007b40:	bf04      	itt	eq
 8007b42:	1852      	addeq	r2, r2, r1
 8007b44:	6022      	streq	r2, [r4, #0]
 8007b46:	6004      	str	r4, [r0, #0]
 8007b48:	e7ec      	b.n	8007b24 <_free_r+0x24>
 8007b4a:	4613      	mov	r3, r2
 8007b4c:	685a      	ldr	r2, [r3, #4]
 8007b4e:	b10a      	cbz	r2, 8007b54 <_free_r+0x54>
 8007b50:	42a2      	cmp	r2, r4
 8007b52:	d9fa      	bls.n	8007b4a <_free_r+0x4a>
 8007b54:	6819      	ldr	r1, [r3, #0]
 8007b56:	1858      	adds	r0, r3, r1
 8007b58:	42a0      	cmp	r0, r4
 8007b5a:	d10b      	bne.n	8007b74 <_free_r+0x74>
 8007b5c:	6820      	ldr	r0, [r4, #0]
 8007b5e:	4401      	add	r1, r0
 8007b60:	1858      	adds	r0, r3, r1
 8007b62:	4282      	cmp	r2, r0
 8007b64:	6019      	str	r1, [r3, #0]
 8007b66:	d1dd      	bne.n	8007b24 <_free_r+0x24>
 8007b68:	6810      	ldr	r0, [r2, #0]
 8007b6a:	6852      	ldr	r2, [r2, #4]
 8007b6c:	605a      	str	r2, [r3, #4]
 8007b6e:	4401      	add	r1, r0
 8007b70:	6019      	str	r1, [r3, #0]
 8007b72:	e7d7      	b.n	8007b24 <_free_r+0x24>
 8007b74:	d902      	bls.n	8007b7c <_free_r+0x7c>
 8007b76:	230c      	movs	r3, #12
 8007b78:	602b      	str	r3, [r5, #0]
 8007b7a:	e7d3      	b.n	8007b24 <_free_r+0x24>
 8007b7c:	6820      	ldr	r0, [r4, #0]
 8007b7e:	1821      	adds	r1, r4, r0
 8007b80:	428a      	cmp	r2, r1
 8007b82:	bf04      	itt	eq
 8007b84:	6811      	ldreq	r1, [r2, #0]
 8007b86:	6852      	ldreq	r2, [r2, #4]
 8007b88:	6062      	str	r2, [r4, #4]
 8007b8a:	bf04      	itt	eq
 8007b8c:	1809      	addeq	r1, r1, r0
 8007b8e:	6021      	streq	r1, [r4, #0]
 8007b90:	605c      	str	r4, [r3, #4]
 8007b92:	e7c7      	b.n	8007b24 <_free_r+0x24>
 8007b94:	bd38      	pop	{r3, r4, r5, pc}
 8007b96:	bf00      	nop
 8007b98:	20000468 	.word	0x20000468

08007b9c <_malloc_r>:
 8007b9c:	b570      	push	{r4, r5, r6, lr}
 8007b9e:	1ccd      	adds	r5, r1, #3
 8007ba0:	f025 0503 	bic.w	r5, r5, #3
 8007ba4:	3508      	adds	r5, #8
 8007ba6:	2d0c      	cmp	r5, #12
 8007ba8:	bf38      	it	cc
 8007baa:	250c      	movcc	r5, #12
 8007bac:	2d00      	cmp	r5, #0
 8007bae:	4606      	mov	r6, r0
 8007bb0:	db01      	blt.n	8007bb6 <_malloc_r+0x1a>
 8007bb2:	42a9      	cmp	r1, r5
 8007bb4:	d903      	bls.n	8007bbe <_malloc_r+0x22>
 8007bb6:	230c      	movs	r3, #12
 8007bb8:	6033      	str	r3, [r6, #0]
 8007bba:	2000      	movs	r0, #0
 8007bbc:	bd70      	pop	{r4, r5, r6, pc}
 8007bbe:	f000 fb71 	bl	80082a4 <__malloc_lock>
 8007bc2:	4a21      	ldr	r2, [pc, #132]	; (8007c48 <_malloc_r+0xac>)
 8007bc4:	6814      	ldr	r4, [r2, #0]
 8007bc6:	4621      	mov	r1, r4
 8007bc8:	b991      	cbnz	r1, 8007bf0 <_malloc_r+0x54>
 8007bca:	4c20      	ldr	r4, [pc, #128]	; (8007c4c <_malloc_r+0xb0>)
 8007bcc:	6823      	ldr	r3, [r4, #0]
 8007bce:	b91b      	cbnz	r3, 8007bd8 <_malloc_r+0x3c>
 8007bd0:	4630      	mov	r0, r6
 8007bd2:	f000 f8b9 	bl	8007d48 <_sbrk_r>
 8007bd6:	6020      	str	r0, [r4, #0]
 8007bd8:	4629      	mov	r1, r5
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f000 f8b4 	bl	8007d48 <_sbrk_r>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d124      	bne.n	8007c2e <_malloc_r+0x92>
 8007be4:	230c      	movs	r3, #12
 8007be6:	6033      	str	r3, [r6, #0]
 8007be8:	4630      	mov	r0, r6
 8007bea:	f000 fb5c 	bl	80082a6 <__malloc_unlock>
 8007bee:	e7e4      	b.n	8007bba <_malloc_r+0x1e>
 8007bf0:	680b      	ldr	r3, [r1, #0]
 8007bf2:	1b5b      	subs	r3, r3, r5
 8007bf4:	d418      	bmi.n	8007c28 <_malloc_r+0x8c>
 8007bf6:	2b0b      	cmp	r3, #11
 8007bf8:	d90f      	bls.n	8007c1a <_malloc_r+0x7e>
 8007bfa:	600b      	str	r3, [r1, #0]
 8007bfc:	50cd      	str	r5, [r1, r3]
 8007bfe:	18cc      	adds	r4, r1, r3
 8007c00:	4630      	mov	r0, r6
 8007c02:	f000 fb50 	bl	80082a6 <__malloc_unlock>
 8007c06:	f104 000b 	add.w	r0, r4, #11
 8007c0a:	1d23      	adds	r3, r4, #4
 8007c0c:	f020 0007 	bic.w	r0, r0, #7
 8007c10:	1ac3      	subs	r3, r0, r3
 8007c12:	d0d3      	beq.n	8007bbc <_malloc_r+0x20>
 8007c14:	425a      	negs	r2, r3
 8007c16:	50e2      	str	r2, [r4, r3]
 8007c18:	e7d0      	b.n	8007bbc <_malloc_r+0x20>
 8007c1a:	428c      	cmp	r4, r1
 8007c1c:	684b      	ldr	r3, [r1, #4]
 8007c1e:	bf16      	itet	ne
 8007c20:	6063      	strne	r3, [r4, #4]
 8007c22:	6013      	streq	r3, [r2, #0]
 8007c24:	460c      	movne	r4, r1
 8007c26:	e7eb      	b.n	8007c00 <_malloc_r+0x64>
 8007c28:	460c      	mov	r4, r1
 8007c2a:	6849      	ldr	r1, [r1, #4]
 8007c2c:	e7cc      	b.n	8007bc8 <_malloc_r+0x2c>
 8007c2e:	1cc4      	adds	r4, r0, #3
 8007c30:	f024 0403 	bic.w	r4, r4, #3
 8007c34:	42a0      	cmp	r0, r4
 8007c36:	d005      	beq.n	8007c44 <_malloc_r+0xa8>
 8007c38:	1a21      	subs	r1, r4, r0
 8007c3a:	4630      	mov	r0, r6
 8007c3c:	f000 f884 	bl	8007d48 <_sbrk_r>
 8007c40:	3001      	adds	r0, #1
 8007c42:	d0cf      	beq.n	8007be4 <_malloc_r+0x48>
 8007c44:	6025      	str	r5, [r4, #0]
 8007c46:	e7db      	b.n	8007c00 <_malloc_r+0x64>
 8007c48:	20000468 	.word	0x20000468
 8007c4c:	2000046c 	.word	0x2000046c

08007c50 <iprintf>:
 8007c50:	b40f      	push	{r0, r1, r2, r3}
 8007c52:	4b0a      	ldr	r3, [pc, #40]	; (8007c7c <iprintf+0x2c>)
 8007c54:	b513      	push	{r0, r1, r4, lr}
 8007c56:	681c      	ldr	r4, [r3, #0]
 8007c58:	b124      	cbz	r4, 8007c64 <iprintf+0x14>
 8007c5a:	69a3      	ldr	r3, [r4, #24]
 8007c5c:	b913      	cbnz	r3, 8007c64 <iprintf+0x14>
 8007c5e:	4620      	mov	r0, r4
 8007c60:	f000 fa32 	bl	80080c8 <__sinit>
 8007c64:	ab05      	add	r3, sp, #20
 8007c66:	9a04      	ldr	r2, [sp, #16]
 8007c68:	68a1      	ldr	r1, [r4, #8]
 8007c6a:	9301      	str	r3, [sp, #4]
 8007c6c:	4620      	mov	r0, r4
 8007c6e:	f000 fb45 	bl	80082fc <_vfiprintf_r>
 8007c72:	b002      	add	sp, #8
 8007c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c78:	b004      	add	sp, #16
 8007c7a:	4770      	bx	lr
 8007c7c:	2000005c 	.word	0x2000005c

08007c80 <_puts_r>:
 8007c80:	b570      	push	{r4, r5, r6, lr}
 8007c82:	460e      	mov	r6, r1
 8007c84:	4605      	mov	r5, r0
 8007c86:	b118      	cbz	r0, 8007c90 <_puts_r+0x10>
 8007c88:	6983      	ldr	r3, [r0, #24]
 8007c8a:	b90b      	cbnz	r3, 8007c90 <_puts_r+0x10>
 8007c8c:	f000 fa1c 	bl	80080c8 <__sinit>
 8007c90:	69ab      	ldr	r3, [r5, #24]
 8007c92:	68ac      	ldr	r4, [r5, #8]
 8007c94:	b913      	cbnz	r3, 8007c9c <_puts_r+0x1c>
 8007c96:	4628      	mov	r0, r5
 8007c98:	f000 fa16 	bl	80080c8 <__sinit>
 8007c9c:	4b23      	ldr	r3, [pc, #140]	; (8007d2c <_puts_r+0xac>)
 8007c9e:	429c      	cmp	r4, r3
 8007ca0:	d117      	bne.n	8007cd2 <_puts_r+0x52>
 8007ca2:	686c      	ldr	r4, [r5, #4]
 8007ca4:	89a3      	ldrh	r3, [r4, #12]
 8007ca6:	071b      	lsls	r3, r3, #28
 8007ca8:	d51d      	bpl.n	8007ce6 <_puts_r+0x66>
 8007caa:	6923      	ldr	r3, [r4, #16]
 8007cac:	b1db      	cbz	r3, 8007ce6 <_puts_r+0x66>
 8007cae:	3e01      	subs	r6, #1
 8007cb0:	68a3      	ldr	r3, [r4, #8]
 8007cb2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	60a3      	str	r3, [r4, #8]
 8007cba:	b9e9      	cbnz	r1, 8007cf8 <_puts_r+0x78>
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	da2e      	bge.n	8007d1e <_puts_r+0x9e>
 8007cc0:	4622      	mov	r2, r4
 8007cc2:	210a      	movs	r1, #10
 8007cc4:	4628      	mov	r0, r5
 8007cc6:	f000 f84f 	bl	8007d68 <__swbuf_r>
 8007cca:	3001      	adds	r0, #1
 8007ccc:	d011      	beq.n	8007cf2 <_puts_r+0x72>
 8007cce:	200a      	movs	r0, #10
 8007cd0:	e011      	b.n	8007cf6 <_puts_r+0x76>
 8007cd2:	4b17      	ldr	r3, [pc, #92]	; (8007d30 <_puts_r+0xb0>)
 8007cd4:	429c      	cmp	r4, r3
 8007cd6:	d101      	bne.n	8007cdc <_puts_r+0x5c>
 8007cd8:	68ac      	ldr	r4, [r5, #8]
 8007cda:	e7e3      	b.n	8007ca4 <_puts_r+0x24>
 8007cdc:	4b15      	ldr	r3, [pc, #84]	; (8007d34 <_puts_r+0xb4>)
 8007cde:	429c      	cmp	r4, r3
 8007ce0:	bf08      	it	eq
 8007ce2:	68ec      	ldreq	r4, [r5, #12]
 8007ce4:	e7de      	b.n	8007ca4 <_puts_r+0x24>
 8007ce6:	4621      	mov	r1, r4
 8007ce8:	4628      	mov	r0, r5
 8007cea:	f000 f88f 	bl	8007e0c <__swsetup_r>
 8007cee:	2800      	cmp	r0, #0
 8007cf0:	d0dd      	beq.n	8007cae <_puts_r+0x2e>
 8007cf2:	f04f 30ff 	mov.w	r0, #4294967295
 8007cf6:	bd70      	pop	{r4, r5, r6, pc}
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	da04      	bge.n	8007d06 <_puts_r+0x86>
 8007cfc:	69a2      	ldr	r2, [r4, #24]
 8007cfe:	429a      	cmp	r2, r3
 8007d00:	dc06      	bgt.n	8007d10 <_puts_r+0x90>
 8007d02:	290a      	cmp	r1, #10
 8007d04:	d004      	beq.n	8007d10 <_puts_r+0x90>
 8007d06:	6823      	ldr	r3, [r4, #0]
 8007d08:	1c5a      	adds	r2, r3, #1
 8007d0a:	6022      	str	r2, [r4, #0]
 8007d0c:	7019      	strb	r1, [r3, #0]
 8007d0e:	e7cf      	b.n	8007cb0 <_puts_r+0x30>
 8007d10:	4622      	mov	r2, r4
 8007d12:	4628      	mov	r0, r5
 8007d14:	f000 f828 	bl	8007d68 <__swbuf_r>
 8007d18:	3001      	adds	r0, #1
 8007d1a:	d1c9      	bne.n	8007cb0 <_puts_r+0x30>
 8007d1c:	e7e9      	b.n	8007cf2 <_puts_r+0x72>
 8007d1e:	6823      	ldr	r3, [r4, #0]
 8007d20:	200a      	movs	r0, #10
 8007d22:	1c5a      	adds	r2, r3, #1
 8007d24:	6022      	str	r2, [r4, #0]
 8007d26:	7018      	strb	r0, [r3, #0]
 8007d28:	e7e5      	b.n	8007cf6 <_puts_r+0x76>
 8007d2a:	bf00      	nop
 8007d2c:	08009e24 	.word	0x08009e24
 8007d30:	08009e44 	.word	0x08009e44
 8007d34:	08009e04 	.word	0x08009e04

08007d38 <puts>:
 8007d38:	4b02      	ldr	r3, [pc, #8]	; (8007d44 <puts+0xc>)
 8007d3a:	4601      	mov	r1, r0
 8007d3c:	6818      	ldr	r0, [r3, #0]
 8007d3e:	f7ff bf9f 	b.w	8007c80 <_puts_r>
 8007d42:	bf00      	nop
 8007d44:	2000005c 	.word	0x2000005c

08007d48 <_sbrk_r>:
 8007d48:	b538      	push	{r3, r4, r5, lr}
 8007d4a:	4c06      	ldr	r4, [pc, #24]	; (8007d64 <_sbrk_r+0x1c>)
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	4605      	mov	r5, r0
 8007d50:	4608      	mov	r0, r1
 8007d52:	6023      	str	r3, [r4, #0]
 8007d54:	f7fa fd20 	bl	8002798 <_sbrk>
 8007d58:	1c43      	adds	r3, r0, #1
 8007d5a:	d102      	bne.n	8007d62 <_sbrk_r+0x1a>
 8007d5c:	6823      	ldr	r3, [r4, #0]
 8007d5e:	b103      	cbz	r3, 8007d62 <_sbrk_r+0x1a>
 8007d60:	602b      	str	r3, [r5, #0]
 8007d62:	bd38      	pop	{r3, r4, r5, pc}
 8007d64:	200025e4 	.word	0x200025e4

08007d68 <__swbuf_r>:
 8007d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d6a:	460e      	mov	r6, r1
 8007d6c:	4614      	mov	r4, r2
 8007d6e:	4605      	mov	r5, r0
 8007d70:	b118      	cbz	r0, 8007d7a <__swbuf_r+0x12>
 8007d72:	6983      	ldr	r3, [r0, #24]
 8007d74:	b90b      	cbnz	r3, 8007d7a <__swbuf_r+0x12>
 8007d76:	f000 f9a7 	bl	80080c8 <__sinit>
 8007d7a:	4b21      	ldr	r3, [pc, #132]	; (8007e00 <__swbuf_r+0x98>)
 8007d7c:	429c      	cmp	r4, r3
 8007d7e:	d12a      	bne.n	8007dd6 <__swbuf_r+0x6e>
 8007d80:	686c      	ldr	r4, [r5, #4]
 8007d82:	69a3      	ldr	r3, [r4, #24]
 8007d84:	60a3      	str	r3, [r4, #8]
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	071a      	lsls	r2, r3, #28
 8007d8a:	d52e      	bpl.n	8007dea <__swbuf_r+0x82>
 8007d8c:	6923      	ldr	r3, [r4, #16]
 8007d8e:	b363      	cbz	r3, 8007dea <__swbuf_r+0x82>
 8007d90:	6923      	ldr	r3, [r4, #16]
 8007d92:	6820      	ldr	r0, [r4, #0]
 8007d94:	1ac0      	subs	r0, r0, r3
 8007d96:	6963      	ldr	r3, [r4, #20]
 8007d98:	b2f6      	uxtb	r6, r6
 8007d9a:	4283      	cmp	r3, r0
 8007d9c:	4637      	mov	r7, r6
 8007d9e:	dc04      	bgt.n	8007daa <__swbuf_r+0x42>
 8007da0:	4621      	mov	r1, r4
 8007da2:	4628      	mov	r0, r5
 8007da4:	f000 f926 	bl	8007ff4 <_fflush_r>
 8007da8:	bb28      	cbnz	r0, 8007df6 <__swbuf_r+0x8e>
 8007daa:	68a3      	ldr	r3, [r4, #8]
 8007dac:	3b01      	subs	r3, #1
 8007dae:	60a3      	str	r3, [r4, #8]
 8007db0:	6823      	ldr	r3, [r4, #0]
 8007db2:	1c5a      	adds	r2, r3, #1
 8007db4:	6022      	str	r2, [r4, #0]
 8007db6:	701e      	strb	r6, [r3, #0]
 8007db8:	6963      	ldr	r3, [r4, #20]
 8007dba:	3001      	adds	r0, #1
 8007dbc:	4283      	cmp	r3, r0
 8007dbe:	d004      	beq.n	8007dca <__swbuf_r+0x62>
 8007dc0:	89a3      	ldrh	r3, [r4, #12]
 8007dc2:	07db      	lsls	r3, r3, #31
 8007dc4:	d519      	bpl.n	8007dfa <__swbuf_r+0x92>
 8007dc6:	2e0a      	cmp	r6, #10
 8007dc8:	d117      	bne.n	8007dfa <__swbuf_r+0x92>
 8007dca:	4621      	mov	r1, r4
 8007dcc:	4628      	mov	r0, r5
 8007dce:	f000 f911 	bl	8007ff4 <_fflush_r>
 8007dd2:	b190      	cbz	r0, 8007dfa <__swbuf_r+0x92>
 8007dd4:	e00f      	b.n	8007df6 <__swbuf_r+0x8e>
 8007dd6:	4b0b      	ldr	r3, [pc, #44]	; (8007e04 <__swbuf_r+0x9c>)
 8007dd8:	429c      	cmp	r4, r3
 8007dda:	d101      	bne.n	8007de0 <__swbuf_r+0x78>
 8007ddc:	68ac      	ldr	r4, [r5, #8]
 8007dde:	e7d0      	b.n	8007d82 <__swbuf_r+0x1a>
 8007de0:	4b09      	ldr	r3, [pc, #36]	; (8007e08 <__swbuf_r+0xa0>)
 8007de2:	429c      	cmp	r4, r3
 8007de4:	bf08      	it	eq
 8007de6:	68ec      	ldreq	r4, [r5, #12]
 8007de8:	e7cb      	b.n	8007d82 <__swbuf_r+0x1a>
 8007dea:	4621      	mov	r1, r4
 8007dec:	4628      	mov	r0, r5
 8007dee:	f000 f80d 	bl	8007e0c <__swsetup_r>
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d0cc      	beq.n	8007d90 <__swbuf_r+0x28>
 8007df6:	f04f 37ff 	mov.w	r7, #4294967295
 8007dfa:	4638      	mov	r0, r7
 8007dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007dfe:	bf00      	nop
 8007e00:	08009e24 	.word	0x08009e24
 8007e04:	08009e44 	.word	0x08009e44
 8007e08:	08009e04 	.word	0x08009e04

08007e0c <__swsetup_r>:
 8007e0c:	4b32      	ldr	r3, [pc, #200]	; (8007ed8 <__swsetup_r+0xcc>)
 8007e0e:	b570      	push	{r4, r5, r6, lr}
 8007e10:	681d      	ldr	r5, [r3, #0]
 8007e12:	4606      	mov	r6, r0
 8007e14:	460c      	mov	r4, r1
 8007e16:	b125      	cbz	r5, 8007e22 <__swsetup_r+0x16>
 8007e18:	69ab      	ldr	r3, [r5, #24]
 8007e1a:	b913      	cbnz	r3, 8007e22 <__swsetup_r+0x16>
 8007e1c:	4628      	mov	r0, r5
 8007e1e:	f000 f953 	bl	80080c8 <__sinit>
 8007e22:	4b2e      	ldr	r3, [pc, #184]	; (8007edc <__swsetup_r+0xd0>)
 8007e24:	429c      	cmp	r4, r3
 8007e26:	d10f      	bne.n	8007e48 <__swsetup_r+0x3c>
 8007e28:	686c      	ldr	r4, [r5, #4]
 8007e2a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e2e:	b29a      	uxth	r2, r3
 8007e30:	0715      	lsls	r5, r2, #28
 8007e32:	d42c      	bmi.n	8007e8e <__swsetup_r+0x82>
 8007e34:	06d0      	lsls	r0, r2, #27
 8007e36:	d411      	bmi.n	8007e5c <__swsetup_r+0x50>
 8007e38:	2209      	movs	r2, #9
 8007e3a:	6032      	str	r2, [r6, #0]
 8007e3c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007e40:	81a3      	strh	r3, [r4, #12]
 8007e42:	f04f 30ff 	mov.w	r0, #4294967295
 8007e46:	e03e      	b.n	8007ec6 <__swsetup_r+0xba>
 8007e48:	4b25      	ldr	r3, [pc, #148]	; (8007ee0 <__swsetup_r+0xd4>)
 8007e4a:	429c      	cmp	r4, r3
 8007e4c:	d101      	bne.n	8007e52 <__swsetup_r+0x46>
 8007e4e:	68ac      	ldr	r4, [r5, #8]
 8007e50:	e7eb      	b.n	8007e2a <__swsetup_r+0x1e>
 8007e52:	4b24      	ldr	r3, [pc, #144]	; (8007ee4 <__swsetup_r+0xd8>)
 8007e54:	429c      	cmp	r4, r3
 8007e56:	bf08      	it	eq
 8007e58:	68ec      	ldreq	r4, [r5, #12]
 8007e5a:	e7e6      	b.n	8007e2a <__swsetup_r+0x1e>
 8007e5c:	0751      	lsls	r1, r2, #29
 8007e5e:	d512      	bpl.n	8007e86 <__swsetup_r+0x7a>
 8007e60:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e62:	b141      	cbz	r1, 8007e76 <__swsetup_r+0x6a>
 8007e64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007e68:	4299      	cmp	r1, r3
 8007e6a:	d002      	beq.n	8007e72 <__swsetup_r+0x66>
 8007e6c:	4630      	mov	r0, r6
 8007e6e:	f7ff fe47 	bl	8007b00 <_free_r>
 8007e72:	2300      	movs	r3, #0
 8007e74:	6363      	str	r3, [r4, #52]	; 0x34
 8007e76:	89a3      	ldrh	r3, [r4, #12]
 8007e78:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007e7c:	81a3      	strh	r3, [r4, #12]
 8007e7e:	2300      	movs	r3, #0
 8007e80:	6063      	str	r3, [r4, #4]
 8007e82:	6923      	ldr	r3, [r4, #16]
 8007e84:	6023      	str	r3, [r4, #0]
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	f043 0308 	orr.w	r3, r3, #8
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	6923      	ldr	r3, [r4, #16]
 8007e90:	b94b      	cbnz	r3, 8007ea6 <__swsetup_r+0x9a>
 8007e92:	89a3      	ldrh	r3, [r4, #12]
 8007e94:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e9c:	d003      	beq.n	8007ea6 <__swsetup_r+0x9a>
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4630      	mov	r0, r6
 8007ea2:	f000 f9bf 	bl	8008224 <__smakebuf_r>
 8007ea6:	89a2      	ldrh	r2, [r4, #12]
 8007ea8:	f012 0301 	ands.w	r3, r2, #1
 8007eac:	d00c      	beq.n	8007ec8 <__swsetup_r+0xbc>
 8007eae:	2300      	movs	r3, #0
 8007eb0:	60a3      	str	r3, [r4, #8]
 8007eb2:	6963      	ldr	r3, [r4, #20]
 8007eb4:	425b      	negs	r3, r3
 8007eb6:	61a3      	str	r3, [r4, #24]
 8007eb8:	6923      	ldr	r3, [r4, #16]
 8007eba:	b953      	cbnz	r3, 8007ed2 <__swsetup_r+0xc6>
 8007ebc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ec0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007ec4:	d1ba      	bne.n	8007e3c <__swsetup_r+0x30>
 8007ec6:	bd70      	pop	{r4, r5, r6, pc}
 8007ec8:	0792      	lsls	r2, r2, #30
 8007eca:	bf58      	it	pl
 8007ecc:	6963      	ldrpl	r3, [r4, #20]
 8007ece:	60a3      	str	r3, [r4, #8]
 8007ed0:	e7f2      	b.n	8007eb8 <__swsetup_r+0xac>
 8007ed2:	2000      	movs	r0, #0
 8007ed4:	e7f7      	b.n	8007ec6 <__swsetup_r+0xba>
 8007ed6:	bf00      	nop
 8007ed8:	2000005c 	.word	0x2000005c
 8007edc:	08009e24 	.word	0x08009e24
 8007ee0:	08009e44 	.word	0x08009e44
 8007ee4:	08009e04 	.word	0x08009e04

08007ee8 <__sflush_r>:
 8007ee8:	898a      	ldrh	r2, [r1, #12]
 8007eea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007eee:	4605      	mov	r5, r0
 8007ef0:	0710      	lsls	r0, r2, #28
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	d458      	bmi.n	8007fa8 <__sflush_r+0xc0>
 8007ef6:	684b      	ldr	r3, [r1, #4]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	dc05      	bgt.n	8007f08 <__sflush_r+0x20>
 8007efc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	dc02      	bgt.n	8007f08 <__sflush_r+0x20>
 8007f02:	2000      	movs	r0, #0
 8007f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f08:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	d0f9      	beq.n	8007f02 <__sflush_r+0x1a>
 8007f0e:	2300      	movs	r3, #0
 8007f10:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007f14:	682f      	ldr	r7, [r5, #0]
 8007f16:	6a21      	ldr	r1, [r4, #32]
 8007f18:	602b      	str	r3, [r5, #0]
 8007f1a:	d032      	beq.n	8007f82 <__sflush_r+0x9a>
 8007f1c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007f1e:	89a3      	ldrh	r3, [r4, #12]
 8007f20:	075a      	lsls	r2, r3, #29
 8007f22:	d505      	bpl.n	8007f30 <__sflush_r+0x48>
 8007f24:	6863      	ldr	r3, [r4, #4]
 8007f26:	1ac0      	subs	r0, r0, r3
 8007f28:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007f2a:	b10b      	cbz	r3, 8007f30 <__sflush_r+0x48>
 8007f2c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007f2e:	1ac0      	subs	r0, r0, r3
 8007f30:	2300      	movs	r3, #0
 8007f32:	4602      	mov	r2, r0
 8007f34:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007f36:	6a21      	ldr	r1, [r4, #32]
 8007f38:	4628      	mov	r0, r5
 8007f3a:	47b0      	blx	r6
 8007f3c:	1c43      	adds	r3, r0, #1
 8007f3e:	89a3      	ldrh	r3, [r4, #12]
 8007f40:	d106      	bne.n	8007f50 <__sflush_r+0x68>
 8007f42:	6829      	ldr	r1, [r5, #0]
 8007f44:	291d      	cmp	r1, #29
 8007f46:	d848      	bhi.n	8007fda <__sflush_r+0xf2>
 8007f48:	4a29      	ldr	r2, [pc, #164]	; (8007ff0 <__sflush_r+0x108>)
 8007f4a:	40ca      	lsrs	r2, r1
 8007f4c:	07d6      	lsls	r6, r2, #31
 8007f4e:	d544      	bpl.n	8007fda <__sflush_r+0xf2>
 8007f50:	2200      	movs	r2, #0
 8007f52:	6062      	str	r2, [r4, #4]
 8007f54:	04d9      	lsls	r1, r3, #19
 8007f56:	6922      	ldr	r2, [r4, #16]
 8007f58:	6022      	str	r2, [r4, #0]
 8007f5a:	d504      	bpl.n	8007f66 <__sflush_r+0x7e>
 8007f5c:	1c42      	adds	r2, r0, #1
 8007f5e:	d101      	bne.n	8007f64 <__sflush_r+0x7c>
 8007f60:	682b      	ldr	r3, [r5, #0]
 8007f62:	b903      	cbnz	r3, 8007f66 <__sflush_r+0x7e>
 8007f64:	6560      	str	r0, [r4, #84]	; 0x54
 8007f66:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f68:	602f      	str	r7, [r5, #0]
 8007f6a:	2900      	cmp	r1, #0
 8007f6c:	d0c9      	beq.n	8007f02 <__sflush_r+0x1a>
 8007f6e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f72:	4299      	cmp	r1, r3
 8007f74:	d002      	beq.n	8007f7c <__sflush_r+0x94>
 8007f76:	4628      	mov	r0, r5
 8007f78:	f7ff fdc2 	bl	8007b00 <_free_r>
 8007f7c:	2000      	movs	r0, #0
 8007f7e:	6360      	str	r0, [r4, #52]	; 0x34
 8007f80:	e7c0      	b.n	8007f04 <__sflush_r+0x1c>
 8007f82:	2301      	movs	r3, #1
 8007f84:	4628      	mov	r0, r5
 8007f86:	47b0      	blx	r6
 8007f88:	1c41      	adds	r1, r0, #1
 8007f8a:	d1c8      	bne.n	8007f1e <__sflush_r+0x36>
 8007f8c:	682b      	ldr	r3, [r5, #0]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d0c5      	beq.n	8007f1e <__sflush_r+0x36>
 8007f92:	2b1d      	cmp	r3, #29
 8007f94:	d001      	beq.n	8007f9a <__sflush_r+0xb2>
 8007f96:	2b16      	cmp	r3, #22
 8007f98:	d101      	bne.n	8007f9e <__sflush_r+0xb6>
 8007f9a:	602f      	str	r7, [r5, #0]
 8007f9c:	e7b1      	b.n	8007f02 <__sflush_r+0x1a>
 8007f9e:	89a3      	ldrh	r3, [r4, #12]
 8007fa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fa4:	81a3      	strh	r3, [r4, #12]
 8007fa6:	e7ad      	b.n	8007f04 <__sflush_r+0x1c>
 8007fa8:	690f      	ldr	r7, [r1, #16]
 8007faa:	2f00      	cmp	r7, #0
 8007fac:	d0a9      	beq.n	8007f02 <__sflush_r+0x1a>
 8007fae:	0793      	lsls	r3, r2, #30
 8007fb0:	680e      	ldr	r6, [r1, #0]
 8007fb2:	bf08      	it	eq
 8007fb4:	694b      	ldreq	r3, [r1, #20]
 8007fb6:	600f      	str	r7, [r1, #0]
 8007fb8:	bf18      	it	ne
 8007fba:	2300      	movne	r3, #0
 8007fbc:	eba6 0807 	sub.w	r8, r6, r7
 8007fc0:	608b      	str	r3, [r1, #8]
 8007fc2:	f1b8 0f00 	cmp.w	r8, #0
 8007fc6:	dd9c      	ble.n	8007f02 <__sflush_r+0x1a>
 8007fc8:	4643      	mov	r3, r8
 8007fca:	463a      	mov	r2, r7
 8007fcc:	6a21      	ldr	r1, [r4, #32]
 8007fce:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007fd0:	4628      	mov	r0, r5
 8007fd2:	47b0      	blx	r6
 8007fd4:	2800      	cmp	r0, #0
 8007fd6:	dc06      	bgt.n	8007fe6 <__sflush_r+0xfe>
 8007fd8:	89a3      	ldrh	r3, [r4, #12]
 8007fda:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fde:	81a3      	strh	r3, [r4, #12]
 8007fe0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fe4:	e78e      	b.n	8007f04 <__sflush_r+0x1c>
 8007fe6:	4407      	add	r7, r0
 8007fe8:	eba8 0800 	sub.w	r8, r8, r0
 8007fec:	e7e9      	b.n	8007fc2 <__sflush_r+0xda>
 8007fee:	bf00      	nop
 8007ff0:	20400001 	.word	0x20400001

08007ff4 <_fflush_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	690b      	ldr	r3, [r1, #16]
 8007ff8:	4605      	mov	r5, r0
 8007ffa:	460c      	mov	r4, r1
 8007ffc:	b1db      	cbz	r3, 8008036 <_fflush_r+0x42>
 8007ffe:	b118      	cbz	r0, 8008008 <_fflush_r+0x14>
 8008000:	6983      	ldr	r3, [r0, #24]
 8008002:	b90b      	cbnz	r3, 8008008 <_fflush_r+0x14>
 8008004:	f000 f860 	bl	80080c8 <__sinit>
 8008008:	4b0c      	ldr	r3, [pc, #48]	; (800803c <_fflush_r+0x48>)
 800800a:	429c      	cmp	r4, r3
 800800c:	d109      	bne.n	8008022 <_fflush_r+0x2e>
 800800e:	686c      	ldr	r4, [r5, #4]
 8008010:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008014:	b17b      	cbz	r3, 8008036 <_fflush_r+0x42>
 8008016:	4621      	mov	r1, r4
 8008018:	4628      	mov	r0, r5
 800801a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800801e:	f7ff bf63 	b.w	8007ee8 <__sflush_r>
 8008022:	4b07      	ldr	r3, [pc, #28]	; (8008040 <_fflush_r+0x4c>)
 8008024:	429c      	cmp	r4, r3
 8008026:	d101      	bne.n	800802c <_fflush_r+0x38>
 8008028:	68ac      	ldr	r4, [r5, #8]
 800802a:	e7f1      	b.n	8008010 <_fflush_r+0x1c>
 800802c:	4b05      	ldr	r3, [pc, #20]	; (8008044 <_fflush_r+0x50>)
 800802e:	429c      	cmp	r4, r3
 8008030:	bf08      	it	eq
 8008032:	68ec      	ldreq	r4, [r5, #12]
 8008034:	e7ec      	b.n	8008010 <_fflush_r+0x1c>
 8008036:	2000      	movs	r0, #0
 8008038:	bd38      	pop	{r3, r4, r5, pc}
 800803a:	bf00      	nop
 800803c:	08009e24 	.word	0x08009e24
 8008040:	08009e44 	.word	0x08009e44
 8008044:	08009e04 	.word	0x08009e04

08008048 <std>:
 8008048:	2300      	movs	r3, #0
 800804a:	b510      	push	{r4, lr}
 800804c:	4604      	mov	r4, r0
 800804e:	e9c0 3300 	strd	r3, r3, [r0]
 8008052:	6083      	str	r3, [r0, #8]
 8008054:	8181      	strh	r1, [r0, #12]
 8008056:	6643      	str	r3, [r0, #100]	; 0x64
 8008058:	81c2      	strh	r2, [r0, #14]
 800805a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800805e:	6183      	str	r3, [r0, #24]
 8008060:	4619      	mov	r1, r3
 8008062:	2208      	movs	r2, #8
 8008064:	305c      	adds	r0, #92	; 0x5c
 8008066:	f7ff fd43 	bl	8007af0 <memset>
 800806a:	4b05      	ldr	r3, [pc, #20]	; (8008080 <std+0x38>)
 800806c:	6263      	str	r3, [r4, #36]	; 0x24
 800806e:	4b05      	ldr	r3, [pc, #20]	; (8008084 <std+0x3c>)
 8008070:	62a3      	str	r3, [r4, #40]	; 0x28
 8008072:	4b05      	ldr	r3, [pc, #20]	; (8008088 <std+0x40>)
 8008074:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008076:	4b05      	ldr	r3, [pc, #20]	; (800808c <std+0x44>)
 8008078:	6224      	str	r4, [r4, #32]
 800807a:	6323      	str	r3, [r4, #48]	; 0x30
 800807c:	bd10      	pop	{r4, pc}
 800807e:	bf00      	nop
 8008080:	08008839 	.word	0x08008839
 8008084:	0800885b 	.word	0x0800885b
 8008088:	08008893 	.word	0x08008893
 800808c:	080088b7 	.word	0x080088b7

08008090 <_cleanup_r>:
 8008090:	4901      	ldr	r1, [pc, #4]	; (8008098 <_cleanup_r+0x8>)
 8008092:	f000 b885 	b.w	80081a0 <_fwalk_reent>
 8008096:	bf00      	nop
 8008098:	08007ff5 	.word	0x08007ff5

0800809c <__sfmoreglue>:
 800809c:	b570      	push	{r4, r5, r6, lr}
 800809e:	1e4a      	subs	r2, r1, #1
 80080a0:	2568      	movs	r5, #104	; 0x68
 80080a2:	4355      	muls	r5, r2
 80080a4:	460e      	mov	r6, r1
 80080a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80080aa:	f7ff fd77 	bl	8007b9c <_malloc_r>
 80080ae:	4604      	mov	r4, r0
 80080b0:	b140      	cbz	r0, 80080c4 <__sfmoreglue+0x28>
 80080b2:	2100      	movs	r1, #0
 80080b4:	e9c0 1600 	strd	r1, r6, [r0]
 80080b8:	300c      	adds	r0, #12
 80080ba:	60a0      	str	r0, [r4, #8]
 80080bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80080c0:	f7ff fd16 	bl	8007af0 <memset>
 80080c4:	4620      	mov	r0, r4
 80080c6:	bd70      	pop	{r4, r5, r6, pc}

080080c8 <__sinit>:
 80080c8:	6983      	ldr	r3, [r0, #24]
 80080ca:	b510      	push	{r4, lr}
 80080cc:	4604      	mov	r4, r0
 80080ce:	bb33      	cbnz	r3, 800811e <__sinit+0x56>
 80080d0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80080d4:	6503      	str	r3, [r0, #80]	; 0x50
 80080d6:	4b12      	ldr	r3, [pc, #72]	; (8008120 <__sinit+0x58>)
 80080d8:	4a12      	ldr	r2, [pc, #72]	; (8008124 <__sinit+0x5c>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6282      	str	r2, [r0, #40]	; 0x28
 80080de:	4298      	cmp	r0, r3
 80080e0:	bf04      	itt	eq
 80080e2:	2301      	moveq	r3, #1
 80080e4:	6183      	streq	r3, [r0, #24]
 80080e6:	f000 f81f 	bl	8008128 <__sfp>
 80080ea:	6060      	str	r0, [r4, #4]
 80080ec:	4620      	mov	r0, r4
 80080ee:	f000 f81b 	bl	8008128 <__sfp>
 80080f2:	60a0      	str	r0, [r4, #8]
 80080f4:	4620      	mov	r0, r4
 80080f6:	f000 f817 	bl	8008128 <__sfp>
 80080fa:	2200      	movs	r2, #0
 80080fc:	60e0      	str	r0, [r4, #12]
 80080fe:	2104      	movs	r1, #4
 8008100:	6860      	ldr	r0, [r4, #4]
 8008102:	f7ff ffa1 	bl	8008048 <std>
 8008106:	2201      	movs	r2, #1
 8008108:	2109      	movs	r1, #9
 800810a:	68a0      	ldr	r0, [r4, #8]
 800810c:	f7ff ff9c 	bl	8008048 <std>
 8008110:	2202      	movs	r2, #2
 8008112:	2112      	movs	r1, #18
 8008114:	68e0      	ldr	r0, [r4, #12]
 8008116:	f7ff ff97 	bl	8008048 <std>
 800811a:	2301      	movs	r3, #1
 800811c:	61a3      	str	r3, [r4, #24]
 800811e:	bd10      	pop	{r4, pc}
 8008120:	08009e00 	.word	0x08009e00
 8008124:	08008091 	.word	0x08008091

08008128 <__sfp>:
 8008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812a:	4b1b      	ldr	r3, [pc, #108]	; (8008198 <__sfp+0x70>)
 800812c:	681e      	ldr	r6, [r3, #0]
 800812e:	69b3      	ldr	r3, [r6, #24]
 8008130:	4607      	mov	r7, r0
 8008132:	b913      	cbnz	r3, 800813a <__sfp+0x12>
 8008134:	4630      	mov	r0, r6
 8008136:	f7ff ffc7 	bl	80080c8 <__sinit>
 800813a:	3648      	adds	r6, #72	; 0x48
 800813c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008140:	3b01      	subs	r3, #1
 8008142:	d503      	bpl.n	800814c <__sfp+0x24>
 8008144:	6833      	ldr	r3, [r6, #0]
 8008146:	b133      	cbz	r3, 8008156 <__sfp+0x2e>
 8008148:	6836      	ldr	r6, [r6, #0]
 800814a:	e7f7      	b.n	800813c <__sfp+0x14>
 800814c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008150:	b16d      	cbz	r5, 800816e <__sfp+0x46>
 8008152:	3468      	adds	r4, #104	; 0x68
 8008154:	e7f4      	b.n	8008140 <__sfp+0x18>
 8008156:	2104      	movs	r1, #4
 8008158:	4638      	mov	r0, r7
 800815a:	f7ff ff9f 	bl	800809c <__sfmoreglue>
 800815e:	6030      	str	r0, [r6, #0]
 8008160:	2800      	cmp	r0, #0
 8008162:	d1f1      	bne.n	8008148 <__sfp+0x20>
 8008164:	230c      	movs	r3, #12
 8008166:	603b      	str	r3, [r7, #0]
 8008168:	4604      	mov	r4, r0
 800816a:	4620      	mov	r0, r4
 800816c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800816e:	4b0b      	ldr	r3, [pc, #44]	; (800819c <__sfp+0x74>)
 8008170:	6665      	str	r5, [r4, #100]	; 0x64
 8008172:	e9c4 5500 	strd	r5, r5, [r4]
 8008176:	60a5      	str	r5, [r4, #8]
 8008178:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800817c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008180:	2208      	movs	r2, #8
 8008182:	4629      	mov	r1, r5
 8008184:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008188:	f7ff fcb2 	bl	8007af0 <memset>
 800818c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008190:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008194:	e7e9      	b.n	800816a <__sfp+0x42>
 8008196:	bf00      	nop
 8008198:	08009e00 	.word	0x08009e00
 800819c:	ffff0001 	.word	0xffff0001

080081a0 <_fwalk_reent>:
 80081a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a4:	4680      	mov	r8, r0
 80081a6:	4689      	mov	r9, r1
 80081a8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80081ac:	2600      	movs	r6, #0
 80081ae:	b914      	cbnz	r4, 80081b6 <_fwalk_reent+0x16>
 80081b0:	4630      	mov	r0, r6
 80081b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081b6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80081ba:	3f01      	subs	r7, #1
 80081bc:	d501      	bpl.n	80081c2 <_fwalk_reent+0x22>
 80081be:	6824      	ldr	r4, [r4, #0]
 80081c0:	e7f5      	b.n	80081ae <_fwalk_reent+0xe>
 80081c2:	89ab      	ldrh	r3, [r5, #12]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d907      	bls.n	80081d8 <_fwalk_reent+0x38>
 80081c8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80081cc:	3301      	adds	r3, #1
 80081ce:	d003      	beq.n	80081d8 <_fwalk_reent+0x38>
 80081d0:	4629      	mov	r1, r5
 80081d2:	4640      	mov	r0, r8
 80081d4:	47c8      	blx	r9
 80081d6:	4306      	orrs	r6, r0
 80081d8:	3568      	adds	r5, #104	; 0x68
 80081da:	e7ee      	b.n	80081ba <_fwalk_reent+0x1a>

080081dc <__swhatbuf_r>:
 80081dc:	b570      	push	{r4, r5, r6, lr}
 80081de:	460e      	mov	r6, r1
 80081e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e4:	2900      	cmp	r1, #0
 80081e6:	b096      	sub	sp, #88	; 0x58
 80081e8:	4614      	mov	r4, r2
 80081ea:	461d      	mov	r5, r3
 80081ec:	da07      	bge.n	80081fe <__swhatbuf_r+0x22>
 80081ee:	2300      	movs	r3, #0
 80081f0:	602b      	str	r3, [r5, #0]
 80081f2:	89b3      	ldrh	r3, [r6, #12]
 80081f4:	061a      	lsls	r2, r3, #24
 80081f6:	d410      	bmi.n	800821a <__swhatbuf_r+0x3e>
 80081f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081fc:	e00e      	b.n	800821c <__swhatbuf_r+0x40>
 80081fe:	466a      	mov	r2, sp
 8008200:	f000 fb80 	bl	8008904 <_fstat_r>
 8008204:	2800      	cmp	r0, #0
 8008206:	dbf2      	blt.n	80081ee <__swhatbuf_r+0x12>
 8008208:	9a01      	ldr	r2, [sp, #4]
 800820a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800820e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008212:	425a      	negs	r2, r3
 8008214:	415a      	adcs	r2, r3
 8008216:	602a      	str	r2, [r5, #0]
 8008218:	e7ee      	b.n	80081f8 <__swhatbuf_r+0x1c>
 800821a:	2340      	movs	r3, #64	; 0x40
 800821c:	2000      	movs	r0, #0
 800821e:	6023      	str	r3, [r4, #0]
 8008220:	b016      	add	sp, #88	; 0x58
 8008222:	bd70      	pop	{r4, r5, r6, pc}

08008224 <__smakebuf_r>:
 8008224:	898b      	ldrh	r3, [r1, #12]
 8008226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008228:	079d      	lsls	r5, r3, #30
 800822a:	4606      	mov	r6, r0
 800822c:	460c      	mov	r4, r1
 800822e:	d507      	bpl.n	8008240 <__smakebuf_r+0x1c>
 8008230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	6123      	str	r3, [r4, #16]
 8008238:	2301      	movs	r3, #1
 800823a:	6163      	str	r3, [r4, #20]
 800823c:	b002      	add	sp, #8
 800823e:	bd70      	pop	{r4, r5, r6, pc}
 8008240:	ab01      	add	r3, sp, #4
 8008242:	466a      	mov	r2, sp
 8008244:	f7ff ffca 	bl	80081dc <__swhatbuf_r>
 8008248:	9900      	ldr	r1, [sp, #0]
 800824a:	4605      	mov	r5, r0
 800824c:	4630      	mov	r0, r6
 800824e:	f7ff fca5 	bl	8007b9c <_malloc_r>
 8008252:	b948      	cbnz	r0, 8008268 <__smakebuf_r+0x44>
 8008254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008258:	059a      	lsls	r2, r3, #22
 800825a:	d4ef      	bmi.n	800823c <__smakebuf_r+0x18>
 800825c:	f023 0303 	bic.w	r3, r3, #3
 8008260:	f043 0302 	orr.w	r3, r3, #2
 8008264:	81a3      	strh	r3, [r4, #12]
 8008266:	e7e3      	b.n	8008230 <__smakebuf_r+0xc>
 8008268:	4b0d      	ldr	r3, [pc, #52]	; (80082a0 <__smakebuf_r+0x7c>)
 800826a:	62b3      	str	r3, [r6, #40]	; 0x28
 800826c:	89a3      	ldrh	r3, [r4, #12]
 800826e:	6020      	str	r0, [r4, #0]
 8008270:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008274:	81a3      	strh	r3, [r4, #12]
 8008276:	9b00      	ldr	r3, [sp, #0]
 8008278:	6163      	str	r3, [r4, #20]
 800827a:	9b01      	ldr	r3, [sp, #4]
 800827c:	6120      	str	r0, [r4, #16]
 800827e:	b15b      	cbz	r3, 8008298 <__smakebuf_r+0x74>
 8008280:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008284:	4630      	mov	r0, r6
 8008286:	f000 fb4f 	bl	8008928 <_isatty_r>
 800828a:	b128      	cbz	r0, 8008298 <__smakebuf_r+0x74>
 800828c:	89a3      	ldrh	r3, [r4, #12]
 800828e:	f023 0303 	bic.w	r3, r3, #3
 8008292:	f043 0301 	orr.w	r3, r3, #1
 8008296:	81a3      	strh	r3, [r4, #12]
 8008298:	89a3      	ldrh	r3, [r4, #12]
 800829a:	431d      	orrs	r5, r3
 800829c:	81a5      	strh	r5, [r4, #12]
 800829e:	e7cd      	b.n	800823c <__smakebuf_r+0x18>
 80082a0:	08008091 	.word	0x08008091

080082a4 <__malloc_lock>:
 80082a4:	4770      	bx	lr

080082a6 <__malloc_unlock>:
 80082a6:	4770      	bx	lr

080082a8 <__sfputc_r>:
 80082a8:	6893      	ldr	r3, [r2, #8]
 80082aa:	3b01      	subs	r3, #1
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	b410      	push	{r4}
 80082b0:	6093      	str	r3, [r2, #8]
 80082b2:	da08      	bge.n	80082c6 <__sfputc_r+0x1e>
 80082b4:	6994      	ldr	r4, [r2, #24]
 80082b6:	42a3      	cmp	r3, r4
 80082b8:	db01      	blt.n	80082be <__sfputc_r+0x16>
 80082ba:	290a      	cmp	r1, #10
 80082bc:	d103      	bne.n	80082c6 <__sfputc_r+0x1e>
 80082be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082c2:	f7ff bd51 	b.w	8007d68 <__swbuf_r>
 80082c6:	6813      	ldr	r3, [r2, #0]
 80082c8:	1c58      	adds	r0, r3, #1
 80082ca:	6010      	str	r0, [r2, #0]
 80082cc:	7019      	strb	r1, [r3, #0]
 80082ce:	4608      	mov	r0, r1
 80082d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <__sfputs_r>:
 80082d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082d8:	4606      	mov	r6, r0
 80082da:	460f      	mov	r7, r1
 80082dc:	4614      	mov	r4, r2
 80082de:	18d5      	adds	r5, r2, r3
 80082e0:	42ac      	cmp	r4, r5
 80082e2:	d101      	bne.n	80082e8 <__sfputs_r+0x12>
 80082e4:	2000      	movs	r0, #0
 80082e6:	e007      	b.n	80082f8 <__sfputs_r+0x22>
 80082e8:	463a      	mov	r2, r7
 80082ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082ee:	4630      	mov	r0, r6
 80082f0:	f7ff ffda 	bl	80082a8 <__sfputc_r>
 80082f4:	1c43      	adds	r3, r0, #1
 80082f6:	d1f3      	bne.n	80082e0 <__sfputs_r+0xa>
 80082f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080082fc <_vfiprintf_r>:
 80082fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008300:	460c      	mov	r4, r1
 8008302:	b09d      	sub	sp, #116	; 0x74
 8008304:	4617      	mov	r7, r2
 8008306:	461d      	mov	r5, r3
 8008308:	4606      	mov	r6, r0
 800830a:	b118      	cbz	r0, 8008314 <_vfiprintf_r+0x18>
 800830c:	6983      	ldr	r3, [r0, #24]
 800830e:	b90b      	cbnz	r3, 8008314 <_vfiprintf_r+0x18>
 8008310:	f7ff feda 	bl	80080c8 <__sinit>
 8008314:	4b7c      	ldr	r3, [pc, #496]	; (8008508 <_vfiprintf_r+0x20c>)
 8008316:	429c      	cmp	r4, r3
 8008318:	d158      	bne.n	80083cc <_vfiprintf_r+0xd0>
 800831a:	6874      	ldr	r4, [r6, #4]
 800831c:	89a3      	ldrh	r3, [r4, #12]
 800831e:	0718      	lsls	r0, r3, #28
 8008320:	d55e      	bpl.n	80083e0 <_vfiprintf_r+0xe4>
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d05b      	beq.n	80083e0 <_vfiprintf_r+0xe4>
 8008328:	2300      	movs	r3, #0
 800832a:	9309      	str	r3, [sp, #36]	; 0x24
 800832c:	2320      	movs	r3, #32
 800832e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008332:	2330      	movs	r3, #48	; 0x30
 8008334:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008338:	9503      	str	r5, [sp, #12]
 800833a:	f04f 0b01 	mov.w	fp, #1
 800833e:	46b8      	mov	r8, r7
 8008340:	4645      	mov	r5, r8
 8008342:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008346:	b10b      	cbz	r3, 800834c <_vfiprintf_r+0x50>
 8008348:	2b25      	cmp	r3, #37	; 0x25
 800834a:	d154      	bne.n	80083f6 <_vfiprintf_r+0xfa>
 800834c:	ebb8 0a07 	subs.w	sl, r8, r7
 8008350:	d00b      	beq.n	800836a <_vfiprintf_r+0x6e>
 8008352:	4653      	mov	r3, sl
 8008354:	463a      	mov	r2, r7
 8008356:	4621      	mov	r1, r4
 8008358:	4630      	mov	r0, r6
 800835a:	f7ff ffbc 	bl	80082d6 <__sfputs_r>
 800835e:	3001      	adds	r0, #1
 8008360:	f000 80c2 	beq.w	80084e8 <_vfiprintf_r+0x1ec>
 8008364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008366:	4453      	add	r3, sl
 8008368:	9309      	str	r3, [sp, #36]	; 0x24
 800836a:	f898 3000 	ldrb.w	r3, [r8]
 800836e:	2b00      	cmp	r3, #0
 8008370:	f000 80ba 	beq.w	80084e8 <_vfiprintf_r+0x1ec>
 8008374:	2300      	movs	r3, #0
 8008376:	f04f 32ff 	mov.w	r2, #4294967295
 800837a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800837e:	9304      	str	r3, [sp, #16]
 8008380:	9307      	str	r3, [sp, #28]
 8008382:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008386:	931a      	str	r3, [sp, #104]	; 0x68
 8008388:	46a8      	mov	r8, r5
 800838a:	2205      	movs	r2, #5
 800838c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8008390:	485e      	ldr	r0, [pc, #376]	; (800850c <_vfiprintf_r+0x210>)
 8008392:	f7f7 ff1d 	bl	80001d0 <memchr>
 8008396:	9b04      	ldr	r3, [sp, #16]
 8008398:	bb78      	cbnz	r0, 80083fa <_vfiprintf_r+0xfe>
 800839a:	06d9      	lsls	r1, r3, #27
 800839c:	bf44      	itt	mi
 800839e:	2220      	movmi	r2, #32
 80083a0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083a4:	071a      	lsls	r2, r3, #28
 80083a6:	bf44      	itt	mi
 80083a8:	222b      	movmi	r2, #43	; 0x2b
 80083aa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80083ae:	782a      	ldrb	r2, [r5, #0]
 80083b0:	2a2a      	cmp	r2, #42	; 0x2a
 80083b2:	d02a      	beq.n	800840a <_vfiprintf_r+0x10e>
 80083b4:	9a07      	ldr	r2, [sp, #28]
 80083b6:	46a8      	mov	r8, r5
 80083b8:	2000      	movs	r0, #0
 80083ba:	250a      	movs	r5, #10
 80083bc:	4641      	mov	r1, r8
 80083be:	f811 3b01 	ldrb.w	r3, [r1], #1
 80083c2:	3b30      	subs	r3, #48	; 0x30
 80083c4:	2b09      	cmp	r3, #9
 80083c6:	d969      	bls.n	800849c <_vfiprintf_r+0x1a0>
 80083c8:	b360      	cbz	r0, 8008424 <_vfiprintf_r+0x128>
 80083ca:	e024      	b.n	8008416 <_vfiprintf_r+0x11a>
 80083cc:	4b50      	ldr	r3, [pc, #320]	; (8008510 <_vfiprintf_r+0x214>)
 80083ce:	429c      	cmp	r4, r3
 80083d0:	d101      	bne.n	80083d6 <_vfiprintf_r+0xda>
 80083d2:	68b4      	ldr	r4, [r6, #8]
 80083d4:	e7a2      	b.n	800831c <_vfiprintf_r+0x20>
 80083d6:	4b4f      	ldr	r3, [pc, #316]	; (8008514 <_vfiprintf_r+0x218>)
 80083d8:	429c      	cmp	r4, r3
 80083da:	bf08      	it	eq
 80083dc:	68f4      	ldreq	r4, [r6, #12]
 80083de:	e79d      	b.n	800831c <_vfiprintf_r+0x20>
 80083e0:	4621      	mov	r1, r4
 80083e2:	4630      	mov	r0, r6
 80083e4:	f7ff fd12 	bl	8007e0c <__swsetup_r>
 80083e8:	2800      	cmp	r0, #0
 80083ea:	d09d      	beq.n	8008328 <_vfiprintf_r+0x2c>
 80083ec:	f04f 30ff 	mov.w	r0, #4294967295
 80083f0:	b01d      	add	sp, #116	; 0x74
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	46a8      	mov	r8, r5
 80083f8:	e7a2      	b.n	8008340 <_vfiprintf_r+0x44>
 80083fa:	4a44      	ldr	r2, [pc, #272]	; (800850c <_vfiprintf_r+0x210>)
 80083fc:	1a80      	subs	r0, r0, r2
 80083fe:	fa0b f000 	lsl.w	r0, fp, r0
 8008402:	4318      	orrs	r0, r3
 8008404:	9004      	str	r0, [sp, #16]
 8008406:	4645      	mov	r5, r8
 8008408:	e7be      	b.n	8008388 <_vfiprintf_r+0x8c>
 800840a:	9a03      	ldr	r2, [sp, #12]
 800840c:	1d11      	adds	r1, r2, #4
 800840e:	6812      	ldr	r2, [r2, #0]
 8008410:	9103      	str	r1, [sp, #12]
 8008412:	2a00      	cmp	r2, #0
 8008414:	db01      	blt.n	800841a <_vfiprintf_r+0x11e>
 8008416:	9207      	str	r2, [sp, #28]
 8008418:	e004      	b.n	8008424 <_vfiprintf_r+0x128>
 800841a:	4252      	negs	r2, r2
 800841c:	f043 0302 	orr.w	r3, r3, #2
 8008420:	9207      	str	r2, [sp, #28]
 8008422:	9304      	str	r3, [sp, #16]
 8008424:	f898 3000 	ldrb.w	r3, [r8]
 8008428:	2b2e      	cmp	r3, #46	; 0x2e
 800842a:	d10e      	bne.n	800844a <_vfiprintf_r+0x14e>
 800842c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008430:	2b2a      	cmp	r3, #42	; 0x2a
 8008432:	d138      	bne.n	80084a6 <_vfiprintf_r+0x1aa>
 8008434:	9b03      	ldr	r3, [sp, #12]
 8008436:	1d1a      	adds	r2, r3, #4
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	9203      	str	r2, [sp, #12]
 800843c:	2b00      	cmp	r3, #0
 800843e:	bfb8      	it	lt
 8008440:	f04f 33ff 	movlt.w	r3, #4294967295
 8008444:	f108 0802 	add.w	r8, r8, #2
 8008448:	9305      	str	r3, [sp, #20]
 800844a:	4d33      	ldr	r5, [pc, #204]	; (8008518 <_vfiprintf_r+0x21c>)
 800844c:	f898 1000 	ldrb.w	r1, [r8]
 8008450:	2203      	movs	r2, #3
 8008452:	4628      	mov	r0, r5
 8008454:	f7f7 febc 	bl	80001d0 <memchr>
 8008458:	b140      	cbz	r0, 800846c <_vfiprintf_r+0x170>
 800845a:	2340      	movs	r3, #64	; 0x40
 800845c:	1b40      	subs	r0, r0, r5
 800845e:	fa03 f000 	lsl.w	r0, r3, r0
 8008462:	9b04      	ldr	r3, [sp, #16]
 8008464:	4303      	orrs	r3, r0
 8008466:	f108 0801 	add.w	r8, r8, #1
 800846a:	9304      	str	r3, [sp, #16]
 800846c:	f898 1000 	ldrb.w	r1, [r8]
 8008470:	482a      	ldr	r0, [pc, #168]	; (800851c <_vfiprintf_r+0x220>)
 8008472:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008476:	2206      	movs	r2, #6
 8008478:	f108 0701 	add.w	r7, r8, #1
 800847c:	f7f7 fea8 	bl	80001d0 <memchr>
 8008480:	2800      	cmp	r0, #0
 8008482:	d037      	beq.n	80084f4 <_vfiprintf_r+0x1f8>
 8008484:	4b26      	ldr	r3, [pc, #152]	; (8008520 <_vfiprintf_r+0x224>)
 8008486:	bb1b      	cbnz	r3, 80084d0 <_vfiprintf_r+0x1d4>
 8008488:	9b03      	ldr	r3, [sp, #12]
 800848a:	3307      	adds	r3, #7
 800848c:	f023 0307 	bic.w	r3, r3, #7
 8008490:	3308      	adds	r3, #8
 8008492:	9303      	str	r3, [sp, #12]
 8008494:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008496:	444b      	add	r3, r9
 8008498:	9309      	str	r3, [sp, #36]	; 0x24
 800849a:	e750      	b.n	800833e <_vfiprintf_r+0x42>
 800849c:	fb05 3202 	mla	r2, r5, r2, r3
 80084a0:	2001      	movs	r0, #1
 80084a2:	4688      	mov	r8, r1
 80084a4:	e78a      	b.n	80083bc <_vfiprintf_r+0xc0>
 80084a6:	2300      	movs	r3, #0
 80084a8:	f108 0801 	add.w	r8, r8, #1
 80084ac:	9305      	str	r3, [sp, #20]
 80084ae:	4619      	mov	r1, r3
 80084b0:	250a      	movs	r5, #10
 80084b2:	4640      	mov	r0, r8
 80084b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80084b8:	3a30      	subs	r2, #48	; 0x30
 80084ba:	2a09      	cmp	r2, #9
 80084bc:	d903      	bls.n	80084c6 <_vfiprintf_r+0x1ca>
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0c3      	beq.n	800844a <_vfiprintf_r+0x14e>
 80084c2:	9105      	str	r1, [sp, #20]
 80084c4:	e7c1      	b.n	800844a <_vfiprintf_r+0x14e>
 80084c6:	fb05 2101 	mla	r1, r5, r1, r2
 80084ca:	2301      	movs	r3, #1
 80084cc:	4680      	mov	r8, r0
 80084ce:	e7f0      	b.n	80084b2 <_vfiprintf_r+0x1b6>
 80084d0:	ab03      	add	r3, sp, #12
 80084d2:	9300      	str	r3, [sp, #0]
 80084d4:	4622      	mov	r2, r4
 80084d6:	4b13      	ldr	r3, [pc, #76]	; (8008524 <_vfiprintf_r+0x228>)
 80084d8:	a904      	add	r1, sp, #16
 80084da:	4630      	mov	r0, r6
 80084dc:	f3af 8000 	nop.w
 80084e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80084e4:	4681      	mov	r9, r0
 80084e6:	d1d5      	bne.n	8008494 <_vfiprintf_r+0x198>
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	065b      	lsls	r3, r3, #25
 80084ec:	f53f af7e 	bmi.w	80083ec <_vfiprintf_r+0xf0>
 80084f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80084f2:	e77d      	b.n	80083f0 <_vfiprintf_r+0xf4>
 80084f4:	ab03      	add	r3, sp, #12
 80084f6:	9300      	str	r3, [sp, #0]
 80084f8:	4622      	mov	r2, r4
 80084fa:	4b0a      	ldr	r3, [pc, #40]	; (8008524 <_vfiprintf_r+0x228>)
 80084fc:	a904      	add	r1, sp, #16
 80084fe:	4630      	mov	r0, r6
 8008500:	f000 f888 	bl	8008614 <_printf_i>
 8008504:	e7ec      	b.n	80084e0 <_vfiprintf_r+0x1e4>
 8008506:	bf00      	nop
 8008508:	08009e24 	.word	0x08009e24
 800850c:	08009e64 	.word	0x08009e64
 8008510:	08009e44 	.word	0x08009e44
 8008514:	08009e04 	.word	0x08009e04
 8008518:	08009e6a 	.word	0x08009e6a
 800851c:	08009e6e 	.word	0x08009e6e
 8008520:	00000000 	.word	0x00000000
 8008524:	080082d7 	.word	0x080082d7

08008528 <_printf_common>:
 8008528:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800852c:	4691      	mov	r9, r2
 800852e:	461f      	mov	r7, r3
 8008530:	688a      	ldr	r2, [r1, #8]
 8008532:	690b      	ldr	r3, [r1, #16]
 8008534:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008538:	4293      	cmp	r3, r2
 800853a:	bfb8      	it	lt
 800853c:	4613      	movlt	r3, r2
 800853e:	f8c9 3000 	str.w	r3, [r9]
 8008542:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008546:	4606      	mov	r6, r0
 8008548:	460c      	mov	r4, r1
 800854a:	b112      	cbz	r2, 8008552 <_printf_common+0x2a>
 800854c:	3301      	adds	r3, #1
 800854e:	f8c9 3000 	str.w	r3, [r9]
 8008552:	6823      	ldr	r3, [r4, #0]
 8008554:	0699      	lsls	r1, r3, #26
 8008556:	bf42      	ittt	mi
 8008558:	f8d9 3000 	ldrmi.w	r3, [r9]
 800855c:	3302      	addmi	r3, #2
 800855e:	f8c9 3000 	strmi.w	r3, [r9]
 8008562:	6825      	ldr	r5, [r4, #0]
 8008564:	f015 0506 	ands.w	r5, r5, #6
 8008568:	d107      	bne.n	800857a <_printf_common+0x52>
 800856a:	f104 0a19 	add.w	sl, r4, #25
 800856e:	68e3      	ldr	r3, [r4, #12]
 8008570:	f8d9 2000 	ldr.w	r2, [r9]
 8008574:	1a9b      	subs	r3, r3, r2
 8008576:	42ab      	cmp	r3, r5
 8008578:	dc28      	bgt.n	80085cc <_printf_common+0xa4>
 800857a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800857e:	6822      	ldr	r2, [r4, #0]
 8008580:	3300      	adds	r3, #0
 8008582:	bf18      	it	ne
 8008584:	2301      	movne	r3, #1
 8008586:	0692      	lsls	r2, r2, #26
 8008588:	d42d      	bmi.n	80085e6 <_printf_common+0xbe>
 800858a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800858e:	4639      	mov	r1, r7
 8008590:	4630      	mov	r0, r6
 8008592:	47c0      	blx	r8
 8008594:	3001      	adds	r0, #1
 8008596:	d020      	beq.n	80085da <_printf_common+0xb2>
 8008598:	6823      	ldr	r3, [r4, #0]
 800859a:	68e5      	ldr	r5, [r4, #12]
 800859c:	f8d9 2000 	ldr.w	r2, [r9]
 80085a0:	f003 0306 	and.w	r3, r3, #6
 80085a4:	2b04      	cmp	r3, #4
 80085a6:	bf08      	it	eq
 80085a8:	1aad      	subeq	r5, r5, r2
 80085aa:	68a3      	ldr	r3, [r4, #8]
 80085ac:	6922      	ldr	r2, [r4, #16]
 80085ae:	bf0c      	ite	eq
 80085b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80085b4:	2500      	movne	r5, #0
 80085b6:	4293      	cmp	r3, r2
 80085b8:	bfc4      	itt	gt
 80085ba:	1a9b      	subgt	r3, r3, r2
 80085bc:	18ed      	addgt	r5, r5, r3
 80085be:	f04f 0900 	mov.w	r9, #0
 80085c2:	341a      	adds	r4, #26
 80085c4:	454d      	cmp	r5, r9
 80085c6:	d11a      	bne.n	80085fe <_printf_common+0xd6>
 80085c8:	2000      	movs	r0, #0
 80085ca:	e008      	b.n	80085de <_printf_common+0xb6>
 80085cc:	2301      	movs	r3, #1
 80085ce:	4652      	mov	r2, sl
 80085d0:	4639      	mov	r1, r7
 80085d2:	4630      	mov	r0, r6
 80085d4:	47c0      	blx	r8
 80085d6:	3001      	adds	r0, #1
 80085d8:	d103      	bne.n	80085e2 <_printf_common+0xba>
 80085da:	f04f 30ff 	mov.w	r0, #4294967295
 80085de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e2:	3501      	adds	r5, #1
 80085e4:	e7c3      	b.n	800856e <_printf_common+0x46>
 80085e6:	18e1      	adds	r1, r4, r3
 80085e8:	1c5a      	adds	r2, r3, #1
 80085ea:	2030      	movs	r0, #48	; 0x30
 80085ec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80085f0:	4422      	add	r2, r4
 80085f2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80085f6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80085fa:	3302      	adds	r3, #2
 80085fc:	e7c5      	b.n	800858a <_printf_common+0x62>
 80085fe:	2301      	movs	r3, #1
 8008600:	4622      	mov	r2, r4
 8008602:	4639      	mov	r1, r7
 8008604:	4630      	mov	r0, r6
 8008606:	47c0      	blx	r8
 8008608:	3001      	adds	r0, #1
 800860a:	d0e6      	beq.n	80085da <_printf_common+0xb2>
 800860c:	f109 0901 	add.w	r9, r9, #1
 8008610:	e7d8      	b.n	80085c4 <_printf_common+0x9c>
	...

08008614 <_printf_i>:
 8008614:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008618:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800861c:	460c      	mov	r4, r1
 800861e:	7e09      	ldrb	r1, [r1, #24]
 8008620:	b085      	sub	sp, #20
 8008622:	296e      	cmp	r1, #110	; 0x6e
 8008624:	4617      	mov	r7, r2
 8008626:	4606      	mov	r6, r0
 8008628:	4698      	mov	r8, r3
 800862a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800862c:	f000 80b3 	beq.w	8008796 <_printf_i+0x182>
 8008630:	d822      	bhi.n	8008678 <_printf_i+0x64>
 8008632:	2963      	cmp	r1, #99	; 0x63
 8008634:	d036      	beq.n	80086a4 <_printf_i+0x90>
 8008636:	d80a      	bhi.n	800864e <_printf_i+0x3a>
 8008638:	2900      	cmp	r1, #0
 800863a:	f000 80b9 	beq.w	80087b0 <_printf_i+0x19c>
 800863e:	2958      	cmp	r1, #88	; 0x58
 8008640:	f000 8083 	beq.w	800874a <_printf_i+0x136>
 8008644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008648:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800864c:	e032      	b.n	80086b4 <_printf_i+0xa0>
 800864e:	2964      	cmp	r1, #100	; 0x64
 8008650:	d001      	beq.n	8008656 <_printf_i+0x42>
 8008652:	2969      	cmp	r1, #105	; 0x69
 8008654:	d1f6      	bne.n	8008644 <_printf_i+0x30>
 8008656:	6820      	ldr	r0, [r4, #0]
 8008658:	6813      	ldr	r3, [r2, #0]
 800865a:	0605      	lsls	r5, r0, #24
 800865c:	f103 0104 	add.w	r1, r3, #4
 8008660:	d52a      	bpl.n	80086b8 <_printf_i+0xa4>
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	6011      	str	r1, [r2, #0]
 8008666:	2b00      	cmp	r3, #0
 8008668:	da03      	bge.n	8008672 <_printf_i+0x5e>
 800866a:	222d      	movs	r2, #45	; 0x2d
 800866c:	425b      	negs	r3, r3
 800866e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8008672:	486f      	ldr	r0, [pc, #444]	; (8008830 <_printf_i+0x21c>)
 8008674:	220a      	movs	r2, #10
 8008676:	e039      	b.n	80086ec <_printf_i+0xd8>
 8008678:	2973      	cmp	r1, #115	; 0x73
 800867a:	f000 809d 	beq.w	80087b8 <_printf_i+0x1a4>
 800867e:	d808      	bhi.n	8008692 <_printf_i+0x7e>
 8008680:	296f      	cmp	r1, #111	; 0x6f
 8008682:	d020      	beq.n	80086c6 <_printf_i+0xb2>
 8008684:	2970      	cmp	r1, #112	; 0x70
 8008686:	d1dd      	bne.n	8008644 <_printf_i+0x30>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	f043 0320 	orr.w	r3, r3, #32
 800868e:	6023      	str	r3, [r4, #0]
 8008690:	e003      	b.n	800869a <_printf_i+0x86>
 8008692:	2975      	cmp	r1, #117	; 0x75
 8008694:	d017      	beq.n	80086c6 <_printf_i+0xb2>
 8008696:	2978      	cmp	r1, #120	; 0x78
 8008698:	d1d4      	bne.n	8008644 <_printf_i+0x30>
 800869a:	2378      	movs	r3, #120	; 0x78
 800869c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80086a0:	4864      	ldr	r0, [pc, #400]	; (8008834 <_printf_i+0x220>)
 80086a2:	e055      	b.n	8008750 <_printf_i+0x13c>
 80086a4:	6813      	ldr	r3, [r2, #0]
 80086a6:	1d19      	adds	r1, r3, #4
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	6011      	str	r1, [r2, #0]
 80086ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80086b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80086b4:	2301      	movs	r3, #1
 80086b6:	e08c      	b.n	80087d2 <_printf_i+0x1be>
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6011      	str	r1, [r2, #0]
 80086bc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80086c0:	bf18      	it	ne
 80086c2:	b21b      	sxthne	r3, r3
 80086c4:	e7cf      	b.n	8008666 <_printf_i+0x52>
 80086c6:	6813      	ldr	r3, [r2, #0]
 80086c8:	6825      	ldr	r5, [r4, #0]
 80086ca:	1d18      	adds	r0, r3, #4
 80086cc:	6010      	str	r0, [r2, #0]
 80086ce:	0628      	lsls	r0, r5, #24
 80086d0:	d501      	bpl.n	80086d6 <_printf_i+0xc2>
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	e002      	b.n	80086dc <_printf_i+0xc8>
 80086d6:	0668      	lsls	r0, r5, #25
 80086d8:	d5fb      	bpl.n	80086d2 <_printf_i+0xbe>
 80086da:	881b      	ldrh	r3, [r3, #0]
 80086dc:	4854      	ldr	r0, [pc, #336]	; (8008830 <_printf_i+0x21c>)
 80086de:	296f      	cmp	r1, #111	; 0x6f
 80086e0:	bf14      	ite	ne
 80086e2:	220a      	movne	r2, #10
 80086e4:	2208      	moveq	r2, #8
 80086e6:	2100      	movs	r1, #0
 80086e8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80086ec:	6865      	ldr	r5, [r4, #4]
 80086ee:	60a5      	str	r5, [r4, #8]
 80086f0:	2d00      	cmp	r5, #0
 80086f2:	f2c0 8095 	blt.w	8008820 <_printf_i+0x20c>
 80086f6:	6821      	ldr	r1, [r4, #0]
 80086f8:	f021 0104 	bic.w	r1, r1, #4
 80086fc:	6021      	str	r1, [r4, #0]
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d13d      	bne.n	800877e <_printf_i+0x16a>
 8008702:	2d00      	cmp	r5, #0
 8008704:	f040 808e 	bne.w	8008824 <_printf_i+0x210>
 8008708:	4665      	mov	r5, ip
 800870a:	2a08      	cmp	r2, #8
 800870c:	d10b      	bne.n	8008726 <_printf_i+0x112>
 800870e:	6823      	ldr	r3, [r4, #0]
 8008710:	07db      	lsls	r3, r3, #31
 8008712:	d508      	bpl.n	8008726 <_printf_i+0x112>
 8008714:	6923      	ldr	r3, [r4, #16]
 8008716:	6862      	ldr	r2, [r4, #4]
 8008718:	429a      	cmp	r2, r3
 800871a:	bfde      	ittt	le
 800871c:	2330      	movle	r3, #48	; 0x30
 800871e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008722:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008726:	ebac 0305 	sub.w	r3, ip, r5
 800872a:	6123      	str	r3, [r4, #16]
 800872c:	f8cd 8000 	str.w	r8, [sp]
 8008730:	463b      	mov	r3, r7
 8008732:	aa03      	add	r2, sp, #12
 8008734:	4621      	mov	r1, r4
 8008736:	4630      	mov	r0, r6
 8008738:	f7ff fef6 	bl	8008528 <_printf_common>
 800873c:	3001      	adds	r0, #1
 800873e:	d14d      	bne.n	80087dc <_printf_i+0x1c8>
 8008740:	f04f 30ff 	mov.w	r0, #4294967295
 8008744:	b005      	add	sp, #20
 8008746:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800874a:	4839      	ldr	r0, [pc, #228]	; (8008830 <_printf_i+0x21c>)
 800874c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8008750:	6813      	ldr	r3, [r2, #0]
 8008752:	6821      	ldr	r1, [r4, #0]
 8008754:	1d1d      	adds	r5, r3, #4
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	6015      	str	r5, [r2, #0]
 800875a:	060a      	lsls	r2, r1, #24
 800875c:	d50b      	bpl.n	8008776 <_printf_i+0x162>
 800875e:	07ca      	lsls	r2, r1, #31
 8008760:	bf44      	itt	mi
 8008762:	f041 0120 	orrmi.w	r1, r1, #32
 8008766:	6021      	strmi	r1, [r4, #0]
 8008768:	b91b      	cbnz	r3, 8008772 <_printf_i+0x15e>
 800876a:	6822      	ldr	r2, [r4, #0]
 800876c:	f022 0220 	bic.w	r2, r2, #32
 8008770:	6022      	str	r2, [r4, #0]
 8008772:	2210      	movs	r2, #16
 8008774:	e7b7      	b.n	80086e6 <_printf_i+0xd2>
 8008776:	064d      	lsls	r5, r1, #25
 8008778:	bf48      	it	mi
 800877a:	b29b      	uxthmi	r3, r3
 800877c:	e7ef      	b.n	800875e <_printf_i+0x14a>
 800877e:	4665      	mov	r5, ip
 8008780:	fbb3 f1f2 	udiv	r1, r3, r2
 8008784:	fb02 3311 	mls	r3, r2, r1, r3
 8008788:	5cc3      	ldrb	r3, [r0, r3]
 800878a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800878e:	460b      	mov	r3, r1
 8008790:	2900      	cmp	r1, #0
 8008792:	d1f5      	bne.n	8008780 <_printf_i+0x16c>
 8008794:	e7b9      	b.n	800870a <_printf_i+0xf6>
 8008796:	6813      	ldr	r3, [r2, #0]
 8008798:	6825      	ldr	r5, [r4, #0]
 800879a:	6961      	ldr	r1, [r4, #20]
 800879c:	1d18      	adds	r0, r3, #4
 800879e:	6010      	str	r0, [r2, #0]
 80087a0:	0628      	lsls	r0, r5, #24
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	d501      	bpl.n	80087aa <_printf_i+0x196>
 80087a6:	6019      	str	r1, [r3, #0]
 80087a8:	e002      	b.n	80087b0 <_printf_i+0x19c>
 80087aa:	066a      	lsls	r2, r5, #25
 80087ac:	d5fb      	bpl.n	80087a6 <_printf_i+0x192>
 80087ae:	8019      	strh	r1, [r3, #0]
 80087b0:	2300      	movs	r3, #0
 80087b2:	6123      	str	r3, [r4, #16]
 80087b4:	4665      	mov	r5, ip
 80087b6:	e7b9      	b.n	800872c <_printf_i+0x118>
 80087b8:	6813      	ldr	r3, [r2, #0]
 80087ba:	1d19      	adds	r1, r3, #4
 80087bc:	6011      	str	r1, [r2, #0]
 80087be:	681d      	ldr	r5, [r3, #0]
 80087c0:	6862      	ldr	r2, [r4, #4]
 80087c2:	2100      	movs	r1, #0
 80087c4:	4628      	mov	r0, r5
 80087c6:	f7f7 fd03 	bl	80001d0 <memchr>
 80087ca:	b108      	cbz	r0, 80087d0 <_printf_i+0x1bc>
 80087cc:	1b40      	subs	r0, r0, r5
 80087ce:	6060      	str	r0, [r4, #4]
 80087d0:	6863      	ldr	r3, [r4, #4]
 80087d2:	6123      	str	r3, [r4, #16]
 80087d4:	2300      	movs	r3, #0
 80087d6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80087da:	e7a7      	b.n	800872c <_printf_i+0x118>
 80087dc:	6923      	ldr	r3, [r4, #16]
 80087de:	462a      	mov	r2, r5
 80087e0:	4639      	mov	r1, r7
 80087e2:	4630      	mov	r0, r6
 80087e4:	47c0      	blx	r8
 80087e6:	3001      	adds	r0, #1
 80087e8:	d0aa      	beq.n	8008740 <_printf_i+0x12c>
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	079b      	lsls	r3, r3, #30
 80087ee:	d413      	bmi.n	8008818 <_printf_i+0x204>
 80087f0:	68e0      	ldr	r0, [r4, #12]
 80087f2:	9b03      	ldr	r3, [sp, #12]
 80087f4:	4298      	cmp	r0, r3
 80087f6:	bfb8      	it	lt
 80087f8:	4618      	movlt	r0, r3
 80087fa:	e7a3      	b.n	8008744 <_printf_i+0x130>
 80087fc:	2301      	movs	r3, #1
 80087fe:	464a      	mov	r2, r9
 8008800:	4639      	mov	r1, r7
 8008802:	4630      	mov	r0, r6
 8008804:	47c0      	blx	r8
 8008806:	3001      	adds	r0, #1
 8008808:	d09a      	beq.n	8008740 <_printf_i+0x12c>
 800880a:	3501      	adds	r5, #1
 800880c:	68e3      	ldr	r3, [r4, #12]
 800880e:	9a03      	ldr	r2, [sp, #12]
 8008810:	1a9b      	subs	r3, r3, r2
 8008812:	42ab      	cmp	r3, r5
 8008814:	dcf2      	bgt.n	80087fc <_printf_i+0x1e8>
 8008816:	e7eb      	b.n	80087f0 <_printf_i+0x1dc>
 8008818:	2500      	movs	r5, #0
 800881a:	f104 0919 	add.w	r9, r4, #25
 800881e:	e7f5      	b.n	800880c <_printf_i+0x1f8>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d1ac      	bne.n	800877e <_printf_i+0x16a>
 8008824:	7803      	ldrb	r3, [r0, #0]
 8008826:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800882a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800882e:	e76c      	b.n	800870a <_printf_i+0xf6>
 8008830:	08009e75 	.word	0x08009e75
 8008834:	08009e86 	.word	0x08009e86

08008838 <__sread>:
 8008838:	b510      	push	{r4, lr}
 800883a:	460c      	mov	r4, r1
 800883c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008840:	f000 f894 	bl	800896c <_read_r>
 8008844:	2800      	cmp	r0, #0
 8008846:	bfab      	itete	ge
 8008848:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800884a:	89a3      	ldrhlt	r3, [r4, #12]
 800884c:	181b      	addge	r3, r3, r0
 800884e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008852:	bfac      	ite	ge
 8008854:	6563      	strge	r3, [r4, #84]	; 0x54
 8008856:	81a3      	strhlt	r3, [r4, #12]
 8008858:	bd10      	pop	{r4, pc}

0800885a <__swrite>:
 800885a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800885e:	461f      	mov	r7, r3
 8008860:	898b      	ldrh	r3, [r1, #12]
 8008862:	05db      	lsls	r3, r3, #23
 8008864:	4605      	mov	r5, r0
 8008866:	460c      	mov	r4, r1
 8008868:	4616      	mov	r6, r2
 800886a:	d505      	bpl.n	8008878 <__swrite+0x1e>
 800886c:	2302      	movs	r3, #2
 800886e:	2200      	movs	r2, #0
 8008870:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008874:	f000 f868 	bl	8008948 <_lseek_r>
 8008878:	89a3      	ldrh	r3, [r4, #12]
 800887a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800887e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008882:	81a3      	strh	r3, [r4, #12]
 8008884:	4632      	mov	r2, r6
 8008886:	463b      	mov	r3, r7
 8008888:	4628      	mov	r0, r5
 800888a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800888e:	f000 b817 	b.w	80088c0 <_write_r>

08008892 <__sseek>:
 8008892:	b510      	push	{r4, lr}
 8008894:	460c      	mov	r4, r1
 8008896:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800889a:	f000 f855 	bl	8008948 <_lseek_r>
 800889e:	1c43      	adds	r3, r0, #1
 80088a0:	89a3      	ldrh	r3, [r4, #12]
 80088a2:	bf15      	itete	ne
 80088a4:	6560      	strne	r0, [r4, #84]	; 0x54
 80088a6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80088aa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80088ae:	81a3      	strheq	r3, [r4, #12]
 80088b0:	bf18      	it	ne
 80088b2:	81a3      	strhne	r3, [r4, #12]
 80088b4:	bd10      	pop	{r4, pc}

080088b6 <__sclose>:
 80088b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80088ba:	f000 b813 	b.w	80088e4 <_close_r>
	...

080088c0 <_write_r>:
 80088c0:	b538      	push	{r3, r4, r5, lr}
 80088c2:	4c07      	ldr	r4, [pc, #28]	; (80088e0 <_write_r+0x20>)
 80088c4:	4605      	mov	r5, r0
 80088c6:	4608      	mov	r0, r1
 80088c8:	4611      	mov	r1, r2
 80088ca:	2200      	movs	r2, #0
 80088cc:	6022      	str	r2, [r4, #0]
 80088ce:	461a      	mov	r2, r3
 80088d0:	f7f9 ff12 	bl	80026f8 <_write>
 80088d4:	1c43      	adds	r3, r0, #1
 80088d6:	d102      	bne.n	80088de <_write_r+0x1e>
 80088d8:	6823      	ldr	r3, [r4, #0]
 80088da:	b103      	cbz	r3, 80088de <_write_r+0x1e>
 80088dc:	602b      	str	r3, [r5, #0]
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	200025e4 	.word	0x200025e4

080088e4 <_close_r>:
 80088e4:	b538      	push	{r3, r4, r5, lr}
 80088e6:	4c06      	ldr	r4, [pc, #24]	; (8008900 <_close_r+0x1c>)
 80088e8:	2300      	movs	r3, #0
 80088ea:	4605      	mov	r5, r0
 80088ec:	4608      	mov	r0, r1
 80088ee:	6023      	str	r3, [r4, #0]
 80088f0:	f7f9 ff1e 	bl	8002730 <_close>
 80088f4:	1c43      	adds	r3, r0, #1
 80088f6:	d102      	bne.n	80088fe <_close_r+0x1a>
 80088f8:	6823      	ldr	r3, [r4, #0]
 80088fa:	b103      	cbz	r3, 80088fe <_close_r+0x1a>
 80088fc:	602b      	str	r3, [r5, #0]
 80088fe:	bd38      	pop	{r3, r4, r5, pc}
 8008900:	200025e4 	.word	0x200025e4

08008904 <_fstat_r>:
 8008904:	b538      	push	{r3, r4, r5, lr}
 8008906:	4c07      	ldr	r4, [pc, #28]	; (8008924 <_fstat_r+0x20>)
 8008908:	2300      	movs	r3, #0
 800890a:	4605      	mov	r5, r0
 800890c:	4608      	mov	r0, r1
 800890e:	4611      	mov	r1, r2
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	f7f9 ff19 	bl	8002748 <_fstat>
 8008916:	1c43      	adds	r3, r0, #1
 8008918:	d102      	bne.n	8008920 <_fstat_r+0x1c>
 800891a:	6823      	ldr	r3, [r4, #0]
 800891c:	b103      	cbz	r3, 8008920 <_fstat_r+0x1c>
 800891e:	602b      	str	r3, [r5, #0]
 8008920:	bd38      	pop	{r3, r4, r5, pc}
 8008922:	bf00      	nop
 8008924:	200025e4 	.word	0x200025e4

08008928 <_isatty_r>:
 8008928:	b538      	push	{r3, r4, r5, lr}
 800892a:	4c06      	ldr	r4, [pc, #24]	; (8008944 <_isatty_r+0x1c>)
 800892c:	2300      	movs	r3, #0
 800892e:	4605      	mov	r5, r0
 8008930:	4608      	mov	r0, r1
 8008932:	6023      	str	r3, [r4, #0]
 8008934:	f7f9 ff18 	bl	8002768 <_isatty>
 8008938:	1c43      	adds	r3, r0, #1
 800893a:	d102      	bne.n	8008942 <_isatty_r+0x1a>
 800893c:	6823      	ldr	r3, [r4, #0]
 800893e:	b103      	cbz	r3, 8008942 <_isatty_r+0x1a>
 8008940:	602b      	str	r3, [r5, #0]
 8008942:	bd38      	pop	{r3, r4, r5, pc}
 8008944:	200025e4 	.word	0x200025e4

08008948 <_lseek_r>:
 8008948:	b538      	push	{r3, r4, r5, lr}
 800894a:	4c07      	ldr	r4, [pc, #28]	; (8008968 <_lseek_r+0x20>)
 800894c:	4605      	mov	r5, r0
 800894e:	4608      	mov	r0, r1
 8008950:	4611      	mov	r1, r2
 8008952:	2200      	movs	r2, #0
 8008954:	6022      	str	r2, [r4, #0]
 8008956:	461a      	mov	r2, r3
 8008958:	f7f9 ff11 	bl	800277e <_lseek>
 800895c:	1c43      	adds	r3, r0, #1
 800895e:	d102      	bne.n	8008966 <_lseek_r+0x1e>
 8008960:	6823      	ldr	r3, [r4, #0]
 8008962:	b103      	cbz	r3, 8008966 <_lseek_r+0x1e>
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	bd38      	pop	{r3, r4, r5, pc}
 8008968:	200025e4 	.word	0x200025e4

0800896c <_read_r>:
 800896c:	b538      	push	{r3, r4, r5, lr}
 800896e:	4c07      	ldr	r4, [pc, #28]	; (800898c <_read_r+0x20>)
 8008970:	4605      	mov	r5, r0
 8008972:	4608      	mov	r0, r1
 8008974:	4611      	mov	r1, r2
 8008976:	2200      	movs	r2, #0
 8008978:	6022      	str	r2, [r4, #0]
 800897a:	461a      	mov	r2, r3
 800897c:	f7f9 fe9f 	bl	80026be <_read>
 8008980:	1c43      	adds	r3, r0, #1
 8008982:	d102      	bne.n	800898a <_read_r+0x1e>
 8008984:	6823      	ldr	r3, [r4, #0]
 8008986:	b103      	cbz	r3, 800898a <_read_r+0x1e>
 8008988:	602b      	str	r3, [r5, #0]
 800898a:	bd38      	pop	{r3, r4, r5, pc}
 800898c:	200025e4 	.word	0x200025e4

08008990 <cos>:
 8008990:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008992:	ec51 0b10 	vmov	r0, r1, d0
 8008996:	4a1e      	ldr	r2, [pc, #120]	; (8008a10 <cos+0x80>)
 8008998:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800899c:	4293      	cmp	r3, r2
 800899e:	dc06      	bgt.n	80089ae <cos+0x1e>
 80089a0:	ed9f 1b19 	vldr	d1, [pc, #100]	; 8008a08 <cos+0x78>
 80089a4:	f000 fa74 	bl	8008e90 <__kernel_cos>
 80089a8:	ec51 0b10 	vmov	r0, r1, d0
 80089ac:	e007      	b.n	80089be <cos+0x2e>
 80089ae:	4a19      	ldr	r2, [pc, #100]	; (8008a14 <cos+0x84>)
 80089b0:	4293      	cmp	r3, r2
 80089b2:	dd09      	ble.n	80089c8 <cos+0x38>
 80089b4:	ee10 2a10 	vmov	r2, s0
 80089b8:	460b      	mov	r3, r1
 80089ba:	f7f7 fc5d 	bl	8000278 <__aeabi_dsub>
 80089be:	ec41 0b10 	vmov	d0, r0, r1
 80089c2:	b005      	add	sp, #20
 80089c4:	f85d fb04 	ldr.w	pc, [sp], #4
 80089c8:	4668      	mov	r0, sp
 80089ca:	f000 f86d 	bl	8008aa8 <__ieee754_rem_pio2>
 80089ce:	f000 0003 	and.w	r0, r0, #3
 80089d2:	2801      	cmp	r0, #1
 80089d4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80089d8:	ed9d 0b00 	vldr	d0, [sp]
 80089dc:	d007      	beq.n	80089ee <cos+0x5e>
 80089de:	2802      	cmp	r0, #2
 80089e0:	d00e      	beq.n	8008a00 <cos+0x70>
 80089e2:	2800      	cmp	r0, #0
 80089e4:	d0de      	beq.n	80089a4 <cos+0x14>
 80089e6:	2001      	movs	r0, #1
 80089e8:	f000 fe5a 	bl	80096a0 <__kernel_sin>
 80089ec:	e7dc      	b.n	80089a8 <cos+0x18>
 80089ee:	f000 fe57 	bl	80096a0 <__kernel_sin>
 80089f2:	ec53 2b10 	vmov	r2, r3, d0
 80089f6:	ee10 0a10 	vmov	r0, s0
 80089fa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80089fe:	e7de      	b.n	80089be <cos+0x2e>
 8008a00:	f000 fa46 	bl	8008e90 <__kernel_cos>
 8008a04:	e7f5      	b.n	80089f2 <cos+0x62>
 8008a06:	bf00      	nop
	...
 8008a10:	3fe921fb 	.word	0x3fe921fb
 8008a14:	7fefffff 	.word	0x7fefffff

08008a18 <sin>:
 8008a18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a1a:	ec51 0b10 	vmov	r0, r1, d0
 8008a1e:	4a20      	ldr	r2, [pc, #128]	; (8008aa0 <sin+0x88>)
 8008a20:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8008a24:	4293      	cmp	r3, r2
 8008a26:	dc07      	bgt.n	8008a38 <sin+0x20>
 8008a28:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8008a98 <sin+0x80>
 8008a2c:	2000      	movs	r0, #0
 8008a2e:	f000 fe37 	bl	80096a0 <__kernel_sin>
 8008a32:	ec51 0b10 	vmov	r0, r1, d0
 8008a36:	e007      	b.n	8008a48 <sin+0x30>
 8008a38:	4a1a      	ldr	r2, [pc, #104]	; (8008aa4 <sin+0x8c>)
 8008a3a:	4293      	cmp	r3, r2
 8008a3c:	dd09      	ble.n	8008a52 <sin+0x3a>
 8008a3e:	ee10 2a10 	vmov	r2, s0
 8008a42:	460b      	mov	r3, r1
 8008a44:	f7f7 fc18 	bl	8000278 <__aeabi_dsub>
 8008a48:	ec41 0b10 	vmov	d0, r0, r1
 8008a4c:	b005      	add	sp, #20
 8008a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8008a52:	4668      	mov	r0, sp
 8008a54:	f000 f828 	bl	8008aa8 <__ieee754_rem_pio2>
 8008a58:	f000 0003 	and.w	r0, r0, #3
 8008a5c:	2801      	cmp	r0, #1
 8008a5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8008a62:	ed9d 0b00 	vldr	d0, [sp]
 8008a66:	d004      	beq.n	8008a72 <sin+0x5a>
 8008a68:	2802      	cmp	r0, #2
 8008a6a:	d005      	beq.n	8008a78 <sin+0x60>
 8008a6c:	b970      	cbnz	r0, 8008a8c <sin+0x74>
 8008a6e:	2001      	movs	r0, #1
 8008a70:	e7dd      	b.n	8008a2e <sin+0x16>
 8008a72:	f000 fa0d 	bl	8008e90 <__kernel_cos>
 8008a76:	e7dc      	b.n	8008a32 <sin+0x1a>
 8008a78:	2001      	movs	r0, #1
 8008a7a:	f000 fe11 	bl	80096a0 <__kernel_sin>
 8008a7e:	ec53 2b10 	vmov	r2, r3, d0
 8008a82:	ee10 0a10 	vmov	r0, s0
 8008a86:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008a8a:	e7dd      	b.n	8008a48 <sin+0x30>
 8008a8c:	f000 fa00 	bl	8008e90 <__kernel_cos>
 8008a90:	e7f5      	b.n	8008a7e <sin+0x66>
 8008a92:	bf00      	nop
 8008a94:	f3af 8000 	nop.w
	...
 8008aa0:	3fe921fb 	.word	0x3fe921fb
 8008aa4:	7fefffff 	.word	0x7fefffff

08008aa8 <__ieee754_rem_pio2>:
 8008aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008aac:	ec57 6b10 	vmov	r6, r7, d0
 8008ab0:	4bc3      	ldr	r3, [pc, #780]	; (8008dc0 <__ieee754_rem_pio2+0x318>)
 8008ab2:	b08d      	sub	sp, #52	; 0x34
 8008ab4:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8008ab8:	4598      	cmp	r8, r3
 8008aba:	4604      	mov	r4, r0
 8008abc:	9704      	str	r7, [sp, #16]
 8008abe:	dc07      	bgt.n	8008ad0 <__ieee754_rem_pio2+0x28>
 8008ac0:	2200      	movs	r2, #0
 8008ac2:	2300      	movs	r3, #0
 8008ac4:	ed84 0b00 	vstr	d0, [r4]
 8008ac8:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8008acc:	2500      	movs	r5, #0
 8008ace:	e027      	b.n	8008b20 <__ieee754_rem_pio2+0x78>
 8008ad0:	4bbc      	ldr	r3, [pc, #752]	; (8008dc4 <__ieee754_rem_pio2+0x31c>)
 8008ad2:	4598      	cmp	r8, r3
 8008ad4:	dc75      	bgt.n	8008bc2 <__ieee754_rem_pio2+0x11a>
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	4dbb      	ldr	r5, [pc, #748]	; (8008dc8 <__ieee754_rem_pio2+0x320>)
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	ee10 0a10 	vmov	r0, s0
 8008ae0:	a3a9      	add	r3, pc, #676	; (adr r3, 8008d88 <__ieee754_rem_pio2+0x2e0>)
 8008ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ae6:	4639      	mov	r1, r7
 8008ae8:	dd36      	ble.n	8008b58 <__ieee754_rem_pio2+0xb0>
 8008aea:	f7f7 fbc5 	bl	8000278 <__aeabi_dsub>
 8008aee:	45a8      	cmp	r8, r5
 8008af0:	4606      	mov	r6, r0
 8008af2:	460f      	mov	r7, r1
 8008af4:	d018      	beq.n	8008b28 <__ieee754_rem_pio2+0x80>
 8008af6:	a3a6      	add	r3, pc, #664	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2e8>)
 8008af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afc:	f7f7 fbbc 	bl	8000278 <__aeabi_dsub>
 8008b00:	4602      	mov	r2, r0
 8008b02:	460b      	mov	r3, r1
 8008b04:	e9c4 2300 	strd	r2, r3, [r4]
 8008b08:	4630      	mov	r0, r6
 8008b0a:	4639      	mov	r1, r7
 8008b0c:	f7f7 fbb4 	bl	8000278 <__aeabi_dsub>
 8008b10:	a39f      	add	r3, pc, #636	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2e8>)
 8008b12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b16:	f7f7 fbaf 	bl	8000278 <__aeabi_dsub>
 8008b1a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b1e:	2501      	movs	r5, #1
 8008b20:	4628      	mov	r0, r5
 8008b22:	b00d      	add	sp, #52	; 0x34
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	a39b      	add	r3, pc, #620	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x2f0>)
 8008b2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b2e:	f7f7 fba3 	bl	8000278 <__aeabi_dsub>
 8008b32:	a39b      	add	r3, pc, #620	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x2f8>)
 8008b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b38:	4606      	mov	r6, r0
 8008b3a:	460f      	mov	r7, r1
 8008b3c:	f7f7 fb9c 	bl	8000278 <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	e9c4 2300 	strd	r2, r3, [r4]
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 fb94 	bl	8000278 <__aeabi_dsub>
 8008b50:	a393      	add	r3, pc, #588	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x2f8>)
 8008b52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b56:	e7de      	b.n	8008b16 <__ieee754_rem_pio2+0x6e>
 8008b58:	f7f7 fb90 	bl	800027c <__adddf3>
 8008b5c:	45a8      	cmp	r8, r5
 8008b5e:	4606      	mov	r6, r0
 8008b60:	460f      	mov	r7, r1
 8008b62:	d016      	beq.n	8008b92 <__ieee754_rem_pio2+0xea>
 8008b64:	a38a      	add	r3, pc, #552	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2e8>)
 8008b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b6a:	f7f7 fb87 	bl	800027c <__adddf3>
 8008b6e:	4602      	mov	r2, r0
 8008b70:	460b      	mov	r3, r1
 8008b72:	e9c4 2300 	strd	r2, r3, [r4]
 8008b76:	4630      	mov	r0, r6
 8008b78:	4639      	mov	r1, r7
 8008b7a:	f7f7 fb7d 	bl	8000278 <__aeabi_dsub>
 8008b7e:	a384      	add	r3, pc, #528	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2e8>)
 8008b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b84:	f7f7 fb7a 	bl	800027c <__adddf3>
 8008b88:	f04f 35ff 	mov.w	r5, #4294967295
 8008b8c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008b90:	e7c6      	b.n	8008b20 <__ieee754_rem_pio2+0x78>
 8008b92:	a381      	add	r3, pc, #516	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x2f0>)
 8008b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b98:	f7f7 fb70 	bl	800027c <__adddf3>
 8008b9c:	a380      	add	r3, pc, #512	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x2f8>)
 8008b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ba2:	4606      	mov	r6, r0
 8008ba4:	460f      	mov	r7, r1
 8008ba6:	f7f7 fb69 	bl	800027c <__adddf3>
 8008baa:	4602      	mov	r2, r0
 8008bac:	460b      	mov	r3, r1
 8008bae:	e9c4 2300 	strd	r2, r3, [r4]
 8008bb2:	4630      	mov	r0, r6
 8008bb4:	4639      	mov	r1, r7
 8008bb6:	f7f7 fb5f 	bl	8000278 <__aeabi_dsub>
 8008bba:	a379      	add	r3, pc, #484	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x2f8>)
 8008bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bc0:	e7e0      	b.n	8008b84 <__ieee754_rem_pio2+0xdc>
 8008bc2:	4b82      	ldr	r3, [pc, #520]	; (8008dcc <__ieee754_rem_pio2+0x324>)
 8008bc4:	4598      	cmp	r8, r3
 8008bc6:	f300 80d0 	bgt.w	8008d6a <__ieee754_rem_pio2+0x2c2>
 8008bca:	f000 fe23 	bl	8009814 <fabs>
 8008bce:	ec57 6b10 	vmov	r6, r7, d0
 8008bd2:	ee10 0a10 	vmov	r0, s0
 8008bd6:	a374      	add	r3, pc, #464	; (adr r3, 8008da8 <__ieee754_rem_pio2+0x300>)
 8008bd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bdc:	4639      	mov	r1, r7
 8008bde:	f7f7 fd03 	bl	80005e8 <__aeabi_dmul>
 8008be2:	2200      	movs	r2, #0
 8008be4:	4b7a      	ldr	r3, [pc, #488]	; (8008dd0 <__ieee754_rem_pio2+0x328>)
 8008be6:	f7f7 fb49 	bl	800027c <__adddf3>
 8008bea:	f7f7 ff97 	bl	8000b1c <__aeabi_d2iz>
 8008bee:	4605      	mov	r5, r0
 8008bf0:	f7f7 fc90 	bl	8000514 <__aeabi_i2d>
 8008bf4:	a364      	add	r3, pc, #400	; (adr r3, 8008d88 <__ieee754_rem_pio2+0x2e0>)
 8008bf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bfe:	f7f7 fcf3 	bl	80005e8 <__aeabi_dmul>
 8008c02:	4602      	mov	r2, r0
 8008c04:	460b      	mov	r3, r1
 8008c06:	4630      	mov	r0, r6
 8008c08:	4639      	mov	r1, r7
 8008c0a:	f7f7 fb35 	bl	8000278 <__aeabi_dsub>
 8008c0e:	a360      	add	r3, pc, #384	; (adr r3, 8008d90 <__ieee754_rem_pio2+0x2e8>)
 8008c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c14:	4682      	mov	sl, r0
 8008c16:	468b      	mov	fp, r1
 8008c18:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c1c:	f7f7 fce4 	bl	80005e8 <__aeabi_dmul>
 8008c20:	2d1f      	cmp	r5, #31
 8008c22:	4606      	mov	r6, r0
 8008c24:	460f      	mov	r7, r1
 8008c26:	dc0c      	bgt.n	8008c42 <__ieee754_rem_pio2+0x19a>
 8008c28:	1e6a      	subs	r2, r5, #1
 8008c2a:	4b6a      	ldr	r3, [pc, #424]	; (8008dd4 <__ieee754_rem_pio2+0x32c>)
 8008c2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008c30:	4543      	cmp	r3, r8
 8008c32:	d006      	beq.n	8008c42 <__ieee754_rem_pio2+0x19a>
 8008c34:	4632      	mov	r2, r6
 8008c36:	463b      	mov	r3, r7
 8008c38:	4650      	mov	r0, sl
 8008c3a:	4659      	mov	r1, fp
 8008c3c:	f7f7 fb1c 	bl	8000278 <__aeabi_dsub>
 8008c40:	e00e      	b.n	8008c60 <__ieee754_rem_pio2+0x1b8>
 8008c42:	4632      	mov	r2, r6
 8008c44:	463b      	mov	r3, r7
 8008c46:	4650      	mov	r0, sl
 8008c48:	4659      	mov	r1, fp
 8008c4a:	f7f7 fb15 	bl	8000278 <__aeabi_dsub>
 8008c4e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008c52:	9305      	str	r3, [sp, #20]
 8008c54:	9a05      	ldr	r2, [sp, #20]
 8008c56:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008c5a:	1ad3      	subs	r3, r2, r3
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	dc02      	bgt.n	8008c66 <__ieee754_rem_pio2+0x1be>
 8008c60:	e9c4 0100 	strd	r0, r1, [r4]
 8008c64:	e039      	b.n	8008cda <__ieee754_rem_pio2+0x232>
 8008c66:	a34c      	add	r3, pc, #304	; (adr r3, 8008d98 <__ieee754_rem_pio2+0x2f0>)
 8008c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c70:	f7f7 fcba 	bl	80005e8 <__aeabi_dmul>
 8008c74:	4606      	mov	r6, r0
 8008c76:	460f      	mov	r7, r1
 8008c78:	4602      	mov	r2, r0
 8008c7a:	460b      	mov	r3, r1
 8008c7c:	4650      	mov	r0, sl
 8008c7e:	4659      	mov	r1, fp
 8008c80:	f7f7 fafa 	bl	8000278 <__aeabi_dsub>
 8008c84:	4602      	mov	r2, r0
 8008c86:	460b      	mov	r3, r1
 8008c88:	4680      	mov	r8, r0
 8008c8a:	4689      	mov	r9, r1
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	4659      	mov	r1, fp
 8008c90:	f7f7 faf2 	bl	8000278 <__aeabi_dsub>
 8008c94:	4632      	mov	r2, r6
 8008c96:	463b      	mov	r3, r7
 8008c98:	f7f7 faee 	bl	8000278 <__aeabi_dsub>
 8008c9c:	a340      	add	r3, pc, #256	; (adr r3, 8008da0 <__ieee754_rem_pio2+0x2f8>)
 8008c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca2:	4606      	mov	r6, r0
 8008ca4:	460f      	mov	r7, r1
 8008ca6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008caa:	f7f7 fc9d 	bl	80005e8 <__aeabi_dmul>
 8008cae:	4632      	mov	r2, r6
 8008cb0:	463b      	mov	r3, r7
 8008cb2:	f7f7 fae1 	bl	8000278 <__aeabi_dsub>
 8008cb6:	4602      	mov	r2, r0
 8008cb8:	460b      	mov	r3, r1
 8008cba:	4606      	mov	r6, r0
 8008cbc:	460f      	mov	r7, r1
 8008cbe:	4640      	mov	r0, r8
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	f7f7 fad9 	bl	8000278 <__aeabi_dsub>
 8008cc6:	9a05      	ldr	r2, [sp, #20]
 8008cc8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008ccc:	1ad3      	subs	r3, r2, r3
 8008cce:	2b31      	cmp	r3, #49	; 0x31
 8008cd0:	dc20      	bgt.n	8008d14 <__ieee754_rem_pio2+0x26c>
 8008cd2:	e9c4 0100 	strd	r0, r1, [r4]
 8008cd6:	46c2      	mov	sl, r8
 8008cd8:	46cb      	mov	fp, r9
 8008cda:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008cde:	4650      	mov	r0, sl
 8008ce0:	4642      	mov	r2, r8
 8008ce2:	464b      	mov	r3, r9
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	f7f7 fac7 	bl	8000278 <__aeabi_dsub>
 8008cea:	463b      	mov	r3, r7
 8008cec:	4632      	mov	r2, r6
 8008cee:	f7f7 fac3 	bl	8000278 <__aeabi_dsub>
 8008cf2:	9b04      	ldr	r3, [sp, #16]
 8008cf4:	2b00      	cmp	r3, #0
 8008cf6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008cfa:	f6bf af11 	bge.w	8008b20 <__ieee754_rem_pio2+0x78>
 8008cfe:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008d02:	6063      	str	r3, [r4, #4]
 8008d04:	f8c4 8000 	str.w	r8, [r4]
 8008d08:	60a0      	str	r0, [r4, #8]
 8008d0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008d0e:	60e3      	str	r3, [r4, #12]
 8008d10:	426d      	negs	r5, r5
 8008d12:	e705      	b.n	8008b20 <__ieee754_rem_pio2+0x78>
 8008d14:	a326      	add	r3, pc, #152	; (adr r3, 8008db0 <__ieee754_rem_pio2+0x308>)
 8008d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d1e:	f7f7 fc63 	bl	80005e8 <__aeabi_dmul>
 8008d22:	4606      	mov	r6, r0
 8008d24:	460f      	mov	r7, r1
 8008d26:	4602      	mov	r2, r0
 8008d28:	460b      	mov	r3, r1
 8008d2a:	4640      	mov	r0, r8
 8008d2c:	4649      	mov	r1, r9
 8008d2e:	f7f7 faa3 	bl	8000278 <__aeabi_dsub>
 8008d32:	4602      	mov	r2, r0
 8008d34:	460b      	mov	r3, r1
 8008d36:	4682      	mov	sl, r0
 8008d38:	468b      	mov	fp, r1
 8008d3a:	4640      	mov	r0, r8
 8008d3c:	4649      	mov	r1, r9
 8008d3e:	f7f7 fa9b 	bl	8000278 <__aeabi_dsub>
 8008d42:	4632      	mov	r2, r6
 8008d44:	463b      	mov	r3, r7
 8008d46:	f7f7 fa97 	bl	8000278 <__aeabi_dsub>
 8008d4a:	a31b      	add	r3, pc, #108	; (adr r3, 8008db8 <__ieee754_rem_pio2+0x310>)
 8008d4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d50:	4606      	mov	r6, r0
 8008d52:	460f      	mov	r7, r1
 8008d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d58:	f7f7 fc46 	bl	80005e8 <__aeabi_dmul>
 8008d5c:	4632      	mov	r2, r6
 8008d5e:	463b      	mov	r3, r7
 8008d60:	f7f7 fa8a 	bl	8000278 <__aeabi_dsub>
 8008d64:	4606      	mov	r6, r0
 8008d66:	460f      	mov	r7, r1
 8008d68:	e764      	b.n	8008c34 <__ieee754_rem_pio2+0x18c>
 8008d6a:	4b1b      	ldr	r3, [pc, #108]	; (8008dd8 <__ieee754_rem_pio2+0x330>)
 8008d6c:	4598      	cmp	r8, r3
 8008d6e:	dd35      	ble.n	8008ddc <__ieee754_rem_pio2+0x334>
 8008d70:	ee10 2a10 	vmov	r2, s0
 8008d74:	463b      	mov	r3, r7
 8008d76:	4630      	mov	r0, r6
 8008d78:	4639      	mov	r1, r7
 8008d7a:	f7f7 fa7d 	bl	8000278 <__aeabi_dsub>
 8008d7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008d82:	e9c4 0100 	strd	r0, r1, [r4]
 8008d86:	e6a1      	b.n	8008acc <__ieee754_rem_pio2+0x24>
 8008d88:	54400000 	.word	0x54400000
 8008d8c:	3ff921fb 	.word	0x3ff921fb
 8008d90:	1a626331 	.word	0x1a626331
 8008d94:	3dd0b461 	.word	0x3dd0b461
 8008d98:	1a600000 	.word	0x1a600000
 8008d9c:	3dd0b461 	.word	0x3dd0b461
 8008da0:	2e037073 	.word	0x2e037073
 8008da4:	3ba3198a 	.word	0x3ba3198a
 8008da8:	6dc9c883 	.word	0x6dc9c883
 8008dac:	3fe45f30 	.word	0x3fe45f30
 8008db0:	2e000000 	.word	0x2e000000
 8008db4:	3ba3198a 	.word	0x3ba3198a
 8008db8:	252049c1 	.word	0x252049c1
 8008dbc:	397b839a 	.word	0x397b839a
 8008dc0:	3fe921fb 	.word	0x3fe921fb
 8008dc4:	4002d97b 	.word	0x4002d97b
 8008dc8:	3ff921fb 	.word	0x3ff921fb
 8008dcc:	413921fb 	.word	0x413921fb
 8008dd0:	3fe00000 	.word	0x3fe00000
 8008dd4:	08009e98 	.word	0x08009e98
 8008dd8:	7fefffff 	.word	0x7fefffff
 8008ddc:	ea4f 5528 	mov.w	r5, r8, asr #20
 8008de0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8008de4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8008de8:	4630      	mov	r0, r6
 8008dea:	460f      	mov	r7, r1
 8008dec:	f7f7 fe96 	bl	8000b1c <__aeabi_d2iz>
 8008df0:	f7f7 fb90 	bl	8000514 <__aeabi_i2d>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4630      	mov	r0, r6
 8008dfa:	4639      	mov	r1, r7
 8008dfc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8008e00:	f7f7 fa3a 	bl	8000278 <__aeabi_dsub>
 8008e04:	2200      	movs	r2, #0
 8008e06:	4b1f      	ldr	r3, [pc, #124]	; (8008e84 <__ieee754_rem_pio2+0x3dc>)
 8008e08:	f7f7 fbee 	bl	80005e8 <__aeabi_dmul>
 8008e0c:	460f      	mov	r7, r1
 8008e0e:	4606      	mov	r6, r0
 8008e10:	f7f7 fe84 	bl	8000b1c <__aeabi_d2iz>
 8008e14:	f7f7 fb7e 	bl	8000514 <__aeabi_i2d>
 8008e18:	4602      	mov	r2, r0
 8008e1a:	460b      	mov	r3, r1
 8008e1c:	4630      	mov	r0, r6
 8008e1e:	4639      	mov	r1, r7
 8008e20:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e24:	f7f7 fa28 	bl	8000278 <__aeabi_dsub>
 8008e28:	2200      	movs	r2, #0
 8008e2a:	4b16      	ldr	r3, [pc, #88]	; (8008e84 <__ieee754_rem_pio2+0x3dc>)
 8008e2c:	f7f7 fbdc 	bl	80005e8 <__aeabi_dmul>
 8008e30:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8008e34:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8008e38:	f04f 0803 	mov.w	r8, #3
 8008e3c:	2600      	movs	r6, #0
 8008e3e:	2700      	movs	r7, #0
 8008e40:	4632      	mov	r2, r6
 8008e42:	463b      	mov	r3, r7
 8008e44:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8008e48:	f108 3aff 	add.w	sl, r8, #4294967295
 8008e4c:	f7f7 fe34 	bl	8000ab8 <__aeabi_dcmpeq>
 8008e50:	b9b0      	cbnz	r0, 8008e80 <__ieee754_rem_pio2+0x3d8>
 8008e52:	4b0d      	ldr	r3, [pc, #52]	; (8008e88 <__ieee754_rem_pio2+0x3e0>)
 8008e54:	9301      	str	r3, [sp, #4]
 8008e56:	2302      	movs	r3, #2
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	462a      	mov	r2, r5
 8008e5c:	4643      	mov	r3, r8
 8008e5e:	4621      	mov	r1, r4
 8008e60:	a806      	add	r0, sp, #24
 8008e62:	f000 f8dd 	bl	8009020 <__kernel_rem_pio2>
 8008e66:	9b04      	ldr	r3, [sp, #16]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	4605      	mov	r5, r0
 8008e6c:	f6bf ae58 	bge.w	8008b20 <__ieee754_rem_pio2+0x78>
 8008e70:	6863      	ldr	r3, [r4, #4]
 8008e72:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e76:	6063      	str	r3, [r4, #4]
 8008e78:	68e3      	ldr	r3, [r4, #12]
 8008e7a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8008e7e:	e746      	b.n	8008d0e <__ieee754_rem_pio2+0x266>
 8008e80:	46d0      	mov	r8, sl
 8008e82:	e7dd      	b.n	8008e40 <__ieee754_rem_pio2+0x398>
 8008e84:	41700000 	.word	0x41700000
 8008e88:	08009f18 	.word	0x08009f18
 8008e8c:	00000000 	.word	0x00000000

08008e90 <__kernel_cos>:
 8008e90:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e94:	ec59 8b10 	vmov	r8, r9, d0
 8008e98:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8008e9c:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8008ea0:	ed2d 8b02 	vpush	{d8}
 8008ea4:	eeb0 8a41 	vmov.f32	s16, s2
 8008ea8:	eef0 8a61 	vmov.f32	s17, s3
 8008eac:	da07      	bge.n	8008ebe <__kernel_cos+0x2e>
 8008eae:	ee10 0a10 	vmov	r0, s0
 8008eb2:	4649      	mov	r1, r9
 8008eb4:	f7f7 fe32 	bl	8000b1c <__aeabi_d2iz>
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	f000 8089 	beq.w	8008fd0 <__kernel_cos+0x140>
 8008ebe:	4642      	mov	r2, r8
 8008ec0:	464b      	mov	r3, r9
 8008ec2:	4640      	mov	r0, r8
 8008ec4:	4649      	mov	r1, r9
 8008ec6:	f7f7 fb8f 	bl	80005e8 <__aeabi_dmul>
 8008eca:	2200      	movs	r2, #0
 8008ecc:	4b4e      	ldr	r3, [pc, #312]	; (8009008 <__kernel_cos+0x178>)
 8008ece:	4604      	mov	r4, r0
 8008ed0:	460d      	mov	r5, r1
 8008ed2:	f7f7 fb89 	bl	80005e8 <__aeabi_dmul>
 8008ed6:	a340      	add	r3, pc, #256	; (adr r3, 8008fd8 <__kernel_cos+0x148>)
 8008ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008edc:	4682      	mov	sl, r0
 8008ede:	468b      	mov	fp, r1
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	4629      	mov	r1, r5
 8008ee4:	f7f7 fb80 	bl	80005e8 <__aeabi_dmul>
 8008ee8:	a33d      	add	r3, pc, #244	; (adr r3, 8008fe0 <__kernel_cos+0x150>)
 8008eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eee:	f7f7 f9c5 	bl	800027c <__adddf3>
 8008ef2:	4622      	mov	r2, r4
 8008ef4:	462b      	mov	r3, r5
 8008ef6:	f7f7 fb77 	bl	80005e8 <__aeabi_dmul>
 8008efa:	a33b      	add	r3, pc, #236	; (adr r3, 8008fe8 <__kernel_cos+0x158>)
 8008efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f00:	f7f7 f9ba 	bl	8000278 <__aeabi_dsub>
 8008f04:	4622      	mov	r2, r4
 8008f06:	462b      	mov	r3, r5
 8008f08:	f7f7 fb6e 	bl	80005e8 <__aeabi_dmul>
 8008f0c:	a338      	add	r3, pc, #224	; (adr r3, 8008ff0 <__kernel_cos+0x160>)
 8008f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f12:	f7f7 f9b3 	bl	800027c <__adddf3>
 8008f16:	4622      	mov	r2, r4
 8008f18:	462b      	mov	r3, r5
 8008f1a:	f7f7 fb65 	bl	80005e8 <__aeabi_dmul>
 8008f1e:	a336      	add	r3, pc, #216	; (adr r3, 8008ff8 <__kernel_cos+0x168>)
 8008f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f24:	f7f7 f9a8 	bl	8000278 <__aeabi_dsub>
 8008f28:	4622      	mov	r2, r4
 8008f2a:	462b      	mov	r3, r5
 8008f2c:	f7f7 fb5c 	bl	80005e8 <__aeabi_dmul>
 8008f30:	a333      	add	r3, pc, #204	; (adr r3, 8009000 <__kernel_cos+0x170>)
 8008f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f36:	f7f7 f9a1 	bl	800027c <__adddf3>
 8008f3a:	4622      	mov	r2, r4
 8008f3c:	462b      	mov	r3, r5
 8008f3e:	f7f7 fb53 	bl	80005e8 <__aeabi_dmul>
 8008f42:	4622      	mov	r2, r4
 8008f44:	462b      	mov	r3, r5
 8008f46:	f7f7 fb4f 	bl	80005e8 <__aeabi_dmul>
 8008f4a:	ec53 2b18 	vmov	r2, r3, d8
 8008f4e:	4604      	mov	r4, r0
 8008f50:	460d      	mov	r5, r1
 8008f52:	4640      	mov	r0, r8
 8008f54:	4649      	mov	r1, r9
 8008f56:	f7f7 fb47 	bl	80005e8 <__aeabi_dmul>
 8008f5a:	460b      	mov	r3, r1
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	4629      	mov	r1, r5
 8008f60:	4620      	mov	r0, r4
 8008f62:	f7f7 f989 	bl	8000278 <__aeabi_dsub>
 8008f66:	4b29      	ldr	r3, [pc, #164]	; (800900c <__kernel_cos+0x17c>)
 8008f68:	429e      	cmp	r6, r3
 8008f6a:	4680      	mov	r8, r0
 8008f6c:	4689      	mov	r9, r1
 8008f6e:	dc11      	bgt.n	8008f94 <__kernel_cos+0x104>
 8008f70:	4602      	mov	r2, r0
 8008f72:	460b      	mov	r3, r1
 8008f74:	4650      	mov	r0, sl
 8008f76:	4659      	mov	r1, fp
 8008f78:	f7f7 f97e 	bl	8000278 <__aeabi_dsub>
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	4924      	ldr	r1, [pc, #144]	; (8009010 <__kernel_cos+0x180>)
 8008f80:	4602      	mov	r2, r0
 8008f82:	2000      	movs	r0, #0
 8008f84:	f7f7 f978 	bl	8000278 <__aeabi_dsub>
 8008f88:	ecbd 8b02 	vpop	{d8}
 8008f8c:	ec41 0b10 	vmov	d0, r0, r1
 8008f90:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f94:	4b1f      	ldr	r3, [pc, #124]	; (8009014 <__kernel_cos+0x184>)
 8008f96:	491e      	ldr	r1, [pc, #120]	; (8009010 <__kernel_cos+0x180>)
 8008f98:	429e      	cmp	r6, r3
 8008f9a:	bfcc      	ite	gt
 8008f9c:	4d1e      	ldrgt	r5, [pc, #120]	; (8009018 <__kernel_cos+0x188>)
 8008f9e:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8008fa2:	2400      	movs	r4, #0
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	462b      	mov	r3, r5
 8008fa8:	2000      	movs	r0, #0
 8008faa:	f7f7 f965 	bl	8000278 <__aeabi_dsub>
 8008fae:	4622      	mov	r2, r4
 8008fb0:	4606      	mov	r6, r0
 8008fb2:	460f      	mov	r7, r1
 8008fb4:	462b      	mov	r3, r5
 8008fb6:	4650      	mov	r0, sl
 8008fb8:	4659      	mov	r1, fp
 8008fba:	f7f7 f95d 	bl	8000278 <__aeabi_dsub>
 8008fbe:	4642      	mov	r2, r8
 8008fc0:	464b      	mov	r3, r9
 8008fc2:	f7f7 f959 	bl	8000278 <__aeabi_dsub>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	460b      	mov	r3, r1
 8008fca:	4630      	mov	r0, r6
 8008fcc:	4639      	mov	r1, r7
 8008fce:	e7d9      	b.n	8008f84 <__kernel_cos+0xf4>
 8008fd0:	2000      	movs	r0, #0
 8008fd2:	490f      	ldr	r1, [pc, #60]	; (8009010 <__kernel_cos+0x180>)
 8008fd4:	e7d8      	b.n	8008f88 <__kernel_cos+0xf8>
 8008fd6:	bf00      	nop
 8008fd8:	be8838d4 	.word	0xbe8838d4
 8008fdc:	bda8fae9 	.word	0xbda8fae9
 8008fe0:	bdb4b1c4 	.word	0xbdb4b1c4
 8008fe4:	3e21ee9e 	.word	0x3e21ee9e
 8008fe8:	809c52ad 	.word	0x809c52ad
 8008fec:	3e927e4f 	.word	0x3e927e4f
 8008ff0:	19cb1590 	.word	0x19cb1590
 8008ff4:	3efa01a0 	.word	0x3efa01a0
 8008ff8:	16c15177 	.word	0x16c15177
 8008ffc:	3f56c16c 	.word	0x3f56c16c
 8009000:	5555554c 	.word	0x5555554c
 8009004:	3fa55555 	.word	0x3fa55555
 8009008:	3fe00000 	.word	0x3fe00000
 800900c:	3fd33332 	.word	0x3fd33332
 8009010:	3ff00000 	.word	0x3ff00000
 8009014:	3fe90000 	.word	0x3fe90000
 8009018:	3fd20000 	.word	0x3fd20000
 800901c:	00000000 	.word	0x00000000

08009020 <__kernel_rem_pio2>:
 8009020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009024:	ed2d 8b02 	vpush	{d8}
 8009028:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800902c:	1ed4      	subs	r4, r2, #3
 800902e:	9308      	str	r3, [sp, #32]
 8009030:	9101      	str	r1, [sp, #4]
 8009032:	4bc5      	ldr	r3, [pc, #788]	; (8009348 <__kernel_rem_pio2+0x328>)
 8009034:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8009036:	9009      	str	r0, [sp, #36]	; 0x24
 8009038:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800903c:	9304      	str	r3, [sp, #16]
 800903e:	9b08      	ldr	r3, [sp, #32]
 8009040:	3b01      	subs	r3, #1
 8009042:	9307      	str	r3, [sp, #28]
 8009044:	2318      	movs	r3, #24
 8009046:	fb94 f4f3 	sdiv	r4, r4, r3
 800904a:	f06f 0317 	mvn.w	r3, #23
 800904e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8009052:	fb04 3303 	mla	r3, r4, r3, r3
 8009056:	eb03 0a02 	add.w	sl, r3, r2
 800905a:	9b04      	ldr	r3, [sp, #16]
 800905c:	9a07      	ldr	r2, [sp, #28]
 800905e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8009338 <__kernel_rem_pio2+0x318>
 8009062:	eb03 0802 	add.w	r8, r3, r2
 8009066:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8009068:	1aa7      	subs	r7, r4, r2
 800906a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800906e:	ae22      	add	r6, sp, #136	; 0x88
 8009070:	2500      	movs	r5, #0
 8009072:	4545      	cmp	r5, r8
 8009074:	dd13      	ble.n	800909e <__kernel_rem_pio2+0x7e>
 8009076:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8009338 <__kernel_rem_pio2+0x318>
 800907a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800907e:	2600      	movs	r6, #0
 8009080:	9b04      	ldr	r3, [sp, #16]
 8009082:	429e      	cmp	r6, r3
 8009084:	dc32      	bgt.n	80090ec <__kernel_rem_pio2+0xcc>
 8009086:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009088:	9302      	str	r3, [sp, #8]
 800908a:	9b08      	ldr	r3, [sp, #32]
 800908c:	199d      	adds	r5, r3, r6
 800908e:	ab22      	add	r3, sp, #136	; 0x88
 8009090:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009094:	9306      	str	r3, [sp, #24]
 8009096:	ec59 8b18 	vmov	r8, r9, d8
 800909a:	2700      	movs	r7, #0
 800909c:	e01f      	b.n	80090de <__kernel_rem_pio2+0xbe>
 800909e:	42ef      	cmn	r7, r5
 80090a0:	d407      	bmi.n	80090b2 <__kernel_rem_pio2+0x92>
 80090a2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80090a6:	f7f7 fa35 	bl	8000514 <__aeabi_i2d>
 80090aa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80090ae:	3501      	adds	r5, #1
 80090b0:	e7df      	b.n	8009072 <__kernel_rem_pio2+0x52>
 80090b2:	ec51 0b18 	vmov	r0, r1, d8
 80090b6:	e7f8      	b.n	80090aa <__kernel_rem_pio2+0x8a>
 80090b8:	9906      	ldr	r1, [sp, #24]
 80090ba:	9d02      	ldr	r5, [sp, #8]
 80090bc:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80090c0:	9106      	str	r1, [sp, #24]
 80090c2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80090c6:	9502      	str	r5, [sp, #8]
 80090c8:	f7f7 fa8e 	bl	80005e8 <__aeabi_dmul>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4640      	mov	r0, r8
 80090d2:	4649      	mov	r1, r9
 80090d4:	f7f7 f8d2 	bl	800027c <__adddf3>
 80090d8:	3701      	adds	r7, #1
 80090da:	4680      	mov	r8, r0
 80090dc:	4689      	mov	r9, r1
 80090de:	9b07      	ldr	r3, [sp, #28]
 80090e0:	429f      	cmp	r7, r3
 80090e2:	dde9      	ble.n	80090b8 <__kernel_rem_pio2+0x98>
 80090e4:	e8eb 8902 	strd	r8, r9, [fp], #8
 80090e8:	3601      	adds	r6, #1
 80090ea:	e7c9      	b.n	8009080 <__kernel_rem_pio2+0x60>
 80090ec:	9b04      	ldr	r3, [sp, #16]
 80090ee:	aa0e      	add	r2, sp, #56	; 0x38
 80090f0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80090f4:	930c      	str	r3, [sp, #48]	; 0x30
 80090f6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80090f8:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80090fc:	9c04      	ldr	r4, [sp, #16]
 80090fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009100:	ab9a      	add	r3, sp, #616	; 0x268
 8009102:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8009106:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800910a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800910e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8009112:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8009116:	ab9a      	add	r3, sp, #616	; 0x268
 8009118:	445b      	add	r3, fp
 800911a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800911e:	2500      	movs	r5, #0
 8009120:	1b63      	subs	r3, r4, r5
 8009122:	2b00      	cmp	r3, #0
 8009124:	dc78      	bgt.n	8009218 <__kernel_rem_pio2+0x1f8>
 8009126:	4650      	mov	r0, sl
 8009128:	ec49 8b10 	vmov	d0, r8, r9
 800912c:	f000 fc00 	bl	8009930 <scalbn>
 8009130:	ec57 6b10 	vmov	r6, r7, d0
 8009134:	2200      	movs	r2, #0
 8009136:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800913a:	ee10 0a10 	vmov	r0, s0
 800913e:	4639      	mov	r1, r7
 8009140:	f7f7 fa52 	bl	80005e8 <__aeabi_dmul>
 8009144:	ec41 0b10 	vmov	d0, r0, r1
 8009148:	f000 fb6e 	bl	8009828 <floor>
 800914c:	2200      	movs	r2, #0
 800914e:	ec51 0b10 	vmov	r0, r1, d0
 8009152:	4b7e      	ldr	r3, [pc, #504]	; (800934c <__kernel_rem_pio2+0x32c>)
 8009154:	f7f7 fa48 	bl	80005e8 <__aeabi_dmul>
 8009158:	4602      	mov	r2, r0
 800915a:	460b      	mov	r3, r1
 800915c:	4630      	mov	r0, r6
 800915e:	4639      	mov	r1, r7
 8009160:	f7f7 f88a 	bl	8000278 <__aeabi_dsub>
 8009164:	460f      	mov	r7, r1
 8009166:	4606      	mov	r6, r0
 8009168:	f7f7 fcd8 	bl	8000b1c <__aeabi_d2iz>
 800916c:	9006      	str	r0, [sp, #24]
 800916e:	f7f7 f9d1 	bl	8000514 <__aeabi_i2d>
 8009172:	4602      	mov	r2, r0
 8009174:	460b      	mov	r3, r1
 8009176:	4630      	mov	r0, r6
 8009178:	4639      	mov	r1, r7
 800917a:	f7f7 f87d 	bl	8000278 <__aeabi_dsub>
 800917e:	f1ba 0f00 	cmp.w	sl, #0
 8009182:	4606      	mov	r6, r0
 8009184:	460f      	mov	r7, r1
 8009186:	dd6c      	ble.n	8009262 <__kernel_rem_pio2+0x242>
 8009188:	1e62      	subs	r2, r4, #1
 800918a:	ab0e      	add	r3, sp, #56	; 0x38
 800918c:	f1ca 0118 	rsb	r1, sl, #24
 8009190:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8009194:	9d06      	ldr	r5, [sp, #24]
 8009196:	fa40 f301 	asr.w	r3, r0, r1
 800919a:	441d      	add	r5, r3
 800919c:	408b      	lsls	r3, r1
 800919e:	1ac0      	subs	r0, r0, r3
 80091a0:	ab0e      	add	r3, sp, #56	; 0x38
 80091a2:	9506      	str	r5, [sp, #24]
 80091a4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80091a8:	f1ca 0317 	rsb	r3, sl, #23
 80091ac:	fa40 f303 	asr.w	r3, r0, r3
 80091b0:	9302      	str	r3, [sp, #8]
 80091b2:	9b02      	ldr	r3, [sp, #8]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	dd62      	ble.n	800927e <__kernel_rem_pio2+0x25e>
 80091b8:	9b06      	ldr	r3, [sp, #24]
 80091ba:	2200      	movs	r2, #0
 80091bc:	3301      	adds	r3, #1
 80091be:	9306      	str	r3, [sp, #24]
 80091c0:	4615      	mov	r5, r2
 80091c2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80091c6:	4294      	cmp	r4, r2
 80091c8:	f300 8095 	bgt.w	80092f6 <__kernel_rem_pio2+0x2d6>
 80091cc:	f1ba 0f00 	cmp.w	sl, #0
 80091d0:	dd07      	ble.n	80091e2 <__kernel_rem_pio2+0x1c2>
 80091d2:	f1ba 0f01 	cmp.w	sl, #1
 80091d6:	f000 80a2 	beq.w	800931e <__kernel_rem_pio2+0x2fe>
 80091da:	f1ba 0f02 	cmp.w	sl, #2
 80091de:	f000 80c1 	beq.w	8009364 <__kernel_rem_pio2+0x344>
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	2b02      	cmp	r3, #2
 80091e6:	d14a      	bne.n	800927e <__kernel_rem_pio2+0x25e>
 80091e8:	4632      	mov	r2, r6
 80091ea:	463b      	mov	r3, r7
 80091ec:	2000      	movs	r0, #0
 80091ee:	4958      	ldr	r1, [pc, #352]	; (8009350 <__kernel_rem_pio2+0x330>)
 80091f0:	f7f7 f842 	bl	8000278 <__aeabi_dsub>
 80091f4:	4606      	mov	r6, r0
 80091f6:	460f      	mov	r7, r1
 80091f8:	2d00      	cmp	r5, #0
 80091fa:	d040      	beq.n	800927e <__kernel_rem_pio2+0x25e>
 80091fc:	4650      	mov	r0, sl
 80091fe:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8009340 <__kernel_rem_pio2+0x320>
 8009202:	f000 fb95 	bl	8009930 <scalbn>
 8009206:	4630      	mov	r0, r6
 8009208:	4639      	mov	r1, r7
 800920a:	ec53 2b10 	vmov	r2, r3, d0
 800920e:	f7f7 f833 	bl	8000278 <__aeabi_dsub>
 8009212:	4606      	mov	r6, r0
 8009214:	460f      	mov	r7, r1
 8009216:	e032      	b.n	800927e <__kernel_rem_pio2+0x25e>
 8009218:	2200      	movs	r2, #0
 800921a:	4b4e      	ldr	r3, [pc, #312]	; (8009354 <__kernel_rem_pio2+0x334>)
 800921c:	4640      	mov	r0, r8
 800921e:	4649      	mov	r1, r9
 8009220:	f7f7 f9e2 	bl	80005e8 <__aeabi_dmul>
 8009224:	f7f7 fc7a 	bl	8000b1c <__aeabi_d2iz>
 8009228:	f7f7 f974 	bl	8000514 <__aeabi_i2d>
 800922c:	2200      	movs	r2, #0
 800922e:	4b4a      	ldr	r3, [pc, #296]	; (8009358 <__kernel_rem_pio2+0x338>)
 8009230:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009234:	f7f7 f9d8 	bl	80005e8 <__aeabi_dmul>
 8009238:	4602      	mov	r2, r0
 800923a:	460b      	mov	r3, r1
 800923c:	4640      	mov	r0, r8
 800923e:	4649      	mov	r1, r9
 8009240:	f7f7 f81a 	bl	8000278 <__aeabi_dsub>
 8009244:	f7f7 fc6a 	bl	8000b1c <__aeabi_d2iz>
 8009248:	ab0e      	add	r3, sp, #56	; 0x38
 800924a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800924e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8009252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009256:	f7f7 f811 	bl	800027c <__adddf3>
 800925a:	3501      	adds	r5, #1
 800925c:	4680      	mov	r8, r0
 800925e:	4689      	mov	r9, r1
 8009260:	e75e      	b.n	8009120 <__kernel_rem_pio2+0x100>
 8009262:	d105      	bne.n	8009270 <__kernel_rem_pio2+0x250>
 8009264:	1e63      	subs	r3, r4, #1
 8009266:	aa0e      	add	r2, sp, #56	; 0x38
 8009268:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800926c:	15c3      	asrs	r3, r0, #23
 800926e:	e79f      	b.n	80091b0 <__kernel_rem_pio2+0x190>
 8009270:	2200      	movs	r2, #0
 8009272:	4b3a      	ldr	r3, [pc, #232]	; (800935c <__kernel_rem_pio2+0x33c>)
 8009274:	f7f7 fc3e 	bl	8000af4 <__aeabi_dcmpge>
 8009278:	2800      	cmp	r0, #0
 800927a:	d139      	bne.n	80092f0 <__kernel_rem_pio2+0x2d0>
 800927c:	9002      	str	r0, [sp, #8]
 800927e:	2200      	movs	r2, #0
 8009280:	2300      	movs	r3, #0
 8009282:	4630      	mov	r0, r6
 8009284:	4639      	mov	r1, r7
 8009286:	f7f7 fc17 	bl	8000ab8 <__aeabi_dcmpeq>
 800928a:	2800      	cmp	r0, #0
 800928c:	f000 80c7 	beq.w	800941e <__kernel_rem_pio2+0x3fe>
 8009290:	1e65      	subs	r5, r4, #1
 8009292:	462b      	mov	r3, r5
 8009294:	2200      	movs	r2, #0
 8009296:	9904      	ldr	r1, [sp, #16]
 8009298:	428b      	cmp	r3, r1
 800929a:	da6a      	bge.n	8009372 <__kernel_rem_pio2+0x352>
 800929c:	2a00      	cmp	r2, #0
 800929e:	f000 8088 	beq.w	80093b2 <__kernel_rem_pio2+0x392>
 80092a2:	ab0e      	add	r3, sp, #56	; 0x38
 80092a4:	f1aa 0a18 	sub.w	sl, sl, #24
 80092a8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	f000 80b4 	beq.w	800941a <__kernel_rem_pio2+0x3fa>
 80092b2:	4650      	mov	r0, sl
 80092b4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8009340 <__kernel_rem_pio2+0x320>
 80092b8:	f000 fb3a 	bl	8009930 <scalbn>
 80092bc:	00ec      	lsls	r4, r5, #3
 80092be:	ab72      	add	r3, sp, #456	; 0x1c8
 80092c0:	191e      	adds	r6, r3, r4
 80092c2:	ec59 8b10 	vmov	r8, r9, d0
 80092c6:	f106 0a08 	add.w	sl, r6, #8
 80092ca:	462f      	mov	r7, r5
 80092cc:	2f00      	cmp	r7, #0
 80092ce:	f280 80df 	bge.w	8009490 <__kernel_rem_pio2+0x470>
 80092d2:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8009338 <__kernel_rem_pio2+0x318>
 80092d6:	f04f 0a00 	mov.w	sl, #0
 80092da:	eba5 030a 	sub.w	r3, r5, sl
 80092de:	2b00      	cmp	r3, #0
 80092e0:	f2c0 810a 	blt.w	80094f8 <__kernel_rem_pio2+0x4d8>
 80092e4:	f8df b078 	ldr.w	fp, [pc, #120]	; 8009360 <__kernel_rem_pio2+0x340>
 80092e8:	ec59 8b18 	vmov	r8, r9, d8
 80092ec:	2700      	movs	r7, #0
 80092ee:	e0f5      	b.n	80094dc <__kernel_rem_pio2+0x4bc>
 80092f0:	2302      	movs	r3, #2
 80092f2:	9302      	str	r3, [sp, #8]
 80092f4:	e760      	b.n	80091b8 <__kernel_rem_pio2+0x198>
 80092f6:	ab0e      	add	r3, sp, #56	; 0x38
 80092f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80092fc:	b94d      	cbnz	r5, 8009312 <__kernel_rem_pio2+0x2f2>
 80092fe:	b12b      	cbz	r3, 800930c <__kernel_rem_pio2+0x2ec>
 8009300:	a80e      	add	r0, sp, #56	; 0x38
 8009302:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8009306:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800930a:	2301      	movs	r3, #1
 800930c:	3201      	adds	r2, #1
 800930e:	461d      	mov	r5, r3
 8009310:	e759      	b.n	80091c6 <__kernel_rem_pio2+0x1a6>
 8009312:	a80e      	add	r0, sp, #56	; 0x38
 8009314:	1acb      	subs	r3, r1, r3
 8009316:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800931a:	462b      	mov	r3, r5
 800931c:	e7f6      	b.n	800930c <__kernel_rem_pio2+0x2ec>
 800931e:	1e62      	subs	r2, r4, #1
 8009320:	ab0e      	add	r3, sp, #56	; 0x38
 8009322:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009326:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800932a:	a90e      	add	r1, sp, #56	; 0x38
 800932c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009330:	e757      	b.n	80091e2 <__kernel_rem_pio2+0x1c2>
 8009332:	bf00      	nop
 8009334:	f3af 8000 	nop.w
	...
 8009344:	3ff00000 	.word	0x3ff00000
 8009348:	0800a060 	.word	0x0800a060
 800934c:	40200000 	.word	0x40200000
 8009350:	3ff00000 	.word	0x3ff00000
 8009354:	3e700000 	.word	0x3e700000
 8009358:	41700000 	.word	0x41700000
 800935c:	3fe00000 	.word	0x3fe00000
 8009360:	0800a020 	.word	0x0800a020
 8009364:	1e62      	subs	r2, r4, #1
 8009366:	ab0e      	add	r3, sp, #56	; 0x38
 8009368:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800936c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8009370:	e7db      	b.n	800932a <__kernel_rem_pio2+0x30a>
 8009372:	a90e      	add	r1, sp, #56	; 0x38
 8009374:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8009378:	3b01      	subs	r3, #1
 800937a:	430a      	orrs	r2, r1
 800937c:	e78b      	b.n	8009296 <__kernel_rem_pio2+0x276>
 800937e:	3301      	adds	r3, #1
 8009380:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8009384:	2900      	cmp	r1, #0
 8009386:	d0fa      	beq.n	800937e <__kernel_rem_pio2+0x35e>
 8009388:	9a08      	ldr	r2, [sp, #32]
 800938a:	4422      	add	r2, r4
 800938c:	00d2      	lsls	r2, r2, #3
 800938e:	a922      	add	r1, sp, #136	; 0x88
 8009390:	18e3      	adds	r3, r4, r3
 8009392:	9206      	str	r2, [sp, #24]
 8009394:	440a      	add	r2, r1
 8009396:	9302      	str	r3, [sp, #8]
 8009398:	f10b 0108 	add.w	r1, fp, #8
 800939c:	f102 0308 	add.w	r3, r2, #8
 80093a0:	1c66      	adds	r6, r4, #1
 80093a2:	910a      	str	r1, [sp, #40]	; 0x28
 80093a4:	2500      	movs	r5, #0
 80093a6:	930d      	str	r3, [sp, #52]	; 0x34
 80093a8:	9b02      	ldr	r3, [sp, #8]
 80093aa:	42b3      	cmp	r3, r6
 80093ac:	da04      	bge.n	80093b8 <__kernel_rem_pio2+0x398>
 80093ae:	461c      	mov	r4, r3
 80093b0:	e6a6      	b.n	8009100 <__kernel_rem_pio2+0xe0>
 80093b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093b4:	2301      	movs	r3, #1
 80093b6:	e7e3      	b.n	8009380 <__kernel_rem_pio2+0x360>
 80093b8:	9b06      	ldr	r3, [sp, #24]
 80093ba:	18ef      	adds	r7, r5, r3
 80093bc:	ab22      	add	r3, sp, #136	; 0x88
 80093be:	441f      	add	r7, r3
 80093c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80093c2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 80093c6:	f7f7 f8a5 	bl	8000514 <__aeabi_i2d>
 80093ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80093cc:	461c      	mov	r4, r3
 80093ce:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80093d0:	e9c7 0100 	strd	r0, r1, [r7]
 80093d4:	eb03 0b05 	add.w	fp, r3, r5
 80093d8:	2700      	movs	r7, #0
 80093da:	f04f 0800 	mov.w	r8, #0
 80093de:	f04f 0900 	mov.w	r9, #0
 80093e2:	9b07      	ldr	r3, [sp, #28]
 80093e4:	429f      	cmp	r7, r3
 80093e6:	dd08      	ble.n	80093fa <__kernel_rem_pio2+0x3da>
 80093e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093ea:	aa72      	add	r2, sp, #456	; 0x1c8
 80093ec:	18eb      	adds	r3, r5, r3
 80093ee:	4413      	add	r3, r2
 80093f0:	e9c3 8902 	strd	r8, r9, [r3, #8]
 80093f4:	3601      	adds	r6, #1
 80093f6:	3508      	adds	r5, #8
 80093f8:	e7d6      	b.n	80093a8 <__kernel_rem_pio2+0x388>
 80093fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80093fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8009402:	f7f7 f8f1 	bl	80005e8 <__aeabi_dmul>
 8009406:	4602      	mov	r2, r0
 8009408:	460b      	mov	r3, r1
 800940a:	4640      	mov	r0, r8
 800940c:	4649      	mov	r1, r9
 800940e:	f7f6 ff35 	bl	800027c <__adddf3>
 8009412:	3701      	adds	r7, #1
 8009414:	4680      	mov	r8, r0
 8009416:	4689      	mov	r9, r1
 8009418:	e7e3      	b.n	80093e2 <__kernel_rem_pio2+0x3c2>
 800941a:	3d01      	subs	r5, #1
 800941c:	e741      	b.n	80092a2 <__kernel_rem_pio2+0x282>
 800941e:	f1ca 0000 	rsb	r0, sl, #0
 8009422:	ec47 6b10 	vmov	d0, r6, r7
 8009426:	f000 fa83 	bl	8009930 <scalbn>
 800942a:	ec57 6b10 	vmov	r6, r7, d0
 800942e:	2200      	movs	r2, #0
 8009430:	4b99      	ldr	r3, [pc, #612]	; (8009698 <__kernel_rem_pio2+0x678>)
 8009432:	ee10 0a10 	vmov	r0, s0
 8009436:	4639      	mov	r1, r7
 8009438:	f7f7 fb5c 	bl	8000af4 <__aeabi_dcmpge>
 800943c:	b1f8      	cbz	r0, 800947e <__kernel_rem_pio2+0x45e>
 800943e:	2200      	movs	r2, #0
 8009440:	4b96      	ldr	r3, [pc, #600]	; (800969c <__kernel_rem_pio2+0x67c>)
 8009442:	4630      	mov	r0, r6
 8009444:	4639      	mov	r1, r7
 8009446:	f7f7 f8cf 	bl	80005e8 <__aeabi_dmul>
 800944a:	f7f7 fb67 	bl	8000b1c <__aeabi_d2iz>
 800944e:	4680      	mov	r8, r0
 8009450:	f7f7 f860 	bl	8000514 <__aeabi_i2d>
 8009454:	2200      	movs	r2, #0
 8009456:	4b90      	ldr	r3, [pc, #576]	; (8009698 <__kernel_rem_pio2+0x678>)
 8009458:	f7f7 f8c6 	bl	80005e8 <__aeabi_dmul>
 800945c:	460b      	mov	r3, r1
 800945e:	4602      	mov	r2, r0
 8009460:	4639      	mov	r1, r7
 8009462:	4630      	mov	r0, r6
 8009464:	f7f6 ff08 	bl	8000278 <__aeabi_dsub>
 8009468:	f7f7 fb58 	bl	8000b1c <__aeabi_d2iz>
 800946c:	1c65      	adds	r5, r4, #1
 800946e:	ab0e      	add	r3, sp, #56	; 0x38
 8009470:	f10a 0a18 	add.w	sl, sl, #24
 8009474:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8009478:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800947c:	e719      	b.n	80092b2 <__kernel_rem_pio2+0x292>
 800947e:	4630      	mov	r0, r6
 8009480:	4639      	mov	r1, r7
 8009482:	f7f7 fb4b 	bl	8000b1c <__aeabi_d2iz>
 8009486:	ab0e      	add	r3, sp, #56	; 0x38
 8009488:	4625      	mov	r5, r4
 800948a:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800948e:	e710      	b.n	80092b2 <__kernel_rem_pio2+0x292>
 8009490:	ab0e      	add	r3, sp, #56	; 0x38
 8009492:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8009496:	f7f7 f83d 	bl	8000514 <__aeabi_i2d>
 800949a:	4642      	mov	r2, r8
 800949c:	464b      	mov	r3, r9
 800949e:	f7f7 f8a3 	bl	80005e8 <__aeabi_dmul>
 80094a2:	2200      	movs	r2, #0
 80094a4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 80094a8:	4b7c      	ldr	r3, [pc, #496]	; (800969c <__kernel_rem_pio2+0x67c>)
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	f7f7 f89b 	bl	80005e8 <__aeabi_dmul>
 80094b2:	3f01      	subs	r7, #1
 80094b4:	4680      	mov	r8, r0
 80094b6:	4689      	mov	r9, r1
 80094b8:	e708      	b.n	80092cc <__kernel_rem_pio2+0x2ac>
 80094ba:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 80094be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 80094c6:	f7f7 f88f 	bl	80005e8 <__aeabi_dmul>
 80094ca:	4602      	mov	r2, r0
 80094cc:	460b      	mov	r3, r1
 80094ce:	4640      	mov	r0, r8
 80094d0:	4649      	mov	r1, r9
 80094d2:	f7f6 fed3 	bl	800027c <__adddf3>
 80094d6:	3701      	adds	r7, #1
 80094d8:	4680      	mov	r8, r0
 80094da:	4689      	mov	r9, r1
 80094dc:	9b04      	ldr	r3, [sp, #16]
 80094de:	429f      	cmp	r7, r3
 80094e0:	dc01      	bgt.n	80094e6 <__kernel_rem_pio2+0x4c6>
 80094e2:	45ba      	cmp	sl, r7
 80094e4:	dae9      	bge.n	80094ba <__kernel_rem_pio2+0x49a>
 80094e6:	ab4a      	add	r3, sp, #296	; 0x128
 80094e8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80094ec:	e9c3 8900 	strd	r8, r9, [r3]
 80094f0:	f10a 0a01 	add.w	sl, sl, #1
 80094f4:	3e08      	subs	r6, #8
 80094f6:	e6f0      	b.n	80092da <__kernel_rem_pio2+0x2ba>
 80094f8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80094fa:	2b03      	cmp	r3, #3
 80094fc:	d85b      	bhi.n	80095b6 <__kernel_rem_pio2+0x596>
 80094fe:	e8df f003 	tbb	[pc, r3]
 8009502:	264a      	.short	0x264a
 8009504:	0226      	.short	0x0226
 8009506:	ab9a      	add	r3, sp, #616	; 0x268
 8009508:	441c      	add	r4, r3
 800950a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800950e:	46a2      	mov	sl, r4
 8009510:	46ab      	mov	fp, r5
 8009512:	f1bb 0f00 	cmp.w	fp, #0
 8009516:	dc6c      	bgt.n	80095f2 <__kernel_rem_pio2+0x5d2>
 8009518:	46a2      	mov	sl, r4
 800951a:	46ab      	mov	fp, r5
 800951c:	f1bb 0f01 	cmp.w	fp, #1
 8009520:	f300 8086 	bgt.w	8009630 <__kernel_rem_pio2+0x610>
 8009524:	2000      	movs	r0, #0
 8009526:	2100      	movs	r1, #0
 8009528:	2d01      	cmp	r5, #1
 800952a:	f300 80a0 	bgt.w	800966e <__kernel_rem_pio2+0x64e>
 800952e:	9b02      	ldr	r3, [sp, #8]
 8009530:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8009534:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8009538:	2b00      	cmp	r3, #0
 800953a:	f040 809e 	bne.w	800967a <__kernel_rem_pio2+0x65a>
 800953e:	9b01      	ldr	r3, [sp, #4]
 8009540:	e9c3 7800 	strd	r7, r8, [r3]
 8009544:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009548:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800954c:	e033      	b.n	80095b6 <__kernel_rem_pio2+0x596>
 800954e:	3408      	adds	r4, #8
 8009550:	ab4a      	add	r3, sp, #296	; 0x128
 8009552:	441c      	add	r4, r3
 8009554:	462e      	mov	r6, r5
 8009556:	2000      	movs	r0, #0
 8009558:	2100      	movs	r1, #0
 800955a:	2e00      	cmp	r6, #0
 800955c:	da3a      	bge.n	80095d4 <__kernel_rem_pio2+0x5b4>
 800955e:	9b02      	ldr	r3, [sp, #8]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d03d      	beq.n	80095e0 <__kernel_rem_pio2+0x5c0>
 8009564:	4602      	mov	r2, r0
 8009566:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800956a:	9c01      	ldr	r4, [sp, #4]
 800956c:	e9c4 2300 	strd	r2, r3, [r4]
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8009578:	f7f6 fe7e 	bl	8000278 <__aeabi_dsub>
 800957c:	ae4c      	add	r6, sp, #304	; 0x130
 800957e:	2401      	movs	r4, #1
 8009580:	42a5      	cmp	r5, r4
 8009582:	da30      	bge.n	80095e6 <__kernel_rem_pio2+0x5c6>
 8009584:	9b02      	ldr	r3, [sp, #8]
 8009586:	b113      	cbz	r3, 800958e <__kernel_rem_pio2+0x56e>
 8009588:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800958c:	4619      	mov	r1, r3
 800958e:	9b01      	ldr	r3, [sp, #4]
 8009590:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8009594:	e00f      	b.n	80095b6 <__kernel_rem_pio2+0x596>
 8009596:	ab9a      	add	r3, sp, #616	; 0x268
 8009598:	441c      	add	r4, r3
 800959a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800959e:	2000      	movs	r0, #0
 80095a0:	2100      	movs	r1, #0
 80095a2:	2d00      	cmp	r5, #0
 80095a4:	da10      	bge.n	80095c8 <__kernel_rem_pio2+0x5a8>
 80095a6:	9b02      	ldr	r3, [sp, #8]
 80095a8:	b113      	cbz	r3, 80095b0 <__kernel_rem_pio2+0x590>
 80095aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80095ae:	4619      	mov	r1, r3
 80095b0:	9b01      	ldr	r3, [sp, #4]
 80095b2:	e9c3 0100 	strd	r0, r1, [r3]
 80095b6:	9b06      	ldr	r3, [sp, #24]
 80095b8:	f003 0007 	and.w	r0, r3, #7
 80095bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80095c0:	ecbd 8b02 	vpop	{d8}
 80095c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095c8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80095cc:	f7f6 fe56 	bl	800027c <__adddf3>
 80095d0:	3d01      	subs	r5, #1
 80095d2:	e7e6      	b.n	80095a2 <__kernel_rem_pio2+0x582>
 80095d4:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80095d8:	f7f6 fe50 	bl	800027c <__adddf3>
 80095dc:	3e01      	subs	r6, #1
 80095de:	e7bc      	b.n	800955a <__kernel_rem_pio2+0x53a>
 80095e0:	4602      	mov	r2, r0
 80095e2:	460b      	mov	r3, r1
 80095e4:	e7c1      	b.n	800956a <__kernel_rem_pio2+0x54a>
 80095e6:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80095ea:	f7f6 fe47 	bl	800027c <__adddf3>
 80095ee:	3401      	adds	r4, #1
 80095f0:	e7c6      	b.n	8009580 <__kernel_rem_pio2+0x560>
 80095f2:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 80095f6:	ed3a 7b02 	vldmdb	sl!, {d7}
 80095fa:	4640      	mov	r0, r8
 80095fc:	ec53 2b17 	vmov	r2, r3, d7
 8009600:	4649      	mov	r1, r9
 8009602:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009606:	f7f6 fe39 	bl	800027c <__adddf3>
 800960a:	4602      	mov	r2, r0
 800960c:	460b      	mov	r3, r1
 800960e:	4606      	mov	r6, r0
 8009610:	460f      	mov	r7, r1
 8009612:	4640      	mov	r0, r8
 8009614:	4649      	mov	r1, r9
 8009616:	f7f6 fe2f 	bl	8000278 <__aeabi_dsub>
 800961a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800961e:	f7f6 fe2d 	bl	800027c <__adddf3>
 8009622:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009626:	e9ca 0100 	strd	r0, r1, [sl]
 800962a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800962e:	e770      	b.n	8009512 <__kernel_rem_pio2+0x4f2>
 8009630:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8009634:	ed3a 7b02 	vldmdb	sl!, {d7}
 8009638:	4630      	mov	r0, r6
 800963a:	ec53 2b17 	vmov	r2, r3, d7
 800963e:	4639      	mov	r1, r7
 8009640:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009644:	f7f6 fe1a 	bl	800027c <__adddf3>
 8009648:	4602      	mov	r2, r0
 800964a:	460b      	mov	r3, r1
 800964c:	4680      	mov	r8, r0
 800964e:	4689      	mov	r9, r1
 8009650:	4630      	mov	r0, r6
 8009652:	4639      	mov	r1, r7
 8009654:	f7f6 fe10 	bl	8000278 <__aeabi_dsub>
 8009658:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800965c:	f7f6 fe0e 	bl	800027c <__adddf3>
 8009660:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009664:	e9ca 0100 	strd	r0, r1, [sl]
 8009668:	e94a 8902 	strd	r8, r9, [sl, #-8]
 800966c:	e756      	b.n	800951c <__kernel_rem_pio2+0x4fc>
 800966e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8009672:	f7f6 fe03 	bl	800027c <__adddf3>
 8009676:	3d01      	subs	r5, #1
 8009678:	e756      	b.n	8009528 <__kernel_rem_pio2+0x508>
 800967a:	9b01      	ldr	r3, [sp, #4]
 800967c:	9a01      	ldr	r2, [sp, #4]
 800967e:	601f      	str	r7, [r3, #0]
 8009680:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8009684:	605c      	str	r4, [r3, #4]
 8009686:	609d      	str	r5, [r3, #8]
 8009688:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800968c:	60d3      	str	r3, [r2, #12]
 800968e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009692:	6110      	str	r0, [r2, #16]
 8009694:	6153      	str	r3, [r2, #20]
 8009696:	e78e      	b.n	80095b6 <__kernel_rem_pio2+0x596>
 8009698:	41700000 	.word	0x41700000
 800969c:	3e700000 	.word	0x3e700000

080096a0 <__kernel_sin>:
 80096a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096a4:	ec55 4b10 	vmov	r4, r5, d0
 80096a8:	b085      	sub	sp, #20
 80096aa:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80096ae:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80096b2:	ed8d 1b00 	vstr	d1, [sp]
 80096b6:	9002      	str	r0, [sp, #8]
 80096b8:	da06      	bge.n	80096c8 <__kernel_sin+0x28>
 80096ba:	ee10 0a10 	vmov	r0, s0
 80096be:	4629      	mov	r1, r5
 80096c0:	f7f7 fa2c 	bl	8000b1c <__aeabi_d2iz>
 80096c4:	2800      	cmp	r0, #0
 80096c6:	d051      	beq.n	800976c <__kernel_sin+0xcc>
 80096c8:	4622      	mov	r2, r4
 80096ca:	462b      	mov	r3, r5
 80096cc:	4620      	mov	r0, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	f7f6 ff8a 	bl	80005e8 <__aeabi_dmul>
 80096d4:	4682      	mov	sl, r0
 80096d6:	468b      	mov	fp, r1
 80096d8:	4602      	mov	r2, r0
 80096da:	460b      	mov	r3, r1
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f6 ff82 	bl	80005e8 <__aeabi_dmul>
 80096e4:	a341      	add	r3, pc, #260	; (adr r3, 80097ec <__kernel_sin+0x14c>)
 80096e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ea:	4680      	mov	r8, r0
 80096ec:	4689      	mov	r9, r1
 80096ee:	4650      	mov	r0, sl
 80096f0:	4659      	mov	r1, fp
 80096f2:	f7f6 ff79 	bl	80005e8 <__aeabi_dmul>
 80096f6:	a33f      	add	r3, pc, #252	; (adr r3, 80097f4 <__kernel_sin+0x154>)
 80096f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096fc:	f7f6 fdbc 	bl	8000278 <__aeabi_dsub>
 8009700:	4652      	mov	r2, sl
 8009702:	465b      	mov	r3, fp
 8009704:	f7f6 ff70 	bl	80005e8 <__aeabi_dmul>
 8009708:	a33c      	add	r3, pc, #240	; (adr r3, 80097fc <__kernel_sin+0x15c>)
 800970a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800970e:	f7f6 fdb5 	bl	800027c <__adddf3>
 8009712:	4652      	mov	r2, sl
 8009714:	465b      	mov	r3, fp
 8009716:	f7f6 ff67 	bl	80005e8 <__aeabi_dmul>
 800971a:	a33a      	add	r3, pc, #232	; (adr r3, 8009804 <__kernel_sin+0x164>)
 800971c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009720:	f7f6 fdaa 	bl	8000278 <__aeabi_dsub>
 8009724:	4652      	mov	r2, sl
 8009726:	465b      	mov	r3, fp
 8009728:	f7f6 ff5e 	bl	80005e8 <__aeabi_dmul>
 800972c:	a337      	add	r3, pc, #220	; (adr r3, 800980c <__kernel_sin+0x16c>)
 800972e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009732:	f7f6 fda3 	bl	800027c <__adddf3>
 8009736:	9b02      	ldr	r3, [sp, #8]
 8009738:	4606      	mov	r6, r0
 800973a:	460f      	mov	r7, r1
 800973c:	b9db      	cbnz	r3, 8009776 <__kernel_sin+0xd6>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	4650      	mov	r0, sl
 8009744:	4659      	mov	r1, fp
 8009746:	f7f6 ff4f 	bl	80005e8 <__aeabi_dmul>
 800974a:	a325      	add	r3, pc, #148	; (adr r3, 80097e0 <__kernel_sin+0x140>)
 800974c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009750:	f7f6 fd92 	bl	8000278 <__aeabi_dsub>
 8009754:	4642      	mov	r2, r8
 8009756:	464b      	mov	r3, r9
 8009758:	f7f6 ff46 	bl	80005e8 <__aeabi_dmul>
 800975c:	4602      	mov	r2, r0
 800975e:	460b      	mov	r3, r1
 8009760:	4620      	mov	r0, r4
 8009762:	4629      	mov	r1, r5
 8009764:	f7f6 fd8a 	bl	800027c <__adddf3>
 8009768:	4604      	mov	r4, r0
 800976a:	460d      	mov	r5, r1
 800976c:	ec45 4b10 	vmov	d0, r4, r5
 8009770:	b005      	add	sp, #20
 8009772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009776:	2200      	movs	r2, #0
 8009778:	4b1b      	ldr	r3, [pc, #108]	; (80097e8 <__kernel_sin+0x148>)
 800977a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800977e:	f7f6 ff33 	bl	80005e8 <__aeabi_dmul>
 8009782:	4632      	mov	r2, r6
 8009784:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009788:	463b      	mov	r3, r7
 800978a:	4640      	mov	r0, r8
 800978c:	4649      	mov	r1, r9
 800978e:	f7f6 ff2b 	bl	80005e8 <__aeabi_dmul>
 8009792:	4602      	mov	r2, r0
 8009794:	460b      	mov	r3, r1
 8009796:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979a:	f7f6 fd6d 	bl	8000278 <__aeabi_dsub>
 800979e:	4652      	mov	r2, sl
 80097a0:	465b      	mov	r3, fp
 80097a2:	f7f6 ff21 	bl	80005e8 <__aeabi_dmul>
 80097a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097aa:	f7f6 fd65 	bl	8000278 <__aeabi_dsub>
 80097ae:	a30c      	add	r3, pc, #48	; (adr r3, 80097e0 <__kernel_sin+0x140>)
 80097b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b4:	4606      	mov	r6, r0
 80097b6:	460f      	mov	r7, r1
 80097b8:	4640      	mov	r0, r8
 80097ba:	4649      	mov	r1, r9
 80097bc:	f7f6 ff14 	bl	80005e8 <__aeabi_dmul>
 80097c0:	4602      	mov	r2, r0
 80097c2:	460b      	mov	r3, r1
 80097c4:	4630      	mov	r0, r6
 80097c6:	4639      	mov	r1, r7
 80097c8:	f7f6 fd58 	bl	800027c <__adddf3>
 80097cc:	4602      	mov	r2, r0
 80097ce:	460b      	mov	r3, r1
 80097d0:	4620      	mov	r0, r4
 80097d2:	4629      	mov	r1, r5
 80097d4:	f7f6 fd50 	bl	8000278 <__aeabi_dsub>
 80097d8:	e7c6      	b.n	8009768 <__kernel_sin+0xc8>
 80097da:	bf00      	nop
 80097dc:	f3af 8000 	nop.w
 80097e0:	55555549 	.word	0x55555549
 80097e4:	3fc55555 	.word	0x3fc55555
 80097e8:	3fe00000 	.word	0x3fe00000
 80097ec:	5acfd57c 	.word	0x5acfd57c
 80097f0:	3de5d93a 	.word	0x3de5d93a
 80097f4:	8a2b9ceb 	.word	0x8a2b9ceb
 80097f8:	3e5ae5e6 	.word	0x3e5ae5e6
 80097fc:	57b1fe7d 	.word	0x57b1fe7d
 8009800:	3ec71de3 	.word	0x3ec71de3
 8009804:	19c161d5 	.word	0x19c161d5
 8009808:	3f2a01a0 	.word	0x3f2a01a0
 800980c:	1110f8a6 	.word	0x1110f8a6
 8009810:	3f811111 	.word	0x3f811111

08009814 <fabs>:
 8009814:	ec51 0b10 	vmov	r0, r1, d0
 8009818:	ee10 2a10 	vmov	r2, s0
 800981c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009820:	ec43 2b10 	vmov	d0, r2, r3
 8009824:	4770      	bx	lr
	...

08009828 <floor>:
 8009828:	ec51 0b10 	vmov	r0, r1, d0
 800982c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009830:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009834:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009838:	2e13      	cmp	r6, #19
 800983a:	460c      	mov	r4, r1
 800983c:	ee10 5a10 	vmov	r5, s0
 8009840:	4680      	mov	r8, r0
 8009842:	dc34      	bgt.n	80098ae <floor+0x86>
 8009844:	2e00      	cmp	r6, #0
 8009846:	da16      	bge.n	8009876 <floor+0x4e>
 8009848:	a335      	add	r3, pc, #212	; (adr r3, 8009920 <floor+0xf8>)
 800984a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800984e:	f7f6 fd15 	bl	800027c <__adddf3>
 8009852:	2200      	movs	r2, #0
 8009854:	2300      	movs	r3, #0
 8009856:	f7f7 f957 	bl	8000b08 <__aeabi_dcmpgt>
 800985a:	b148      	cbz	r0, 8009870 <floor+0x48>
 800985c:	2c00      	cmp	r4, #0
 800985e:	da59      	bge.n	8009914 <floor+0xec>
 8009860:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009864:	4a30      	ldr	r2, [pc, #192]	; (8009928 <floor+0x100>)
 8009866:	432b      	orrs	r3, r5
 8009868:	2500      	movs	r5, #0
 800986a:	42ab      	cmp	r3, r5
 800986c:	bf18      	it	ne
 800986e:	4614      	movne	r4, r2
 8009870:	4621      	mov	r1, r4
 8009872:	4628      	mov	r0, r5
 8009874:	e025      	b.n	80098c2 <floor+0x9a>
 8009876:	4f2d      	ldr	r7, [pc, #180]	; (800992c <floor+0x104>)
 8009878:	4137      	asrs	r7, r6
 800987a:	ea01 0307 	and.w	r3, r1, r7
 800987e:	4303      	orrs	r3, r0
 8009880:	d01f      	beq.n	80098c2 <floor+0x9a>
 8009882:	a327      	add	r3, pc, #156	; (adr r3, 8009920 <floor+0xf8>)
 8009884:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009888:	f7f6 fcf8 	bl	800027c <__adddf3>
 800988c:	2200      	movs	r2, #0
 800988e:	2300      	movs	r3, #0
 8009890:	f7f7 f93a 	bl	8000b08 <__aeabi_dcmpgt>
 8009894:	2800      	cmp	r0, #0
 8009896:	d0eb      	beq.n	8009870 <floor+0x48>
 8009898:	2c00      	cmp	r4, #0
 800989a:	bfbe      	ittt	lt
 800989c:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80098a0:	fa43 f606 	asrlt.w	r6, r3, r6
 80098a4:	19a4      	addlt	r4, r4, r6
 80098a6:	ea24 0407 	bic.w	r4, r4, r7
 80098aa:	2500      	movs	r5, #0
 80098ac:	e7e0      	b.n	8009870 <floor+0x48>
 80098ae:	2e33      	cmp	r6, #51	; 0x33
 80098b0:	dd0b      	ble.n	80098ca <floor+0xa2>
 80098b2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80098b6:	d104      	bne.n	80098c2 <floor+0x9a>
 80098b8:	ee10 2a10 	vmov	r2, s0
 80098bc:	460b      	mov	r3, r1
 80098be:	f7f6 fcdd 	bl	800027c <__adddf3>
 80098c2:	ec41 0b10 	vmov	d0, r0, r1
 80098c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098ca:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80098ce:	f04f 33ff 	mov.w	r3, #4294967295
 80098d2:	fa23 f707 	lsr.w	r7, r3, r7
 80098d6:	4207      	tst	r7, r0
 80098d8:	d0f3      	beq.n	80098c2 <floor+0x9a>
 80098da:	a311      	add	r3, pc, #68	; (adr r3, 8009920 <floor+0xf8>)
 80098dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e0:	f7f6 fccc 	bl	800027c <__adddf3>
 80098e4:	2200      	movs	r2, #0
 80098e6:	2300      	movs	r3, #0
 80098e8:	f7f7 f90e 	bl	8000b08 <__aeabi_dcmpgt>
 80098ec:	2800      	cmp	r0, #0
 80098ee:	d0bf      	beq.n	8009870 <floor+0x48>
 80098f0:	2c00      	cmp	r4, #0
 80098f2:	da02      	bge.n	80098fa <floor+0xd2>
 80098f4:	2e14      	cmp	r6, #20
 80098f6:	d103      	bne.n	8009900 <floor+0xd8>
 80098f8:	3401      	adds	r4, #1
 80098fa:	ea25 0507 	bic.w	r5, r5, r7
 80098fe:	e7b7      	b.n	8009870 <floor+0x48>
 8009900:	2301      	movs	r3, #1
 8009902:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009906:	fa03 f606 	lsl.w	r6, r3, r6
 800990a:	4435      	add	r5, r6
 800990c:	4545      	cmp	r5, r8
 800990e:	bf38      	it	cc
 8009910:	18e4      	addcc	r4, r4, r3
 8009912:	e7f2      	b.n	80098fa <floor+0xd2>
 8009914:	2500      	movs	r5, #0
 8009916:	462c      	mov	r4, r5
 8009918:	e7aa      	b.n	8009870 <floor+0x48>
 800991a:	bf00      	nop
 800991c:	f3af 8000 	nop.w
 8009920:	8800759c 	.word	0x8800759c
 8009924:	7e37e43c 	.word	0x7e37e43c
 8009928:	bff00000 	.word	0xbff00000
 800992c:	000fffff 	.word	0x000fffff

08009930 <scalbn>:
 8009930:	b570      	push	{r4, r5, r6, lr}
 8009932:	ec55 4b10 	vmov	r4, r5, d0
 8009936:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800993a:	4606      	mov	r6, r0
 800993c:	462b      	mov	r3, r5
 800993e:	b9aa      	cbnz	r2, 800996c <scalbn+0x3c>
 8009940:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8009944:	4323      	orrs	r3, r4
 8009946:	d03b      	beq.n	80099c0 <scalbn+0x90>
 8009948:	4b31      	ldr	r3, [pc, #196]	; (8009a10 <scalbn+0xe0>)
 800994a:	4629      	mov	r1, r5
 800994c:	2200      	movs	r2, #0
 800994e:	ee10 0a10 	vmov	r0, s0
 8009952:	f7f6 fe49 	bl	80005e8 <__aeabi_dmul>
 8009956:	4b2f      	ldr	r3, [pc, #188]	; (8009a14 <scalbn+0xe4>)
 8009958:	429e      	cmp	r6, r3
 800995a:	4604      	mov	r4, r0
 800995c:	460d      	mov	r5, r1
 800995e:	da12      	bge.n	8009986 <scalbn+0x56>
 8009960:	a327      	add	r3, pc, #156	; (adr r3, 8009a00 <scalbn+0xd0>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fe3f 	bl	80005e8 <__aeabi_dmul>
 800996a:	e009      	b.n	8009980 <scalbn+0x50>
 800996c:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8009970:	428a      	cmp	r2, r1
 8009972:	d10c      	bne.n	800998e <scalbn+0x5e>
 8009974:	ee10 2a10 	vmov	r2, s0
 8009978:	4620      	mov	r0, r4
 800997a:	4629      	mov	r1, r5
 800997c:	f7f6 fc7e 	bl	800027c <__adddf3>
 8009980:	4604      	mov	r4, r0
 8009982:	460d      	mov	r5, r1
 8009984:	e01c      	b.n	80099c0 <scalbn+0x90>
 8009986:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800998a:	460b      	mov	r3, r1
 800998c:	3a36      	subs	r2, #54	; 0x36
 800998e:	4432      	add	r2, r6
 8009990:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8009994:	428a      	cmp	r2, r1
 8009996:	dd0b      	ble.n	80099b0 <scalbn+0x80>
 8009998:	ec45 4b11 	vmov	d1, r4, r5
 800999c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8009a08 <scalbn+0xd8>
 80099a0:	f000 f83c 	bl	8009a1c <copysign>
 80099a4:	a318      	add	r3, pc, #96	; (adr r3, 8009a08 <scalbn+0xd8>)
 80099a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099aa:	ec51 0b10 	vmov	r0, r1, d0
 80099ae:	e7da      	b.n	8009966 <scalbn+0x36>
 80099b0:	2a00      	cmp	r2, #0
 80099b2:	dd08      	ble.n	80099c6 <scalbn+0x96>
 80099b4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099b8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099bc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099c0:	ec45 4b10 	vmov	d0, r4, r5
 80099c4:	bd70      	pop	{r4, r5, r6, pc}
 80099c6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80099ca:	da0d      	bge.n	80099e8 <scalbn+0xb8>
 80099cc:	f24c 3350 	movw	r3, #50000	; 0xc350
 80099d0:	429e      	cmp	r6, r3
 80099d2:	ec45 4b11 	vmov	d1, r4, r5
 80099d6:	dce1      	bgt.n	800999c <scalbn+0x6c>
 80099d8:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8009a00 <scalbn+0xd0>
 80099dc:	f000 f81e 	bl	8009a1c <copysign>
 80099e0:	a307      	add	r3, pc, #28	; (adr r3, 8009a00 <scalbn+0xd0>)
 80099e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099e6:	e7e0      	b.n	80099aa <scalbn+0x7a>
 80099e8:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80099ec:	3236      	adds	r2, #54	; 0x36
 80099ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80099f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80099f6:	4620      	mov	r0, r4
 80099f8:	4629      	mov	r1, r5
 80099fa:	2200      	movs	r2, #0
 80099fc:	4b06      	ldr	r3, [pc, #24]	; (8009a18 <scalbn+0xe8>)
 80099fe:	e7b2      	b.n	8009966 <scalbn+0x36>
 8009a00:	c2f8f359 	.word	0xc2f8f359
 8009a04:	01a56e1f 	.word	0x01a56e1f
 8009a08:	8800759c 	.word	0x8800759c
 8009a0c:	7e37e43c 	.word	0x7e37e43c
 8009a10:	43500000 	.word	0x43500000
 8009a14:	ffff3cb0 	.word	0xffff3cb0
 8009a18:	3c900000 	.word	0x3c900000

08009a1c <copysign>:
 8009a1c:	ec51 0b10 	vmov	r0, r1, d0
 8009a20:	ee11 0a90 	vmov	r0, s3
 8009a24:	ee10 2a10 	vmov	r2, s0
 8009a28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8009a2c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8009a30:	ea41 0300 	orr.w	r3, r1, r0
 8009a34:	ec43 2b10 	vmov	d0, r2, r3
 8009a38:	4770      	bx	lr
	...

08009a3c <_init>:
 8009a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a3e:	bf00      	nop
 8009a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a42:	bc08      	pop	{r3}
 8009a44:	469e      	mov	lr, r3
 8009a46:	4770      	bx	lr

08009a48 <_fini>:
 8009a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4a:	bf00      	nop
 8009a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a4e:	bc08      	pop	{r3}
 8009a50:	469e      	mov	lr, r3
 8009a52:	4770      	bx	lr
